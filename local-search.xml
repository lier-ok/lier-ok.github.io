<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jni编程</title>
    <link href="/2023/07/27/jni%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/07/27/jni%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="JNI开发流程"><a href="#JNI开发流程" class="headerlink" title="JNI开发流程"></a>JNI开发流程</h1><h3 id="1：介绍"><a href="#1：介绍" class="headerlink" title="1：介绍"></a>1：介绍</h3><p>JNI是Java Native Interface的缩写，JNI是JAVA平台专门用于和本地C代码进行相互操作的API，称为JAVA本地接口。</p><h3 id="2：流程"><a href="#2：流程" class="headerlink" title="2：流程"></a>2：流程</h3><p> 实现java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java代码实现</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloNative</span>&#123;<br>    <br>    <span class="hljs-comment">//加载绝对路径下的so文件，dll为windows动态库链接文件，so为linux动态库链接文件</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-comment">//System.load() 路径为绝对路径</span><br>        System.load(<span class="hljs-string">&quot;/home/rd007/java/jni_so_test.so&quot;</span>);<br>        <span class="hljs-comment">//System.loadLibrary() 加载路径为相对路径</span><br>    &#125;<br>    <br><span class="hljs-comment">// native修饰调用本地库c++中函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">10</span>,<span class="hljs-number">11</span>);<br>        System.out.println(<span class="hljs-string">&quot;Hello, This is java and the res = &quot;</span> + res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">javac 编译java代码，生产.class文件</span><br>javac HelloNative.java<br><br>//javah 生成头文件<br>javah -jni HelloNavite<br>    <br>    <br><span class="hljs-meta prompt_"># </span><span class="language-bash">如下为生成的头文件内容</span><br>    <br>/* DO NOT EDIT THIS FILE - it is machine generated */<br><span class="hljs-meta prompt_">#</span><span class="language-bash">include &lt;jni.h&gt;</span><br>/* Header for class HelloNative */<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ifndef _Included_HelloNative</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">define _Included_HelloNative</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ifdef __cplusplus</span><br>extern &quot;C&quot; &#123;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">endif</span><br>/*<br> * Class:     HelloNative<br> * Method:    max<br> * Signature: (II)I<br> */<br> <br>JNIEXPORT jint JNICALL Java_HelloNative_max<br>  (JNIEnv *, jclass, jint, jint);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ifdef __cplusplus</span><br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">endif</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">endif</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">此为java代码根据规则生成的c函数</span><br>JNIEXPORT jint JNICALL Java_HelloNative_max<br>  (JNIEnv *, jclass, jint, jint);<br><br></code></pre></td></tr></table></figure><p>根据生成的c函数编写c++代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HelloNative.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">JNIEXPORT jint JNICALL <span class="hljs-title">Java_HelloNative_max</span><span class="hljs-params">(JNIEnv *, jclass, jint num1, jint num2)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> num1 &gt; num2 ? num1:num2;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>生成 .so动态库链接文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">此处的so文件命名必须和java代码中一致，且绝对路径也要一致</span><br>gcc -fPIC --shared HelloJNI.c -o jni_so_test.so -I /usr/lib/jvm/java-7-openjdk-amd64/include/<br><br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java HelloNavite<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jni</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++笔记</title>
    <link href="/2023/07/27/c++%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/27/c++%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="C-编程"><a href="#C-编程" class="headerlink" title="C++ 编程"></a>C++ 编程</h2><h3 id="1：helloword"><a href="#1：helloword" class="headerlink" title="1：helloword"></a>1：helloword</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <span class="hljs-comment">//using namespace std; 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;helloworld&quot;</span> &lt;&lt;  endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2：数据类型"><a href="#2：数据类型" class="headerlink" title="2：数据类型"></a>2：数据类型</h3><table><thead><tr><th align="left">类型</th><th align="left">关键字</th></tr></thead><tbody><tr><td align="left">布尔型</td><td align="left">bool</td></tr><tr><td align="left">字符型</td><td align="left">char</td></tr><tr><td align="left">整型</td><td align="left">int</td></tr><tr><td align="left">浮点型</td><td align="left">float</td></tr><tr><td align="left">双浮点型</td><td align="left">double</td></tr><tr><td align="left">无类型</td><td align="left">void</td></tr><tr><td align="left">宽字符型</td><td align="left">wchar_t</td></tr></tbody></table><p>其实 wchar_t 是这样来的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">wchar_t</span>;<br><br></code></pre></td></tr></table></figure><p>所以 wchar_t 实际上的空间是和 short int 一样。</p><p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p><ul><li>signed</li><li>unsigned</li><li>short</li><li>long</li></ul><h3 id="3：枚举类型"><a href="#3：枚举类型" class="headerlink" title="3：枚举类型"></a>3：枚举类型</h3><p>枚举类型(enumeration)是C++中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。</p><p>如果一个变量只有几种可能的值，可以定义为枚举(enumeration)类型。所谓”枚举”是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。</p><p>创建枚举，需要使用关键字 <strong>enum</strong>。枚举类型的一般形式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">enum</span> 枚举名&#123; <br>     标识符[=整型常数], <br>     标识符[=整型常数], <br>... <br>    标识符[=整型常数]<br>&#125; 枚举变量;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">testEnum</span>&#123;red,blue,green&#125; color <span class="hljs-comment">// 默认为1，2，3</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">test</span>&#123;red, blue = <span class="hljs-number">10</span>, green&#125; <span class="hljs-comment">//第一个依然为0， 第三个默认加1</span><br><br><br></code></pre></td></tr></table></figure><h3 id="4：常量"><a href="#4：常量" class="headerlink" title="4：常量"></a>4：常量</h3><p>使用 #define宏定义或者const关键字定义常量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HEIGHT 10 <span class="hljs-comment">//#define定义常量</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> WIDTH = <span class="hljs-number">10</span>; <span class="hljs-comment">//const定义常量</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;helloworld&quot;</span> &lt;&lt;  endl;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="5：类型修饰符"><a href="#5：类型修饰符" class="headerlink" title="5：类型修饰符"></a>5：类型修饰符</h3><table><thead><tr><th>const</th><th><strong>const</strong> 定义常量，表示该变量的值不能被修改。。</th></tr></thead><tbody><tr><td>volatile</td><td>修饰符 <strong>volatile</strong> 告诉该变量的值可能会被程序以外的因素改变，如硬件或其他线程。。</td></tr><tr><td>restrict</td><td>由 <strong>restrict</strong> 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</td></tr><tr><td>mutable</td><td>表示类中的成员变量可以在 const 成员函数中被修改。</td></tr><tr><td>static</td><td>用于定义静态变量，表示该变量的作用域仅限于当前文件或当前函数内，不会被其他文件或函数访问。</td></tr><tr><td>register</td><td>用于定义寄存器变量，表示该变量被频繁使用，可以存储在CPU的寄存器中，以提高程序的运行效率。</td></tr></tbody></table><h3 id="6：存储类"><a href="#6：存储类" class="headerlink" title="6：存储类"></a>6：存储类</h3><p>存储类定义 C++ 程序中变量&#x2F;函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：</p><ul><li>auto</li><li>register</li><li>static</li><li>extern</li><li>mutable</li><li>thread_local (C++11)</li></ul><p>从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。</p><p><strong>auto 存储类</strong></p><p> 自 C++ 11 以来，<strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p><p>C++98标准中auto关键字用于自动变量的声明，但由于使用<strong>极少且多余，在 C++17 中已删除这一用法。</strong></p><p><strong>register 存储类</strong></p><p> register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p><p> 寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p><p><strong>static 存储类</strong></p><p> static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><p> static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内</p><p><strong>extern 存储类</strong></p><p> extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的</p><p>第一个文件：main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-type">int</span> count ;  <span class="hljs-comment">//必须为全局变量后续才可以用extern关键字声明</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title">write_extern</span><span class="hljs-params">()</span></span>;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>count = <span class="hljs-number">5</span>;  <br>    <span class="hljs-built_in">write_extern</span>(); <br>&#125;<br><br>第二个文件：support.cpp<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> count; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write_extern</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;   <br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Count is &quot;</span> &lt;&lt; count &lt;&lt; std::endl; <br>&#125;<br><br><span class="hljs-comment">//两个文件之间使用extern关键字修饰的变量 函数可以相互引用</span><br><br><br></code></pre></td></tr></table></figure><p><strong>mutable 存储类</strong></p><p> mutable说明符仅适用于类的对象，这将在本教程的最后进行讲解。它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p><p><strong>thread_local 存储类</strong></p><p>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本</p><p><strong>与java中ThreadLocal类类似，维护当前线程的本地的变量，保证线程安全</strong></p><h3 id="8：运算符"><a href="#8：运算符" class="headerlink" title="8：运算符"></a>8：运算符</h3><p>算术，关系，逻辑，位运算符与java中一致</p><p><strong>杂项运算符</strong></p><p>下表列出了 C++ 支持的其他一些重要的运算符。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">sizeof</td><td align="left">sizeof 运算符返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td align="left">Condition ? X : Y</td><td align="left">三元运算</td></tr><tr><td align="left">,</td><td align="left">逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。</td></tr><tr><td align="left">.和 -&gt;</td><td align="left">成员运算符用于引用类、结构和共用体的成员。</td></tr><tr><td align="left">Cast</td><td align="left">强制转换运算符把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。</td></tr><tr><td align="left">&amp;</td><td align="left">指针运算符 &amp;返回变量的地址。例如 &a; 将给出变量的实际地址。</td></tr><tr><td align="left">*</td><td align="left">指针运算符 <em>指向一个变量。例如，</em>var; 将指向变量 var。</td></tr></tbody></table><h3 id="9：循环结构"><a href="#9：循环结构" class="headerlink" title="9：循环结构"></a>9：循环结构</h3><p><strong>与java中一致</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//c++中增强for循环写法</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> &amp;x : my_array)<br>&#123;<br>    x *= <span class="hljs-number">2</span>;<br>    cout &lt;&lt; x &lt;&lt; endl;  <br>&#125;<br><span class="hljs-comment">//java中写法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : my_array)&#123;<br>    x *= <span class="hljs-number">2</span>;<br>    System.out.<span class="hljs-built_in">println</span>(x);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="10-判断"><a href="#10-判断" class="headerlink" title="10: 判断"></a>10: 判断</h3><p><strong>与java中一致</strong></p><h3 id="11-函数"><a href="#11-函数" class="headerlink" title="11: 函数"></a>11: 函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">// 局部变量声明</span><br>   <span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br>   <span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br>   <span class="hljs-type">int</span> ret;<br> <br>   <span class="hljs-comment">// 调用函数来获取最大值</span><br>   ret = <span class="hljs-built_in">max</span>(a, b);<br> <br>   cout &lt;&lt; <span class="hljs-string">&quot;Max value is : &quot;</span> &lt;&lt; ret &lt;&lt; endl;<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">// 函数定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> </span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">// 局部变量声明</span><br>   <span class="hljs-type">int</span> result;<br> <br>   <span class="hljs-keyword">if</span> (num1 &gt; num2)<br>      result = num1;<br>   <span class="hljs-keyword">else</span><br>      result = num2;<br> <br>   <span class="hljs-keyword">return</span> result; <br>&#125;<br><br><span class="hljs-comment">// 函数参数默认值，当您定义一个函数，您可以为参数列表中后边的每一个参数指定默认值。当调用函数时，如果实际参数的值留空，则使用这个默认值。</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2 = <span class="hljs-number">20</span>)</span> </span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>lambda函数表达式</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[capture]<span class="hljs-function"><span class="hljs-params">(parameters)</span>-&gt;</span><span class="hljs-keyword">return</span>-type&#123;body&#125;<br>  返回值      参数        返回值类型 函数体<br>  <br>[]<span class="hljs-function"><span class="hljs-params">(int num1, int num2)</span> -&gt;</span> int(<span class="hljs-keyword">return</span> num1 &gt; num2 ？ num1 : num2)<br><br></code></pre></td></tr></table></figure><h3 id="12-数组"><a href="#12-数组" class="headerlink" title="12: 数组"></a>12: 数组</h3><p><strong>与java中操作一致</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p[<span class="hljs-number">4</span>] <span class="hljs-comment">//定义指针数组，其中四个元素都是指针</span><br><br><span class="hljs-type">int</span> *(p[<span class="hljs-number">4</span>]) <span class="hljs-comment">//定义数组指针</span><br></code></pre></td></tr></table></figure><h3 id="13：字符串"><a href="#13：字符串" class="headerlink" title="13：字符串"></a>13：字符串</h3><p>c++中可以和c中一样使用字符数组来表示字符串,并使用cstring文件中的函数实现与c中一样的操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">char</span> str[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;test string&quot;</span><br><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;test string&quot;</span><br><span class="hljs-comment">// strcpy(s1,s2),strcat(s1,s2),...与c中类似</span><br><br><br></code></pre></td></tr></table></figure><p>但是<strong>c++中有自己的string类</strong>，引入#include即可使用</p><p><strong>具体操作与java中类似</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>string str = <span class="hljs-string">&quot;abc&quot;</span>;<br>string str1 = <span class="hljs-string">&quot;def&quot;</span>;<br>string str2 = str + str1;<br><span class="hljs-type">int</span> size = str2.<span class="hljs-built_in">length</span>();<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="14：指针"><a href="#14：指针" class="headerlink" title="14：指针"></a>14：指针</h3><p> <strong>1：空指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span>  *ptr = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//打印ptr为0</span><br><br><span class="hljs-keyword">if</span>(ptr)     <span class="hljs-comment">// 如果 ptr 非空</span><br><span class="hljs-keyword">if</span>(!ptr)    <span class="hljs-comment">// 如果 ptr 为空</span><br><br></code></pre></td></tr></table></figure><p> <strong>2：指针运算</strong></p><p> 在连续的的内存地址中，指针可根据数据类型的字节数进行++，–运算，指针之间也 可以进行比较大小计算等</p><p> <strong>3：指针数组</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> *ptr[MAX];<br><span class="hljs-comment">// 在这里，把 ptr 声明为一个数组，由 MAX 个整数指针组成。因此，ptr 中的每个元素，都是一个指向 int 值的指针。下面的实例用到了三个整数，它们将存储在一个指针数组中，如下所示：</span><br><br><br></code></pre></td></tr></table></figure><p> <strong>4: 函数返回指针</strong></p><p> <strong>C++ 不支持在函数外返回局部变量的地址，除非定义局部变量为 static变量</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> *<span class="hljs-title">getRandArr</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-type">static</span> <span class="hljs-type">int</span> r[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>                r[i] = <span class="hljs-built_in">rand</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-type">int</span> *p;<br>        p = <span class="hljs-built_in">getRandArr</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;个元素值 = &quot;</span> &lt;&lt; *(p + i);<br>        &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="15：引用"><a href="#15：引用" class="headerlink" title="15：引用"></a>15：引用</h3><p> <strong>1：引用 vs 指针</strong></p><p> 不存在空引用。引用必须连接到一块合法的内存。</p><p> 一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向 到另一个对象。</p><p> 引用必须在创建时被初始化。指针可以在任何时间被初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">// 声明简单的变量</span><br>   <span class="hljs-type">int</span>    i;<br>   <span class="hljs-type">double</span> d;<br> <br>   <span class="hljs-comment">// 声明引用变量</span><br>   <span class="hljs-type">int</span>&amp;    r = i;<br>   <span class="hljs-type">double</span>&amp; s = d;<br>   <br>   i = <span class="hljs-number">5</span>;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Value of i : &quot;</span> &lt;&lt; i &lt;&lt; endl;  <span class="hljs-comment">// 5</span><br>   cout &lt;&lt; <span class="hljs-string">&quot;Value of i reference : &quot;</span> &lt;&lt; r  &lt;&lt; endl;  <span class="hljs-comment">// 5</span><br> <br>   d = <span class="hljs-number">11.7</span>;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Value of d : &quot;</span> &lt;&lt; d &lt;&lt; endl; <span class="hljs-comment">// 11.7</span><br>   cout &lt;&lt; <span class="hljs-string">&quot;Value of d reference : &quot;</span> &lt;&lt; s  &lt;&lt; endl; <span class="hljs-comment">// 11.7</span><br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>2：引用做参数</strong></p><p> 引用传参相较于指针传参更安全，引用没有空绑定，必须有一块合法的内存，但是指针可能存在空指针，野指针等问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; x, <span class="hljs-type">int</span>&amp; y)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">// 局部变量声明</span><br>   <span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br>   <span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br> <br>   cout &lt;&lt; <span class="hljs-string">&quot;交换前，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;交换前，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br> <br>   <span class="hljs-comment">/* 调用函数来交换值 */</span><br>   <span class="hljs-built_in">swap</span>(a, b);<br> <br>   cout &lt;&lt; <span class="hljs-string">&quot;交换后，a 的值：&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>   cout &lt;&lt; <span class="hljs-string">&quot;交换后，b 的值：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">// 函数定义</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; x, <span class="hljs-type">int</span>&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> temp;<br>   temp = x; <span class="hljs-comment">/* 保存地址 x 的值 */</span><br>   x = y;    <span class="hljs-comment">/* 把 y 赋值给 x */</span><br>   y = temp; <span class="hljs-comment">/* 把 x 赋值给 y  */</span><br>  <br>   <span class="hljs-keyword">return</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>3：引用做返回值</strong></p><p> 通过使用引用来替代指针，会使 C++ 程序更容易阅读和维护。C++ 函数可以返回 一个引用，方式与返回一个指针类似。</p><p> 当<strong>函数返回一个引用时，则返回一个指向返回值的隐式指针。这样，函数就可以放 在赋值语句的左边</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">double</span> vals[] = &#123;<span class="hljs-number">10.1</span>, <span class="hljs-number">12.6</span>, <span class="hljs-number">33.1</span>, <span class="hljs-number">24.1</span>, <span class="hljs-number">50.0</span>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">double</span>&amp; <span class="hljs-title">setValues</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;  <br>   <span class="hljs-type">double</span>&amp; ref = vals[i];    <br>   <span class="hljs-keyword">return</span> ref;   <span class="hljs-comment">// 返回第 i 个元素的引用，ref 是一个引用变量，ref 引用 vals[i]</span><br> <br> <br>&#125;<br> <br><span class="hljs-comment">// 要调用上面定义函数的主函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <br>   cout &lt;&lt; <span class="hljs-string">&quot;改变前的值&quot;</span> &lt;&lt; endl;<br>   <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ )<br>   &#123;<br>       cout &lt;&lt; <span class="hljs-string">&quot;vals[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span>;<br>       cout &lt;&lt; vals[i] &lt;&lt; endl;<br>   &#125;<br> <br>   <span class="hljs-built_in">setValues</span>(<span class="hljs-number">1</span>) = <span class="hljs-number">20.23</span>; <span class="hljs-comment">// 改变第 2 个元素</span><br>   <span class="hljs-built_in">setValues</span>(<span class="hljs-number">3</span>) = <span class="hljs-number">70.8</span>;  <span class="hljs-comment">// 改变第 4 个元素</span><br> <br>   cout &lt;&lt; <span class="hljs-string">&quot;改变后的值&quot;</span> &lt;&lt; endl;<br>   <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ )<br>   &#123;<br>       cout &lt;&lt; <span class="hljs-string">&quot;vals[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span>;<br>       cout &lt;&lt; vals[i] &lt;&lt; endl;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="16：时间和日期"><a href="#16：时间和日期" class="headerlink" title="16：时间和日期"></a>16：时间和日期</h3><p> C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 头文件。</p><p> 有四个与时间相关的类型：<strong>clock_t、time_t、size_t</strong> 和 <strong>tm</strong>。类型 clock_t、size_t 和 time_t 能够把系统时间和日期表示为某种整数。</p><p> 结构类型 <strong>tm</strong> 把日期和时间以 C 结构的形式保存，tm 结构的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> &#123;</span>  <br>        <span class="hljs-type">int</span> tm_sec;   <span class="hljs-comment">// 秒，正常范围从 0 到 59，但允许至 61  </span><br>        <span class="hljs-type">int</span> tm_min;   <span class="hljs-comment">// 分，范围从 0 到 59  </span><br>        <span class="hljs-type">int</span> tm_hour;  <span class="hljs-comment">// 小时，范围从 0 到 23  </span><br>        <span class="hljs-type">int</span> tm_mday;  <span class="hljs-comment">// 一月中的第几天，范围从 1 到 31  </span><br>        <span class="hljs-type">int</span> tm_mon;   <span class="hljs-comment">// 月，范围从 0 到 11  </span><br>        <span class="hljs-type">int</span> tm_year;  <span class="hljs-comment">// 自 1900 年起的年数  </span><br>        <span class="hljs-type">int</span> tm_wday;  <span class="hljs-comment">// 一周中的第几天，范围从 0 到 6，从星期日算起  </span><br>        <span class="hljs-type">int</span> tm_yday;  <span class="hljs-comment">// 一年中的第几天，范围从 0 到 365，从 1 月 1 日算起  </span><br>        <span class="hljs-type">int</span> tm_isdst; <span class="hljs-comment">// 夏令时</span><br>&#125;;<br><br><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">函数描述</th></tr></thead><tbody><tr><td align="left">**time_t time(time_t *time);**该函数返回系统的当前日历时间，自 1970 年 1 月 1 日以来经过的秒数。如果系统没时间，则返回 -1。</td></tr><tr><td align="left">**char *ctime(const time_t *time);**该返回一个表示当地时间的字符串指针，字符串形式 <em>day month year hours:minutes:seconds year\n\0</em>。</td></tr><tr><td align="left">**struct tm *localtime(const time_t *time)**该函数返回一个指向表示本地时间的 <strong>tm</strong> 结构的指针。</td></tr><tr><td align="left"><strong>clock_t clock(void)</strong> 该函数返回程序执行起（一般为程序的开头），处理器时钟所使用的时间。如果时间不可用，则返回 -1。</td></tr><tr><td align="left">**char * asctime ( const struct tm * time )**该函数返回一个指向字符串的指针，字符串包含了 time 所指向结构中存储的信息，返回形式为：day month date hours:minutes:seconds year\n\0。</td></tr><tr><td align="left"><strong>struct tm *gmtime(const time_t *time)</strong>;该函数返回一个指向 time 的指针，time 为 tm 结构，用协调世界时（UTC）也被称为格林尼治标准时间（GMT）表示。</td></tr><tr><td align="left">**time_t mktime(struct tm *time)**该函数返回日历时间，相当于 time 所指向结构中存储的时间。</td></tr><tr><td align="left">**double difftime ( time_t time2, time_t time1 )**该函数返回 time1 和 time2 之间相差的秒数。</td></tr><tr><td align="left">**size_t strftime()**该函数可用于格式化日期和时间为指定的格式。</td></tr></tbody></table><p><strong>格式化时间</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">string  <span class="hljs-title">Get_Current_Date</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 将当前日期以 20** - ** - ** 格式输出</span><br>    cout &lt;&lt; <span class="hljs-built_in">Get_Current_Date</span>().<span class="hljs-built_in">c_str</span>() &lt;&lt; endl;<br><br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">string  <span class="hljs-title">Get_Current_Date</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">time_t</span> nowtime;  <br>    nowtime = <span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>); <span class="hljs-comment">//获取日历时间   </span><br>    <span class="hljs-type">char</span> tmp[<span class="hljs-number">64</span>];   <br>    <span class="hljs-built_in">strftime</span>(tmp,<span class="hljs-built_in">sizeof</span>(tmp),<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,<span class="hljs-built_in">localtime</span>(&amp;nowtime));   <br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="17：标准输入输出"><a href="#17：标准输入输出" class="headerlink" title="17：标准输入输出"></a>17：标准输入输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br> <br>   cout &lt;&lt; <span class="hljs-string">&quot;请输入您的名称： &quot;</span>;<br>   cin &gt;&gt; name;<br>   cout &lt;&lt; <span class="hljs-string">&quot;您的名称是： &quot;</span> &lt;&lt; name &lt;&lt; endl;<br> <br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>标准错误流（cerr）</strong></p><p> 预定义的对象 <strong>cerr</strong> 是 <strong>iostream</strong> 类的一个实例。cerr 对象附属到标准输出设备，通 常也是显示屏，但是 <strong>cerr</strong> 对象是非缓冲的，且每个流插入到 cerr 都会立即输出。</p><p> <strong>cerr</strong> 也是与流插入运算符 &lt;&lt; 结合使用的，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span>&#123;   <br><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;Unable to read....&quot;</span>;    <br>cerr &lt;&lt; <span class="hljs-string">&quot;Error message : &quot;</span> &lt;&lt; str &lt;&lt; endl; <br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error </span>message : Unable to read....<br></code></pre></td></tr></table></figure><p><strong>标准日志流（clog）</strong></p><p> 预定义的对象 <strong>clog</strong> 是 <strong>iostream</strong> 类的一个实例。clog 对象附属到标准输出设备，通 常也是显示屏，但是 <strong>clog</strong> 对象是缓冲的。这意味着每个流插入到 clog 都会先存储在缓冲 区，直到缓冲填满或者缓冲区刷新时才会输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;Unable to read....&quot;</span>;<br> <br>   clog &lt;&lt; <span class="hljs-string">&quot;Error message : &quot;</span> &lt;&lt; str &lt;&lt; endl;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="18：类与对象"><a href="#18：类与对象" class="headerlink" title="18：类与对象"></a>18：类与对象</h3><p> <strong>1：类与对象</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&#123;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-type">double</span> length;<br>      <span class="hljs-type">double</span> width;<br>      <span class="hljs-comment">//类的外部定义成员函数时，需在类内部声明</span><br>      <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span></span><br><span class="hljs-function">      <span class="hljs-comment">//内部成员函数定义</span></span><br><span class="hljs-function">      <span class="hljs-type">double</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>            ...<br>      &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span></span>&#123;<br>            ...<br>      &#125;<br>&#125;<br><span class="hljs-comment">//建议使用外部定义的，内部声明的方式，可以增加类的可读性，并将声明和定义实现分离</span><br><span class="hljs-comment">//外部成员函数定义</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Box::set</span><span class="hljs-params">(<span class="hljs-type">double</span> length, <span class="hljs-type">double</span> width)</span></span>&#123;<br>            ...<br>&#125;<br><br><span class="hljs-comment">//对象创建及类成员的访问</span><br>Box myBox; <span class="hljs-comment">//对象创建</span><br><span class="hljs-comment">//成员访问</span><br>myBox.<span class="hljs-built_in">get</span>();<br>myBox.length;<br><br><br></code></pre></td></tr></table></figure><p> <strong>2：访问权限修饰符</strong></p><p> public private protected用法与java中类似，但在c++中默认为成员为private且没有 default</p><p> protected与private的区别是protected在子类中也可以访问</p><p> 有public, protected, private三种继承方式，它们相应地改变了基类成员的访问属 性。</p><p> <strong>public 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类 中分别变成：public, protected, private</p><p> <strong>protected 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派 生类中分别变成：protected, protected, private</p><p> <strong>private 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类 中分别变成：private, private, private</p><p> <strong>3：成员函数和析构函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//类的构造函数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//构造函数声明</span><br>    <span class="hljs-built_in">People</span>();<br>    <span class="hljs-comment">//带参数的构造函数声明</span><br>    <span class="hljs-built_in">People</span>(<span class="hljs-type">double</span> height)<br>&#125;<br>People::<span class="hljs-built_in">People</span>(<span class="hljs-type">void</span>)&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;对象初始化&quot;</span>；<br>&#125;<br>People::<span class="hljs-built_in">People</span>(<span class="hljs-type">double</span> height)&#123;<br>    <span class="hljs-keyword">this</span>.height = height;<br>&#125;<br><br><span class="hljs-comment">//使用初始化列表来初始化字段</span><br><span class="hljs-comment">//假设有一个类 C，具有多个字段 X、Y、Z 等需要进行初始化，同理地，您可以使用上面的语法，只需要在不同的字段使用逗号进行分隔，如下所示：</span><br>C::<span class="hljs-built_in">C</span>(<span class="hljs-type">int</span> X, <span class="hljs-type">int</span> Y, <span class="hljs-type">int</span> Z):<span class="hljs-built_in">X</span>(a),<span class="hljs-built_in">Y</span>(b),<span class="hljs-built_in">Z</span>(c)&#123;<br> ...   <br>&#125;<br><span class="hljs-comment">//如上代码等同于</span><br>C::<span class="hljs-built_in">C</span>(<span class="hljs-type">int</span> X, <span class="hljs-type">int</span> Y, <span class="hljs-type">int</span> Z)&#123;<br>    X = a;<br>    Y = b;<br>    Z = c;<br>    ...<br>&#125;<br><br><br><span class="hljs-comment">//类的析构函数</span><br><span class="hljs-comment">//在删除对象时执行析构函数，且其不会有任何参数和返回值</span><br><span class="hljs-comment">//类的构造函数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//析构函数声明</span><br>    ~<span class="hljs-built_in">People</span>();<br>    <br>&#125;<br><span class="hljs-comment">//析构函数定义</span><br>People::~<span class="hljs-built_in">People</span>(<span class="hljs-type">void</span>)&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;对象销毁&quot;</span>；<br><br><br><br></code></pre></td></tr></table></figure><p> <strong>3：友元函数</strong></p><p> 提供了不同类成员函数之间，类的成员函数和普通函数之间的数据交互范文的机制</p><p>为其他地方访问类的私有化成员的<strong>开了个小孔窥探类的内部</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span><br>&#123;<br>   <span class="hljs-type">double</span> width;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//友元函数声明</span><br>   <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">printWidth</span><span class="hljs-params">( Box box )</span></span>;<br>    <br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setWidth</span><span class="hljs-params">( <span class="hljs-type">double</span> wid )</span></span>;<br>&#125;;<br> <br><span class="hljs-comment">// 成员函数定义</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Box::setWidth</span><span class="hljs-params">( <span class="hljs-type">double</span> wid )</span></span><br><span class="hljs-function"></span>&#123;<br>    width = wid;<br>&#125;<br> <br><span class="hljs-comment">// 请注意：printWidth() 不是任何类的成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printWidth</span><span class="hljs-params">( Box box )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">/* 因为 printWidth() 是 Box 的友元，它可以直接访问该类的任何成员 */</span><br>   cout &lt;&lt; <span class="hljs-string">&quot;Width of box : &quot;</span> &lt;&lt; box.width &lt;&lt;endl;<br>&#125;<br> <br><span class="hljs-comment">// 程序的主函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   Box box;<br> <br>   <span class="hljs-comment">// 使用成员函数设置宽度</span><br>   box.<span class="hljs-built_in">setWidth</span>(<span class="hljs-number">10.0</span>);<br>   <br>   <span class="hljs-comment">// 使用友元函数输出宽度</span><br>   <span class="hljs-built_in">printWidth</span>( box );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//当然还有友元类，使用方式大同小异</span><br><br><br></code></pre></td></tr></table></figure><p> <strong>3：内联函数</strong></p><p> 使用inline关键字修饰的函数即为内联函数，它与普通函数的区别在于，不需要编 译器解析为函数调用指令，只是简单的讲<strong>函数体替换</strong>到使用内联函数的地方，可以提升 效率</p><p> 有了内联函数，就能像调用一个函数那样方便地重复使用一段代码，而不需要付出 执行函数调用的额外开销。很显然，使用内联函数会使最终可执行程序的体积增加。以 时间换取空间，或增加空间消耗来节省时间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><span class="hljs-type">int</span> main（）&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">30</span>;<br>    cout &lt;&lt; <span class="hljs-built_in">max</span>(a,b); <span class="hljs-comment">//等价于 cout &lt;&lt; a &gt; b ? a : b</span><br>    cout &lt;&lt; <span class="hljs-built_in">max</span>(b,c);<br>    cout &lt;&lt; <span class="hljs-built_in">max</span>(a,c);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>4：this指针</strong></p><p> 与java中this使用方式类似，只当前对象的内存地址，可以直接访问当前对象的成 员，但是<strong>友元函数没有this指针</strong></p><p> 所以友元函数操作类的对象成员时‘</p><p> 访问非static成员时，需要对象做参数；</p><p> 要访问static成员或全局变量时，则不需要对象做参数；</p><p> 如果做参数的对象是全局对象，则不需要对象做参数.</p><p> 外部可以直接调用友元函数，不需要通过对象或指针</p><p> <strong>5：类的指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br><span class="hljs-type">double</span> width;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>            <span class="hljs-keyword">return</span> width;<br>        &#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">set</span><span class="hljs-params">(width)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.width = width;<br>        &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    People p1;<br>    People *p<br>    p = &amp;p1<br>    <span class="hljs-comment">//指针使用 -&gt; 操作类的对象的成员</span><br>    p-&gt;<span class="hljs-built_in">set</span>(<span class="hljs-number">10.0</span>);<br>    cout &lt;&lt; p-&gt;<span class="hljs-built_in">get</span>();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>6：类的静态成员</strong></p><p> 静态成员只会初始化一次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">static</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//静态成员</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//静态函数</span><br><br><span class="hljs-comment">//调用</span><br>类名::age<br>类名::<span class="hljs-built_in">get</span>()<br><br><br></code></pre></td></tr></table></figure><h3 id="19：继承"><a href="#19：继承" class="headerlink" title="19：继承"></a>19：继承</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// eat() 函数</span><br>    <span class="hljs-comment">// sleep() 函数</span><br>&#125;;<br><br><br><span class="hljs-comment">//派生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> : <span class="hljs-keyword">public</span> Animal &#123;<br>    <span class="hljs-comment">// bark() 函数</span><br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">derived</span>-<span class="hljs-keyword">class</span>: access-specifier base-<span class="hljs-keyword">class</span><br><span class="hljs-title class_">class</span>  派生类名 ：访问修饰符 ： 基类<br><span class="hljs-comment">//访问修饰符默认是private</span><br><span class="hljs-comment">//派生类可以访问基类中所有的非private成员</span><br><br><br><br></code></pre></td></tr></table></figure><p> <strong>public 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类 中分别变成：public, protected, private</p><p> <strong>protected 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派 生类中分别变成：protected, protected, private</p><p> <strong>private 继承：</strong>基类 public 成员，protected 成员，private 成员的访问属性在派生类 中分别变成：private, private, private</p><p> <strong>通常使用public继承，避免派生类中的成员访问权限被修改</strong></p><p> <strong>1：多继承</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//继承的基类之江使用都好隔开</span><br><span class="hljs-keyword">class</span> &lt;派生类名&gt;:&lt;继承方式<span class="hljs-number">1</span>&gt;&lt;基类名<span class="hljs-number">1</span>&gt;,&lt;继承方式<span class="hljs-number">2</span>&gt;&lt;基类名<span class="hljs-number">2</span>&gt;,…<br>&#123;<br>&lt;派生类类体&gt;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">one</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">two</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">three</span> : <span class="hljs-keyword">public</span> one, <span class="hljs-keyword">public</span> two&#123;<br>    <br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="20：函数和运算符重载"><a href="#20：函数和运算符重载" class="headerlink" title="20：函数和运算符重载"></a>20：函数和运算符重载</h3><p><strong>1：函数重载</strong></p><p> 与java中一致，同一个类中同名方法不同的参数列表和返回值方法间构成重载</p><p><strong>2：运算符重载</strong></p><p> 将 + - * &#x2F; % 等运算符进行重载，定义其具体功能，如+ ，可以将两个对象的成员相加等操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//成员函数</span><br>Box <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Box&amp;);<br><span class="hljs-comment">//非成员函数</span><br>Box <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Box1&amp;, <span class="hljs-type">const</span> Box2&amp;)<br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-type">int</span> c;<br>    <br>    Box <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Box&amp; b)&#123;<br>        Box box;<br>        box.a = <span class="hljs-keyword">this</span>-&gt;a + b.a<br>        box.b = <span class="hljs-keyword">this</span>-&gt;b + b.b<br>        box.c = <span class="hljs-keyword">this</span>-&gt;c + b.c<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-built_in">getResult</span>()&#123;<br>        <span class="hljs-keyword">return</span> a + b +c;<br>    &#125;<br>&#125;；<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Box a;<br>    Box b;<br>    a.a = <span class="hljs-number">1</span>;<br>    a.b = <span class="hljs-number">2</span>;<br>    a.c = <span class="hljs-number">3</span>;<br>    <br>    b.a = <span class="hljs-number">1</span>;<br>    b.b = <span class="hljs-number">2</span>;<br>    b.c = <span class="hljs-number">3</span>;<br>    <br>    Box c;<br>    <br>    c = a + b;<br>    <br>    cout &lt;&lt; c.<span class="hljs-built_in">getResult</span>();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="21：多态"><a href="#21：多态" class="headerlink" title="21：多态"></a>21：多态</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span>: <br><span class="hljs-built_in">Shape</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">this</span>-&gt;a = a;<br><span class="hljs-keyword">this</span>-&gt;b = b;<br>&#125;<br>    <span class="hljs-comment">//不使用virtual关键字， area() 被编译器设置为基类中的版本，这就是所谓的静态多态，或静态链接 - 函数调用在程序执行前就准备好了。有时候这也被称为早绑定，因为 area() 函数在程序编译期间就已经设置好了</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Shape area&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Three</span> : <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Three</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>) : <span class="hljs-built_in">Shape</span>(a,b)&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Three area&quot;</span>;<br><span class="hljs-keyword">return</span> a * b / <span class="hljs-number">2</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Four</span> : <span class="hljs-keyword">public</span> Shape&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Four</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>) : <span class="hljs-built_in">Shape</span>(a,b)&#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Four area&quot;</span>;<br><span class="hljs-keyword">return</span> a * b;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Shape *shape;<br><span class="hljs-function">Three <span class="hljs-title">t</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-function">Four <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-comment">//使用virual关键字后看的是指针的内容，而不是其类型</span><br>shape = &amp;t;<br><br><span class="hljs-type">int</span> res = shape-&gt;<span class="hljs-built_in">area</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;面积为：&quot;</span> &lt;&lt; res;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>1：虚函数</strong></p><p> 基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数 时，会告诉编译器不要静态链接到该函数。为了实现c++的多态性</p><p> 我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操 作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong></p><p> 列子如上所示</p><p> <strong>2：纯虚函数</strong>（类似jdk8之后的接口，可以做默认实现）</p><p> 在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在 基类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>   <span class="hljs-keyword">protected</span>:<br>      <span class="hljs-type">int</span> width, height;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-built_in">Shape</span>( <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, <span class="hljs-type">int</span> b=<span class="hljs-number">0</span>)<br>      &#123;<br>         width = a;<br>         height = b;<br>      &#125;<br>      <span class="hljs-comment">// pure virtual function</span><br>      <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//相较与虚函数没有函数体</span><br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h3 id="22：接口-抽象类"><a href="#22：接口-抽象类" class="headerlink" title="22：接口(抽象类)"></a>22：接口(抽象类)</h3><p> 如果类中<strong>至少有一个函数被声明为纯虚函数，则这个类就是抽象类</strong>。纯虚函数是通过 在声明中使用 “&#x3D; 0” 来指定的</p><p> <strong>c++中的接口是通过抽象类来实现的</strong>，其特性和java中的抽象类类似，且c++可以多继承</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span><br>&#123;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-comment">// 纯虚函数</span><br>      <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">double</span> <span class="hljs-title">getVolume</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">private</span>:<br>      <span class="hljs-type">double</span> length;      <span class="hljs-comment">// 长度</span><br>      <span class="hljs-type">double</span> breadth;     <span class="hljs-comment">// 宽度</span><br>      <span class="hljs-type">double</span> height;      <span class="hljs-comment">// 高度</span><br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h3 id="23：文件和流"><a href="#23：文件和流" class="headerlink" title="23：文件和流"></a>23：文件和流</h3><p> 要在 C++ 中进行文件处理，必须在 C++ 源代码文件中包含头文件 和</p><table><thead><tr><th align="left">数据类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ofstream</td><td align="left">该数据类型表示输出文件流，用于创建文件并向文件写入信息。</td></tr><tr><td align="left">ifstream</td><td align="left">该数据类型表示输入文件流，用于从文件读取信息。</td></tr><tr><td align="left">fstream</td><td align="left">该数据类型通常表示文件流，且同时具有 ofstream 和 ifstream 两种功能，这意味着它可以创建文件，向文件写入信息，从文件读取信息。</td></tr></tbody></table><p> <strong>1：打开文件</strong></p><p> 该函数为以上三个对象的成员函数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, ios::openmode mode)</span></span>;<br><br></code></pre></td></tr></table></figure><p> 在这里，<strong>open()</strong> 成员函数的第一参数指定要打开的文件的名称和位置，第二个参数 定义文件被打开的模式。</p><table><thead><tr><th align="left">模式标志</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ios::app</td><td align="left">追加模式。所有写入都追加到文件末尾。</td></tr><tr><td align="left">ios::ate</td><td align="left">文件打开后定位到文件末尾。</td></tr><tr><td align="left">ios::in</td><td align="left">打开文件用于读取。</td></tr><tr><td align="left">ios::out</td><td align="left">打开文件用于写入。</td></tr><tr><td align="left">ios::trunc</td><td align="left">如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。</td></tr></tbody></table><p> 您可以把以上两种或两种以上的模式结合使用。例如，如果您想要以写入模式打开 文件，并希望截断文件，以防文件已存在，那么您可以使用下面的语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">ofstream outfile;<br>outfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.dat&quot;</span>, ios::out | ios::trunc );<br><br></code></pre></td></tr></table></figure><p> 如果想要打开一个文件用于读写，可以使用下面的语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">ifstream  afile;<br>afile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.dat&quot;</span>, ios::out | ios::in );<br><br><br></code></pre></td></tr></table></figure><p> <strong>2：关闭文件</strong></p><p> close() 函数是 fstream、ifstream 和 ofstream 对象的一个成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><br></code></pre></td></tr></table></figure><p> <strong>3：写入和读取文件</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-type">char</span> data[<span class="hljs-number">100</span>];<br>    <span class="hljs-comment">//写入文件</span><br>    ofstream outfile;<br>    outfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./a.txt&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入写入内容&quot;</span>;<br>    cin.<span class="hljs-built_in">getline</span>(data,<span class="hljs-number">100</span>);<br>    outfile &lt;&lt; data &lt;&lt; endl;<br><br>    outfile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-comment">//读取文件</span><br>    ifstream infile;<br>    infile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./a.txt&quot;</span>);<br>    infile &gt;&gt; data;<br>    cout &lt;&lt; data;<br>    infile.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>3：文件位置指针</strong></p><p> <strong>istream</strong> 和 <strong>ostream</strong> 都提供了用于重新定位文件位置指针的成员函数,istream 的 <strong>seekg</strong>（”seek get”）和关于 ostream 的 <strong>seekp</strong>（”seek put”）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 定位到 fileObject 的第 n 个字节（假设是 ios::beg）</span><br>fileObject.<span class="hljs-built_in">seekg</span>( n );<br> <br><span class="hljs-comment">// 把文件的读指针从 fileObject 当前位置向后移 n 个字节</span><br>fileObject.<span class="hljs-built_in">seekg</span>( n, ios::cur );<br> <br><span class="hljs-comment">// 把文件的读指针从 fileObject 末尾往回移 n 个字节</span><br>fileObject.<span class="hljs-built_in">seekg</span>( n, ios::end );<br> <br><span class="hljs-comment">// 定位到 fileObject 的末尾</span><br>fileObject.<span class="hljs-built_in">seekg</span>( <span class="hljs-number">0</span>, ios::end );<br><br></code></pre></td></tr></table></figure><h3 id="24：异常处理"><a href="#24：异常处理" class="headerlink" title="24：异常处理"></a>24：异常处理</h3><p> <strong>1：捕获异常</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//捕获指定为ExceptionName的异常</span><br><span class="hljs-keyword">try</span><br>&#123;<br>   <span class="hljs-comment">// 保护代码</span><br>&#125;<span class="hljs-built_in">catch</span>( ExceptionName e1 )<br>&#123;<br>   <span class="hljs-comment">// catch 块</span><br>&#125;<span class="hljs-built_in">catch</span>( ExceptionName e2 )<br>&#123;<br>   <span class="hljs-comment">// catch 块</span><br>&#125;<span class="hljs-built_in">catch</span>( ExceptionName eN )<br>&#123;<br>   <span class="hljs-comment">// catch 块</span><br>&#125;<br><br><span class="hljs-comment">//捕获任意类型的异常</span><br><span class="hljs-keyword">try</span><br>&#123;<br>   <span class="hljs-comment">// 保护代码</span><br>&#125;<span class="hljs-built_in">catch</span>(...)<br>&#123;<br>  <span class="hljs-comment">// 能处理任何异常的代码</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p> <strong>2：抛出异常</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">division</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>( b == <span class="hljs-number">0</span> )<br>   &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;Division by zero condition!&quot;</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> (a/b);<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <strong>3：自定义异常</strong></p><p> 继承exception类定义异常</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> : <span class="hljs-keyword">public</span> exception&#123;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-title">what</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-title">throw</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;c++ exception&quot;</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">try</span>&#123;<br>   <span class="hljs-keyword">throw</span> <span class="hljs-built_in">MyException</span>();<br>   &#125;<span class="hljs-built_in">catch</span>(MyException&amp; e)&#123;<br>   cout &lt;&lt; <span class="hljs-string">&quot;捕获到异常MyException&quot;</span> &lt;&lt; e.<span class="hljs-built_in">what</span>();<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> const throw() 不是函数，这个东西叫异常规格说明，表示 what 函数可以抛出异常的 类型，类型说明放到 () 里，这里面没有类型，就是声明这个函数不抛出异常，通常函数不 写后面的 throw() 就表示函数可以抛出任何类型的异常。</p><p><strong>异常规格说明</strong></p><p> 异常规格说明的目的是为了让函数使用者知道该函数可能抛出的异常有哪些。 可以在 函数的声明中列出这个函数可能抛掷的所有异常类型。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> <span class="hljs-title">throw</span><span class="hljs-params">(A，B，C，D)</span></span>;<br><br></code></pre></td></tr></table></figure><h3 id="25：动态内存"><a href="#25：动态内存" class="headerlink" title="25：动态内存"></a>25：动态内存</h3><p> C++ 程序中的内存分为两个部分：</p><ul><li><p><strong>栈：</strong>在函数内部声明的所有变量都将占用栈内存。</p></li><li><p><strong>堆：</strong>这是程序中未使用的内存，在程序运行时可用于动态分配内存。</p><p><strong>1：new和delete运算符</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// new</span><br><span class="hljs-keyword">new</span> data-type<br><span class="hljs-comment">// data-type 可以是包括数组在内的任意内置数据类型和用户自定义的结构和类类型</span><br><span class="hljs-type">double</span>* value = <span class="hljs-keyword">new</span> <span class="hljs-type">double</span>;<br><br><span class="hljs-comment">// delete</span><br><span class="hljs-keyword">delete</span> value;<br><br><br><span class="hljs-comment">//使用</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">double</span> *pvalue  = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 初始化为 null 的指针</span><br>   pvalue  = <span class="hljs-keyword">new</span> <span class="hljs-type">double</span>;   <span class="hljs-comment">// 为变量请求内存</span><br> <br>   *pvalue = <span class="hljs-number">29494.99</span>;     <span class="hljs-comment">// 在分配的地址存储值</span><br>   cout &lt;&lt; <span class="hljs-string">&quot;Value of pvalue : &quot;</span> &lt;&lt; *pvalue &lt;&lt; endl;<br> <br>   <span class="hljs-keyword">delete</span> pvalue;         <span class="hljs-comment">// 释放内存</span><br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//一维数组动态内存分配</span><br><span class="hljs-type">int</span> *a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">20</span>]<br><span class="hljs-keyword">delete</span> [] a;<br><br><span class="hljs-comment">//二维数组动态内存分配 m n为数组的大小</span><br><span class="hljs-type">int</span> **a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span> *[m];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>    a[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n]<br>&#125;<br><br><span class="hljs-comment">//delete</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>    <span class="hljs-keyword">delete</span> [] a[i];<br>&#125;<br><span class="hljs-keyword">delete</span> [] a<br>    <br><span class="hljs-comment">//多维以此类推</span><br>    <br><span class="hljs-comment">//对象内存分配</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span><br>&#123;<br>   <span class="hljs-keyword">public</span>:<br>      <span class="hljs-built_in">Box</span>() &#123; <br>         cout &lt;&lt; <span class="hljs-string">&quot;调用构造函数！&quot;</span> &lt;&lt;endl; <br>      &#125;<br>      ~<span class="hljs-built_in">Box</span>() &#123; <br>         cout &lt;&lt; <span class="hljs-string">&quot;调用析构函数！&quot;</span> &lt;&lt;endl; <br>      &#125;<br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   Box* myBoxArray = <span class="hljs-keyword">new</span> Box[<span class="hljs-number">4</span>];<br> <br>   <span class="hljs-keyword">delete</span> [] myBoxArray; <span class="hljs-comment">// 删除数组</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="26：命名空间"><a href="#26：命名空间" class="headerlink" title="26：命名空间"></a>26：命名空间</h3><p> 用于区分相同的函数名不同作用的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 命名空间的定义</span><br><span class="hljs-comment">// 第一个命名空间</span><br><span class="hljs-keyword">namespace</span> first_space&#123;<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;Inside first_space&quot;</span> &lt;&lt; endl;<br>   &#125;<br>&#125;<br><span class="hljs-comment">// 第二个命名空间</span><br><span class="hljs-keyword">namespace</span> second_space&#123;<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;Inside second_space&quot;</span> &lt;&lt; endl;<br>   &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <br>   <span class="hljs-comment">// 调用第一个命名空间中的函数</span><br>   first_space::<span class="hljs-built_in">func</span>();<br>   <br>   <span class="hljs-comment">// 调用第二个命名空间中的函数</span><br>   second_space::<span class="hljs-built_in">func</span>(); <br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <strong>1：using</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 命名空间的定义</span><br><span class="hljs-comment">// 第一个命名空间</span><br><span class="hljs-keyword">namespace</span> first_space&#123;<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;Inside first_space&quot;</span> &lt;&lt; endl;<br>   &#125;<br>&#125;<br><span class="hljs-comment">// 第二个命名空间</span><br><span class="hljs-keyword">namespace</span> second_space&#123;<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;Inside second_space&quot;</span> &lt;&lt; endl;<br>   &#125;<br>&#125;<br><span class="hljs-comment">// 使用第一个命名空间</span><br><span class="hljs-function"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> first_space</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <br>   <span class="hljs-built_in">func</span>(); <span class="hljs-comment">//输出 Inside first_space</span><br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>嵌套的命名空间</strong></p><p>命名空间可以嵌套，您可以在一个命名空间中定义另一个命名空间，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> namespace_name1 &#123;<br>   <span class="hljs-comment">// 代码声明</span><br>   <span class="hljs-keyword">namespace</span> namespace_name2 &#123;<br>      <span class="hljs-comment">// 代码声明</span><br>   &#125;c++<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>您可以通过使用 <strong>::</strong> 运算符来访问嵌套的命名空间中的成员：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 访问 namespace_name2 中的成员</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> namespace_name1::namespace_name2;<br> c++<br><span class="hljs-comment">// 访问 namespace_name1 中的成员</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> namespace_name1;<br><br><br></code></pre></td></tr></table></figure><h3 id="27：模板"><a href="#27：模板" class="headerlink" title="27：模板"></a>27：模板</h3><p> 与java中泛型类似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 形式</span><br>tempalte &lt;<span class="hljs-keyword">typename</span> type&gt; <span class="hljs-function">returnType <span class="hljs-title">funcName</span><span class="hljs-params">(paramList)</span></span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">// 示例</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-type">const</span>&amp; <span class="hljs-title">Max</span> <span class="hljs-params">(T <span class="hljs-type">const</span>&amp; a, T <span class="hljs-type">const</span>&amp; b)</span> </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">return</span> a &lt; b ? b:a; <br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">39</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">20</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Max(i, j): &quot;</span> &lt;&lt; <span class="hljs-built_in">Max</span>(i, j) &lt;&lt; endl; <br> <br>    <span class="hljs-type">double</span> f1 = <span class="hljs-number">13.5</span>; <br>    <span class="hljs-type">double</span> f2 = <span class="hljs-number">20.7</span>; <br>    cout &lt;&lt; <span class="hljs-string">&quot;Max(f1, f2): &quot;</span> &lt;&lt; <span class="hljs-built_in">Max</span>(f1, f2) &lt;&lt; endl; <br> <br>    string s1 = <span class="hljs-string">&quot;Hello&quot;</span>; <br>    string s2 = <span class="hljs-string">&quot;World&quot;</span>; <br>    cout &lt;&lt; <span class="hljs-string">&quot;Max(s1, s2): &quot;</span> &lt;&lt; <span class="hljs-built_in">Max</span>(s1, s2) &lt;&lt; endl; <br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p> <strong>类模板</strong></p><p> 正如我们定义函数模板一样，我们也可以定义类模板。泛型类声明的一般形式如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">type</span>&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">class</span>-name &#123;<br>.<br>.<br>.<br>&#125;<br><br><br><span class="hljs-comment">// 示例</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> &#123; <br>  <span class="hljs-keyword">private</span>: <br>    vector&lt;T&gt; elems;     <span class="hljs-comment">// 元素 </span><br> <br>  <span class="hljs-keyword">public</span>: <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T <span class="hljs-type">const</span>&amp;)</span></span>;  <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;               <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-function">T <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;            <span class="hljs-comment">// 返回栈顶元素</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;       <span class="hljs-comment">// 如果为空则返回真。</span><br>        <span class="hljs-keyword">return</span> elems.<span class="hljs-built_in">empty</span>(); <br>    &#125; <br>&#125;; <br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-type">void</span> Stack&lt;T&gt;::<span class="hljs-built_in">push</span> (T <span class="hljs-type">const</span>&amp; elem) <br>&#123; <br>    <span class="hljs-comment">// 追加传入元素的副本</span><br>    elems.<span class="hljs-built_in">push_back</span>(elem);    <br>&#125; <br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-type">void</span> Stack&lt;T&gt;::<span class="hljs-built_in">pop</span> () <br>&#123; <br>    <span class="hljs-keyword">if</span> (elems.<span class="hljs-built_in">empty</span>()) &#123; <br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;Stack&lt;&gt;::pop(): empty stack&quot;</span>); <br>    &#125;<br>    <span class="hljs-comment">// 删除最后一个元素</span><br>    elems.<span class="hljs-built_in">pop_back</span>();         <br>&#125; <br> <br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>T Stack&lt;T&gt;::<span class="hljs-built_in">top</span> () <span class="hljs-type">const</span> <br>&#123; <br>    <span class="hljs-keyword">if</span> (elems.<span class="hljs-built_in">empty</span>()) &#123; <br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">out_of_range</span>(<span class="hljs-string">&quot;Stack&lt;&gt;::top(): empty stack&quot;</span>); <br>    &#125;<br>    <span class="hljs-comment">// 返回最后一个元素的副本 </span><br>    <span class="hljs-keyword">return</span> elems.<span class="hljs-built_in">back</span>();      <br>&#125; <br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">try</span> &#123; <br>        Stack&lt;<span class="hljs-type">int</span>&gt;         intStack;  <span class="hljs-comment">// int 类型的栈 </span><br>        Stack&lt;string&gt; stringStack;    <span class="hljs-comment">// string 类型的栈 </span><br> <br>        <span class="hljs-comment">// 操作 int 类型的栈 </span><br>        intStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">7</span>); <br>        cout &lt;&lt; intStack.<span class="hljs-built_in">top</span>() &lt;&lt;endl; <br> <br>        <span class="hljs-comment">// 操作 string 类型的栈 </span><br>        stringStack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&quot;hello&quot;</span>); <br>        cout &lt;&lt; stringStack.<span class="hljs-built_in">top</span>() &lt;&lt; std::endl; <br>        stringStack.<span class="hljs-built_in">pop</span>(); <br>        stringStack.<span class="hljs-built_in">pop</span>(); <br>    &#125; <br>    <span class="hljs-built_in">catch</span> (exception <span class="hljs-type">const</span>&amp; ex) &#123; <br>        cerr &lt;&lt; <span class="hljs-string">&quot;Exception: &quot;</span> &lt;&lt; ex.<span class="hljs-built_in">what</span>() &lt;&lt;endl; <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125; <br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="28：预处理器"><a href="#28：预处理器" class="headerlink" title="28：预处理器"></a>28：预处理器</h3><p> <strong>预处理器是一些指令，指示编译器在实际编译之前所需完成的预处理</strong></p><p> 所有的预处理器指令都是以井号（#）开头，只有空格字符可以出现在预处理指令之前。预处理指令不是 C++ 语句，所以它们不会以分号（;）b结尾。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 以下均为预处理指令</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;...&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;...&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ...</span><br><br><br></code></pre></td></tr></table></figure><p> <strong>1：参数宏</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MIN(a,b) (a&lt;b ? a : b)</span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> i, j;<br>   i = <span class="hljs-number">100</span>;<br>   j = <span class="hljs-number">30</span>;<br>   cout &lt;&lt;<span class="hljs-string">&quot;较小的值为：&quot;</span> &lt;&lt; <span class="hljs-built_in">MIN</span>(i, j) &lt;&lt; endl;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>2：条件宏</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// #ifdef, 相反的#ifndef</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> NULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// #if 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br>不被编译的代码<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br></code></pre></td></tr></table></figure><p> <strong>3：#和##运算</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// #号会把替换的内容换位用引号引起来的字符串</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAKESTR(x) #x</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    cout &lt;&lt; <span class="hljs-built_in">MAKESTR</span>(HELLO C++); <span class="hljs-comment">// 转换为 cout &lt;&lt; &quot;HELLO C++&quot;;</span><br>&#125;<br><br><span class="hljs-comment">// ##号用于连接两个令牌</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> concat(a, b) a ## b</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> xy = <span class="hljs-number">100</span>;<br>   <br>   cout &lt;&lt; <span class="hljs-built_in">concat</span>(x, y); <span class="hljs-comment">// 转换为 cout &lt;&lt; xy;  输出变量xy的值：100</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>4：预定义宏</strong></p><table><thead><tr><th align="left">宏</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em><strong>*LINE*</strong></em></td><td align="left">这会在程序编译时包含当前行号。</td></tr><tr><td align="left"><em><strong>*FILE*</strong></em></td><td align="left">这会在程序编译时包含当前文件名。</td></tr><tr><td align="left"><em><strong>*DATE*</strong></em></td><td align="left">这会包含一个形式为 month&#x2F;day&#x2F;year 的字符串，它表示把源文件转换为目标代码的日期。</td></tr><tr><td align="left"><em><strong>*TIME*</strong></em></td><td align="left">这会包含一个形式为 hour:minute:second 的字符串，它表示程序被编译的时间。</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Value of __LINE__ : &quot;</span> &lt;&lt; __LINE__ &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Value of __FILE__ : &quot;</span> &lt;&lt; __FILE__ &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Value of __DATE__ : &quot;</span> &lt;&lt; __DATE__ &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Value of __TIME__ : &quot;</span> &lt;&lt; __TIME__ &lt;&lt; endl;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">// Value of __LINE__ : 6</span><br><span class="hljs-comment">// Value of __FILE__ : test.cpp</span><br><span class="hljs-comment">// Value of __DATE__ : Feb 28 2011</span><br><span class="hljs-comment">// Value of __TIME__ : 18:52:48</span><br><br><br></code></pre></td></tr></table></figure><h3 id="29：信号处理"><a href="#29：信号处理" class="headerlink" title="29：信号处理"></a>29：信号处理</h3><p> 信号是由操作系统传给进程的中断，会提早终止一个程序。在 UNIX、LINUX、Mac OS X 或 Windows 系统上，可以通过按 Ctrl+C 产生中断。</p><p> 有些信号不能被程序捕获，但是下表所列信号可以在程序中捕获，并可以基于信号采 取适当的动作。这些信号是定义在 C++ 头文件 中。</p><table><thead><tr><th align="left">信号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">SIGABRT</td><td align="left">程序的异常终止，如调用 <strong>abort</strong>。</td></tr><tr><td align="left">SIGFPE</td><td align="left">错误的算术运算，比如除以零或导致溢出的操作。</td></tr><tr><td align="left">SIGILL</td><td align="left">检测非法指令。</td></tr><tr><td align="left">SIGINT</td><td align="left">程序终止(interrupt)信号。</td></tr><tr><td align="left">SIGSEGV</td><td align="left">非法访问内存。</td></tr><tr><td align="left">SIGTERM</td><td align="left">发送到程序的终止请求。</td></tr></tbody></table><p> <strong>1：signal()函数</strong></p><p> C++ 信号处理库提供了 <strong>signal</strong> 函数，用来捕获突发事件</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">signal</span><span class="hljs-string"></span>(registered <span class="hljs-keyword">signal</span><span class="hljs-string"></span>, <span class="hljs-keyword">signal</span><span class="hljs-string"> handler)</span><br><br></code></pre></td></tr></table></figure><p> <strong>2：raise() 函数</strong></p><p>您可以使用函数 <strong>raise()</strong> 生成信号，该函数带有一个整数信号编号作为参数，语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">raise</span> <span class="hljs-params">(signal sig)</span></span>;<br><br>QML<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;csignal&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">signalHandler</span><span class="hljs-params">( <span class="hljs-type">int</span> signum )</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Interrupt signal (&quot;</span> &lt;&lt; signum &lt;&lt; <span class="hljs-string">&quot;) received.\n&quot;</span>;<br> <br>    <span class="hljs-comment">// 清理并关闭</span><br>    <span class="hljs-comment">// 终止程序 </span><br> <br>   <span class="hljs-built_in">exit</span>(signum);  <br> <br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 注册信号 SIGINT 和信号处理程序</span><br>    <span class="hljs-built_in">signal</span>(SIGINT, signalHandler);  <br> <br>    <span class="hljs-keyword">while</span>(++i)&#123;<br>       cout &lt;&lt; <span class="hljs-string">&quot;Going to sleep....&quot;</span> &lt;&lt; endl;<br>       <span class="hljs-keyword">if</span>( i == <span class="hljs-number">3</span> )&#123;<br>          <span class="hljs-built_in">raise</span>( SIGINT); <span class="hljs-comment">//i==3时，会自动推出程序，raise注册信号</span><br>       &#125;<br>       <span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="30：多线程"><a href="#30：多线程" class="headerlink" title="30：多线程"></a>30：多线程</h3><p> 多线程是多任务处理的一种特殊形式，多任务处理允许让电脑同时运行两个或两个以 上的程序。一般情况下，两种类型的多任务处理：<strong>基于进程和基于线程</strong>。</p><ul><li>基于进程的多任务处理是程序的并发执行。</li><li>基于线程的多任务处理是同一程序的片段的并发执行。</li></ul><p> <strong>1：创建线程</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-built_in">pthread_create</span> (thread, attr, start_routine, arg) <br><br><br></code></pre></td></tr></table></figure><p>这里，<strong>pthread_create</strong> 创建一个新的线程，并让它可执行。下面是关于参数的说明：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">thread</td><td align="left">指向线程标识符指针。</td></tr><tr><td align="left">attr</td><td align="left">一个不透明的属性对象，可以被用来设置线程属性。您可以指定线程属性对象，也可以使用默认值 NULL。</td></tr><tr><td align="left">start_routine</td><td align="left">线程运行函数起始地址，一旦线程被创建就会执行。</td></tr><tr><td align="left">arg</td><td align="left">运行函数的参数。它必须通过把引用作为指针强制转换为 void 类型进行传递。如果没有传递参数，则使用 NULL。</td></tr></tbody></table><p> <strong>2：终止线程</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-built_in">pthread_exit</span> (status) <br><br><br></code></pre></td></tr></table></figure><p> <strong>3：c++11标准</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;thread&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;World&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>  <span class="hljs-comment">//定义两个线程</span><br>  <span class="hljs-function">thread <span class="hljs-title">a</span><span class="hljs-params">([]&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">        cout &lt;&lt; <span class="hljs-string">&quot;Hello&quot;</span> &lt;&lt; flush;</span></span><br><span class="hljs-params"><span class="hljs-function">  &#125;)</span>,<span class="hljs-title">b</span><span class="hljs-params">(print)</span></span>;<br><br>  <span class="hljs-comment">//等待线程结束，并清理资源，会阻塞</span><br>  a.<span class="hljs-built_in">join</span>();<br>  b.<span class="hljs-built_in">join</span>();<br>&#125;<br><br><br><span class="hljs-comment">//编译时</span><br>g++ -std=c++<span class="hljs-number">11</span> hello.cpp -o hello -pthread<br><br><br></code></pre></td></tr></table></figure><h3 id="31：STL标准模板库"><a href="#31：STL标准模板库" class="headerlink" title="31：STL标准模板库"></a>31：STL标准模板库</h3><p> <strong>1：容器（Containers）</strong></p><p> <strong>vector向量</strong></p><p> 类似与数组，但是其大小时可变的，一般用于数组大小未知时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>  vector&lt;<span class="hljs-type">int</span>&gt; vec;<br>  cout &lt;&lt; <span class="hljs-string">&quot;vector原始大小 = &quot;</span> &lt;&lt; vec.<span class="hljs-built_in">size</span>() &lt;&lt;endl;<br>  vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//相反的是pop_back()</span><br>  vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>  vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>  cout &lt;&lt; <span class="hljs-string">&quot;添加数据后大小 = &quot;</span> &lt;&lt; vec.<span class="hljs-built_in">size</span>() &lt;&lt;endl;<br>  cout &lt;&lt; <span class="hljs-string">&quot;获取其中某个值 = &quot;</span> &lt;&lt; vec[<span class="hljs-number">2</span>] &lt;&lt;endl;<br><br>  vector&lt;<span class="hljs-type">int</span>&gt;::iterator v = vec.<span class="hljs-built_in">begin</span>();<br>  <span class="hljs-keyword">while</span>(v != vec.<span class="hljs-built_in">end</span>())&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;value = &quot;</span> &lt;&lt; *v &lt;&lt;endl;<br>    v++;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 输出结果</span><br><span class="hljs-comment">//ector原始大小 = 0</span><br><span class="hljs-comment">//添加数据后大小 = 3</span><br><span class="hljs-comment">//获取其中某个值 = 3</span><br><span class="hljs-comment">//value = 1</span><br><span class="hljs-comment">//value = 2</span><br><span class="hljs-comment">//value = 3</span><br><br><br><span class="hljs-comment">//其他函数 clear() ,insert(插入的地址，插入的值)，插入的地址通常使用 vector.begin() + i获取</span><br><br><span class="hljs-comment">//erase(删除元素的地址)</span><br><span class="hljs-comment">//erase(删除元素的起始地址，结束地址)</span><br><br><span class="hljs-comment">//vector&lt;vector&lt;int&gt;空格&gt; arr 此处空格必须加</span><br><br><br></code></pre></td></tr></table></figure><p> <strong>set</strong>&#x2F;<strong>multiset</strong></p><p> multiset和set用法基本相同，其元素既是键，也是值，但set不允许重复键值，而 multiset允许重复，他们底层数据结构都是红黑树实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++">set&lt;type&gt; arr[size]<br><br>set&lt;<span class="hljs-type">int</span>&gt;  arr[<span class="hljs-number">10</span>]<br><br><span class="hljs-comment">//访问和迭代</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; st;<br>    <span class="hljs-comment">//插入元素</span><br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">5</span>);<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">6</span>);<br>   <br>    <span class="hljs-comment">//查找元素</span><br>    set&lt;<span class="hljs-type">int</span>&gt;::iterator it = st.<span class="hljs-built_in">find</span>(<span class="hljs-number">2</span>);<br>    cout &lt;&lt; *it;<br>    <br>    cout &lt;&lt; *(st.<span class="hljs-built_in">find</span>(<span class="hljs-number">2</span>));<br>    <br>    <span class="hljs-comment">//删除指定元素</span><br>    st.<span class="hljs-built_in">erase</span>(st.<span class="hljs-built_in">find</span>(<span class="hljs-number">2</span>));<br>    <br>    <span class="hljs-comment">//size()</span><br>    <br>    <span class="hljs-comment">//遍历</span><br>    <span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::iterator it = st.<span class="hljs-built_in">begin</span>(); it != st.<span class="hljs-built_in">end</span>(); it++)<br>    &#123;<br>        cout &lt;&lt; *it &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>deque</strong></p><p> 双端队列，可以操作其两端的数据,</p><p> 底层使用一个一维数组存储着其他连续内存的地址，实际数据是存储在这些连续的 内存区域中，实现整体连续的目的，</p><p> 扩容时只需将该一维数组中的内存地址复制到更大的内存中并销毁该一维数组即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>,...&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__deque_iterator</span>&#123;<br>    ...<br>    T* cur; <span class="hljs-comment">//指向当前正在遍历的元素</span><br>    T* first;<span class="hljs-comment">//指向当前连续空间的首地址</span><br>    T* last;<span class="hljs-comment">//指向当前连续空间的末尾地址</span><br>    map_pointer node;<span class="hljs-comment">//map_pointer 等价于 T** 它是一个二级指针，用于指向存储地址   //的一维数组中存储的指向当前连续空间的指针</span><br>     <span class="hljs-comment">//当当前的指针所指向的存储区域满之后，该指针++即可指向下一片区                      //域 </span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>-</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br>deque&lt;<span class="hljs-type">int</span>&gt; deq;<br><br><span class="hljs-comment">//deq[ ]：用来访问双向队列中单个的元素。</span><br><span class="hljs-comment">//deq.front()：返回第一个元素的引用。</span><br><span class="hljs-comment">//deq.back()：返回最后一个元素的引用。</span><br><span class="hljs-comment">//deq.push_front(x)：把元素x插入到双向队列的头部。</span><br><span class="hljs-comment">//deq.pop_front()：弹出双向队列的第一个元素。</span><br><span class="hljs-comment">//deq.push_back(x)：把元素x插入到双向队列的尾部。</span><br><span class="hljs-comment">//deq.pop_back()：弹出双向队列的最后一个元素。</span><br><span class="hljs-comment">//deque&lt;int&gt;::iterator it = dep.begin();</span><br><br></code></pre></td></tr></table></figure><p> <strong>list</strong></p><p> 底层实现为双链表，与java中的LinkedList类似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br>list&lt;<span class="hljs-type">int</span>&gt; Lst1;<br><br>Lst1.<span class="hljs-built_in">assign</span>() 给list赋值 <br>Lst1.<span class="hljs-built_in">back</span>() 返回最后一个元素 <br>Lst1.<span class="hljs-built_in">begin</span>() 返回指向第一个元素的迭代器 <br>Lst1.<span class="hljs-built_in">clear</span>() 删除所有元素 <br>Lst1.<span class="hljs-built_in">empty</span>() 如果list是空的则返回<span class="hljs-literal">true</span> <br>Lst1.<span class="hljs-built_in">end</span>() 返回末尾的迭代器 <br>Lst1.<span class="hljs-built_in">erase</span>() 删除一个元素 <br>Lst1.<span class="hljs-built_in">front</span>() 返回第一个元素 <br>Lst1.<span class="hljs-built_in">get_allocator</span>() 返回list的配置器 <br>Lst1.<span class="hljs-built_in">insert</span>() 插入一个元素到list中 <br>Lst1.<span class="hljs-built_in">max_size</span>() 返回list能容纳的最大元素数量 <br>Lst1.<span class="hljs-built_in">merge</span>() 合并两个list <br>Lst1.<span class="hljs-built_in">pop_back</span>() 删除最后一个元素 <br>Lst1.<span class="hljs-built_in">pop_front</span>() 删除第一个元素 <br>Lst1.<span class="hljs-built_in">push_back</span>() 在list的末尾添加一个元素 <br>Lst1.<span class="hljs-built_in">push_front</span>() 在list的头部添加一个元素 <br>Lst1.<span class="hljs-built_in">rbegin</span>() 返回指向第一个元素的逆向迭代器 <br>Lst1.<span class="hljs-built_in">remove</span>() 从list删除元素 <br>Lst1.<span class="hljs-built_in">remove_if</span>() 按指定条件删除元素 <br>Lst1.<span class="hljs-built_in">rend</span>() 指向list末尾的逆向迭代器 <br>Lst1.<span class="hljs-built_in">resize</span>() 改变list的大小 <br>Lst1.<span class="hljs-built_in">reverse</span>() 把list的元素倒转 <br>Lst1.<span class="hljs-built_in">size</span>() 返回list中的元素个数 <br>Lst1.<span class="hljs-built_in">sort</span>() 给list排序 <br>Lst1.<span class="hljs-built_in">splice</span>() 合并两个list <br>Lst1.<span class="hljs-built_in">swap</span>() 交换两个list <br>Lst1.<span class="hljs-built_in">unique</span>() 删除list中相邻重复的元素<br><br></code></pre></td></tr></table></figure><p> <strong>map&#x2F;multimap</strong></p><p> map的键值key不可重复，而multimap可以，也正是由于这种区别，map支持[ ]运算 符，multimap不支持[ ]运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//头文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br> <br>map&lt;<span class="hljs-type">int</span>, string&gt; ID_Name;<br> <br><span class="hljs-comment">// 使用&#123;&#125;赋值是从c++11开始的，因此编译器版本过低时会报错，如visual studio 2012</span><br>map&lt;<span class="hljs-type">int</span>, string&gt; ID_Name = &#123;<br>                &#123; <span class="hljs-number">2015</span>, <span class="hljs-string">&quot;Jim&quot;</span> &#125;,<br>                &#123; <span class="hljs-number">2016</span>, <span class="hljs-string">&quot;Tom&quot;</span> &#125;,<br>                &#123; <span class="hljs-number">2017</span>, <span class="hljs-string">&quot;Bob&quot;</span> &#125; &#125;;<br><br><span class="hljs-built_in">begin</span>()         返回指向map头部的迭代器<br><br>     <span class="hljs-built_in">clear</span>(）        删除所有元素<br><br>     <span class="hljs-built_in">count</span>()         返回指定元素出现的次数<br><br>     <span class="hljs-built_in">empty</span>()         如果map为空则返回<span class="hljs-literal">true</span><br><br>     <span class="hljs-built_in">end</span>()           返回指向map末尾的迭代器<br><br>     <span class="hljs-built_in">equal_range</span>()   返回特殊条目的迭代器对<br><br>     <span class="hljs-built_in">erase</span>()         删除一个元素<br><br>     <span class="hljs-built_in">find</span>()          查找一个元素<br><br>     <span class="hljs-built_in">get_allocator</span>() 返回map的配置器<br><br>     <span class="hljs-built_in">insert</span>()        插入元素<br><br>     <span class="hljs-built_in">key_comp</span>()      返回比较元素key的函数<br><br>     <span class="hljs-built_in">lower_bound</span>()   返回键值&gt;=给定元素的第一个位置<br><br>     <span class="hljs-built_in">max_size</span>()      返回可以容纳的最大元素个数<br><br>     <span class="hljs-built_in">rbegin</span>()        返回一个指向map尾部的逆向迭代器<br><br>     <span class="hljs-built_in">rend</span>()          返回一个指向map头部的逆向迭代器<br><br>     <span class="hljs-built_in">size</span>()          返回map中元素的个数<br><br>     <span class="hljs-built_in">swap</span>()           交换两个map<br><br>     <span class="hljs-built_in">upper_bound</span>()    返回键值&gt;给定元素的第一个位置<br><br>     <span class="hljs-built_in">value_comp</span>()     返回比较元素value的函数<br><br><br></code></pre></td></tr></table></figure><ul><li>分配器（Allocators）</li><li>算法（Algorithm）</li><li>迭代器（Iterators）</li><li>适配器（Adapters）</li><li>仿函数（Functors）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android笔记</title>
    <link href="/2023/07/27/android%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/27/android%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Android开发"><a href="#Android开发" class="headerlink" title="Android开发"></a>Android开发</h1><h3 id="1：架构说明"><a href="#1：架构说明" class="headerlink" title="1：架构说明"></a>1：架构说明</h3><p><a href="https://developer.android.google.cn/static/guide/platform/images/android-stack_2x.png?hl=zh-cn"><img src="https://developer.android.google.cn/static/guide/platform/images/android-stack_2x.png?hl=zh-cn" alt="Snipaste_2023-06-27_14-52-08"></a></p><h4 id="1-1：Linux-内核"><a href="#1-1：Linux-内核" class="headerlink" title="1.1：Linux 内核"></a><strong>1.1：Linux 内核</strong></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Android </span>平台的基础是 Linux 内核。例如，<span class="hljs-keyword">Android </span>Runtime (ART) 依靠 Linux 内核来执行底层功能，例如线程和底层内存管理。<br>使用 Linux 内核可让 <span class="hljs-keyword">Android </span>利用主要安全功能，并且允许设备制造商为著名的内核开发硬件驱动程序<br><br>MIPSASM<br></code></pre></td></tr></table></figure><h4 id="1-2：硬件抽象层-HAL"><a href="#1-2：硬件抽象层-HAL" class="headerlink" title="1.2：硬件抽象层 (HAL)"></a><strong>1.2：硬件抽象层 (HAL)</strong></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">硬件抽象层 (HAL)提供标准界面，向更高级别的 <span class="hljs-keyword">Java </span>API 框架显示设备硬件功能。HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。当框架 API 要求访问设备硬件时，<span class="hljs-keyword">Android </span>系统将为该硬件组件加载库模块<br><br>MIPSASM<br></code></pre></td></tr></table></figure><h4 id="1-3：Android-Runtime"><a href="#1-3：Android-Runtime" class="headerlink" title="1.3：Android Runtime"></a><strong>1.3：Android Runtime</strong></h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">包括Dalvik虚拟机和Java核心库，关于Dalvik虚拟机和JVM的区别：Dalvik是基于寄存器的，JVM是基于栈的。JVM运行<span class="hljs-string">.class</span>文件，每个<span class="hljs-string">.class</span>文件对应一个类；Dalvik虚拟机将<span class="hljs-string">.class</span>文件转为<span class="hljs-string">.dex</span>文件，只有一个<span class="hljs-string">.dex</span>文件，包含了所有的类，并且通过性能优化转为<span class="hljs-string">.odex</span>文件。基于寄存器的虚拟机运行速度更快，文件更小，效率更高，适合移动端。另外Dalvik虚拟机需要更多的指令空间<br><br>JBOSS-CLI<br></code></pre></td></tr></table></figure><h4 id="1-4：原生-C-C-库"><a href="#1-4：原生-C-C-库" class="headerlink" title="1.4：原生 C&#x2F;C++ 库"></a><strong>1.4：原生 C&#x2F;C++ 库</strong></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">许多核心 <span class="hljs-keyword">Android </span>系统组件和服务（例如 ART 和 HAL）构建自原生代码，需要以 C 和 C++ 编写的原生库。<span class="hljs-keyword">Android </span>平台提供 <span class="hljs-keyword">Java </span>框架 API 以向应用显示其中部分原生库的功能<br><br>MIPSASM<br></code></pre></td></tr></table></figure><h4 id="1-5：Java-API-框架"><a href="#1-5：Java-API-框架" class="headerlink" title="1.5：Java API 框架"></a><strong>1.5：Java API 框架</strong></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">您可通过以 <span class="hljs-keyword">Java </span>语言编写的 API 使用 <span class="hljs-keyword">Android </span>OS 的整个功能集。这些 API 形成创建 <span class="hljs-keyword">Android </span>应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用<br><br>MIPSASM<br></code></pre></td></tr></table></figure><h4 id="1-6：系统应用"><a href="#1-6：系统应用" class="headerlink" title="1.6：系统应用"></a><strong>1.6：系统应用</strong></h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Android </span>随附一套用于电子邮件、短信、日历、互联网浏览和联系人等的核心应用。平台随附的应用与用户可以选择安装的应用一样，没有特殊状态<br><br>MIPSASM<br></code></pre></td></tr></table></figure><h3 id="2：activity详解"><a href="#2：activity详解" class="headerlink" title="2：activity详解"></a>2：activity详解</h3><h4 id="2-1：概念"><a href="#2-1：概念" class="headerlink" title="2.1：概念"></a>2.1：概念</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Activity</span> 是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等操作。每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上。<br><br></code></pre></td></tr></table></figure><h4 id="2-2：生命周期"><a href="#2-2：生命周期" class="headerlink" title="2.2：生命周期"></a>2.2：生命周期</h4><p><strong>1：activity的四种状态</strong></p><table><thead><tr><th><strong>Active&#x2F;Running:</strong></th><th align="left">Activity处于活动状态，此时Activity处于栈顶，是可见状态，可与用户进行交互</th></tr></thead><tbody><tr><td><strong>Paused</strong></td><td align="left">当Activity失去焦点时，或被一个新的非全屏的Activity，或被一个透明的Activity放置在栈顶时，Activity就转化为Paused状态。但我们需要明白，此时Activity只是失去了与用户交互的能力，其所有的状态信息及其成员变量都还存在，只有在系统内存紧张的情况下，才有可能被系统回收掉</td></tr><tr><td><strong>Stopped</strong></td><td align="left">当一个Activity被另一个Activity完全覆盖时，被覆盖的Activity就会进入Stopped状态，此时它不再可见，但是跟Paused状态一样保持着其所有状态信息及其成员变量</td></tr><tr><td><strong>Killed</strong></td><td align="left">当Activity被系统回收掉时，Activity就处于Killed状态。 Activity会在以上四种形态中相互切换，至于如何切换</td></tr></tbody></table><p><strong>2：activity的生命周期</strong></p><p><a href="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/5/23/16ae494667431341~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/5/23/16ae494667431341~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="img"></a></p><p><strong>「onCreate()」</strong>：你必须实现此回调，它会在系统创建你的 Activity 时触发。你的实现应 该初始化Activity的基本组件。</p><p><strong>「onStart()」</strong>：此回调包含 Activity 进入前台与用户进行互动之前的最后准备工作。到了这一步用户可见不可交互。</p><p><strong>「onResume()」</strong>：此时，该Activity位于Activity堆栈的顶部，并会捕获所有用户输入。应用的大部分核心功能都是在onResume()方法中实现的。到了这一步用户可见可交互。</p><p><strong>「onPause()」</strong>：当用户点按”返回”或”最近使用的应用”按钮时，Activity失去焦点并进入”已暂停”状态时，系统就会调用onPause()。到这一步用户可见不可交互。系统会停止动画等消耗CPU的操作。</p><p><strong>「onStop()」</strong>：到了这一步用户不可见。停止动画和刷新UI等。</p><p><strong>「onRestart()」</strong>：当处于”onStop()”状态的Activity即将重启时，系统就会调用此回调。onRestart()会从Activity停止时的状态恢复Activity至运行状态。</p><p><strong>「onDestroy()」</strong>：这是Activity最后一个方法。可以用isFinishing()来判断它，如果有dialog在运转，要在这个界面将dialog给cancel掉，不然抛异常。</p><h4 id="2-3：自定义activity实现HelloWorld"><a href="#2-3：自定义activity实现HelloWorld" class="headerlink" title="2.3：自定义activity实现HelloWorld"></a><strong>2.3：自定义activity实现HelloWorld</strong></h4><p><strong>在java目录中新建自定义Activity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Activity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.layout_my_activity);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/x.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/x.png" alt="x"></a></p><p><strong>在res目录新建layout目录并添加xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot; Hello World!&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-06_15-55-32.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-06_15-55-32.png" alt="Snipaste_2023-07-06_15-55-32"></a></p><p>Snipaste_2023-07-06_15-55-32</p><p><strong>在manifests目中的xml文件中注册activity</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;com.lier.activity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:allowBackup</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/app_name&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:roundIcon</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher_round&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:supportsRtl</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/Theme.Activity&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MyActivity&quot;</span> <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>                <br>                <span class="hljs-comment">&lt;!--&gt;表示该Activity为主Activity,首先进入该Activity&lt;/--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">category</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>效果如图：</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-06_15-59-04.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-06_15-59-04.png" alt="Snipaste_2023-07-06_15-59-04"></a></p><h4 id="2-4：activity启动"><a href="#2-4：activity启动" class="headerlink" title="2.4：activity启动"></a>2.4：activity启动</h4><p> activity启动由Intent实现，主要分为显示启动是隐式启动</p><h5 id="2-4-1-隐式启动"><a href="#2-4-1-隐式启动" class="headerlink" title="2.4.1: 隐式启动"></a>2.4.1: 隐式启动</h5><p> 只需知道其activity的action和category即可，无需知道其包名和类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>intent.setAction(<span class="hljs-string">&quot;android.intent.action.SECOND_ACTIVITY&quot;</span>);<br>intent.addCategory(Intent.CATEGORY_DEFAULT);<br>startActivity(intent);<br><br><br></code></pre></td></tr></table></figure><h5 id="2-4-2：显式启动"><a href="#2-4-2：显式启动" class="headerlink" title="2.4.2：显式启动"></a>2.4.2：显式启动</h5><p> 根据类名或类名加包名启动（当类名或包名改动后，无法启动）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(FirstActivity.<span class="hljs-built_in">this</span>, SecondActivity.class)<br>    <br>intent.setClassName(getPackageName(),getPackageName()+<span class="hljs-string">&quot;.SecondActivity&quot;</span>);<br><br><br></code></pre></td></tr></table></figure><h5 id="2-4-3：任务栈"><a href="#2-4-3：任务栈" class="headerlink" title="2.4.3：任务栈"></a>2.4.3：任务栈</h5><p> Android 任务栈又称为 Task，它是一个栈类型的数据结构：先进后出。它用于存储我们的 Activity 组件</p><p> 打开和关闭一个activity都会添加和删除任务栈中的一个activity,安卓系统可以使用Task管理好每个activity,<strong>只有栈顶的activity可以与用户交互</strong></p><p> 应用程序退出后，只有当Task中的activity的清空后，才会销毁Task,当然Task也可以在后台运行，保存其中activity信息，当用户切回应用程序时，继续提供服务</p><p> 一个应用程序中，可能由多个Task,<strong>一个Task可以被一个activity独享，或者可以由多个来自不同app的activity,同一个App的activity也可以在不同的Task中</strong></p><h5 id="2-4-4：启动模式"><a href="#2-4-4：启动模式" class="headerlink" title="2.4.4：启动模式"></a>2.4.4：启动模式</h5><p> 开发应用程序时，需要在不同的activity中跳转，或者跳转到别的应用程序中可复用的activity, <strong>当我们跳转到前面已经开启的activity时，安卓系统就会默认新建一个activity并加入任务栈中，导致已经开启的activity不可复用</strong></p><p> <strong>standard模式</strong></p><p> 系统默认模式，每次启动activity，不管其存不存在都会创建一个新的实例</p><p> <strong>singleTop</strong></p><p> 在该模式下，如果栈顶Activity为我们要新建的Activity（目标Activity），那么就不会重复创建新的Activity。</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/20180606103740431"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/20180606103740431" alt="img"></a></p><p> <strong>SingleTask</strong></p><p> 与singleTop模式相似，只不过singleTop模式是只是针对栈顶的元素，而singleTask模式下，如果task栈内存在目标Activity实例，则：</p><p> <strong>1.将task内的对应Activity实例之上的所有Activity弹出栈。</strong><br>​ <strong>2.将对应Activity置于栈顶，获得焦点。</strong></p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/20180606105812988"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/20180606105812988" alt="img"></a></p><p> <strong>SingleInstance</strong></p><p> 在该模式下，我们会为目标Activity分配一个新的affinity，并创建一个新的Task栈，将目标Activity放入新的Task，并让目标Activity获得焦点。新的Task有且只有这一个Activity实例。如果已经创建过目标Activity实例，则不会创建新的Task，而是将以前创建过的Activity唤醒（对应Task设为Foreground状态）</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/20180606111812956"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/20180606111812956" alt="img"></a></p><p> <strong>使用方式</strong></p><ol><li><p>在 AndroidManifes.xml 中 ，找到声明 Activity 的位置，在 Actvity XML 属性 android:launchMode&#x3D;”standard”,其他模式（singleTop，singleTask，singleInstance） 声明</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-06_18-26-26.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-06_18-26-26.png" alt="Snipaste_2023-07-06_18-26-26"></a></p></li><li><p>在代码中跳转 Activity 时，利用 Intent 指定 Flag 标志位来使用启动模式。示例代码如下：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, SecondActivity.class);<br>intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<span class="hljs-comment">//Flag</span><br>startActivity(intent);<br><br>JAVA<br><span class="hljs-comment">//使用一个新的Task来启动Activity，但每个Activity都将在一个新的Task中。</span><br>Intent.FLAG_ACTIVITY_NEW_TASK   <br><span class="hljs-comment">//使用singleTop模式来启动一个Activity。  </span><br>Intent.FLAG_ACTIVITY_SINGLE_TOP  <br><span class="hljs-comment">//使用singleTask模式来启动一个Activity。</span><br>Intent.FLAG_ACTIVITY_CLEAR_TOP<br><span class="hljs-comment">//使用singleTask模式来启动一个Activity，使用这种方式启动Activity，当Activity启动其他Activity的时候，该Activity会被销毁，不入栈。  </span><br>Intent.FLAG_ACTIVITY_NO_HISTORY<br><span class="hljs-comment">//方式无法指定 SingleInstance 模式，SingleInstances 只能在 AndroidManifest.xml 中声明。</span><br>Intent.setFlags<br><br><br></code></pre></td></tr></table></figure><h3 id="3：Fragment详解"><a href="#3：Fragment详解" class="headerlink" title="3：Fragment详解"></a>3：Fragment详解</h3><h4 id="3-1：基本概念"><a href="#3-1：基本概念" class="headerlink" title="3.1：基本概念"></a>3.1：基本概念</h4><p> Fragment(片段)，依赖于activity,一个activity中可以有多个片段，可以在activity中动态添加删除，且Fragment有自己的生命周期，能够接受自己的输入事件</p><p> 即页面的一部分</p><p> 模块化：我们不必把所有代码全部写在Activity中，而是把代码写在各自的Fragment中。</p><p> 可重用：多个Activity可以重用一个Fragment。</p><p> 可适配：根据硬件的屏幕尺寸、屏幕方向，能够方便地实现不同的布局，这样用户体验更好</p><h4 id="3-2：Fragment生命周期"><a href="#3-2：Fragment生命周期" class="headerlink" title="3.2：Fragment生命周期"></a>3.2：Fragment生命周期</h4><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/98a72b18702642d0a39b88b41f1e68d2.jpeg"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/98a72b18702642d0a39b88b41f1e68d2.jpeg" alt="img"></a></p><h4 id="3-3：注册到activity"><a href="#3-3：注册到activity" class="headerlink" title="3.3：注册到activity"></a>3.3：注册到activity</h4><h5 id="3-3-1：静态注册"><a href="#3-3-1：静态注册" class="headerlink" title="3.3.1：静态注册"></a>3.3.1：静态注册</h5><p> 以标签的形式将fragment注册到指定的activity中，但后续不便于进行动态的相关操作</p><p> <strong>实例</strong></p><p> 创建Faragment类及其对应的布局xml文件</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/abd.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/abd.png" alt="abd"></a></p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-07_11-46-40.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-07_11-46-40.png" alt="Snipaste_2023-07-07_11-46-22"></a></p><p> 使用标签将对应的fragment注册到activity中</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-07_11-47-15.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-07_11-47-15.png" alt="Snipaste_2023-07-07_11-47-15"></a></p><h5 id="3-3-2：动态注册"><a href="#3-3-2：动态注册" class="headerlink" title="3.3.2：动态注册"></a>3.3.2：动态注册</h5><p> 通过java代码将fragment 从已存在的activity中注册&#x2F;删除&#x2F;替换</p><p> <strong>动态注册常用的类及方法</strong></p><table><thead><tr><th>FragmentManager</th><th>用来管理Activity中的fragment,app包中使用getFragmentManager() v4包中getSupportFragmentManager</th></tr></thead><tbody><tr><td>FragmentTransaction</td><td>事务,用来添加，移除，替换fragment,FragmentTransaction transaction &#x3D; fm.benginTransatcion()</td></tr><tr><td><strong>transaction.add()</strong></td><td>往Activity中添加一个Fragment</td></tr><tr><td><strong>transaction.remove()</strong></td><td>从Activity中移除一个Fragment，如果被移除的Fragment没有添加到回退栈，这个Fragment实例将会被销毁。</td></tr><tr><td>transaction.replace()</td><td>使用另一个Fragment替换当前的，实际上就是remove()然后add()的合体</td></tr><tr><td>transaction.hide()</td><td>隐藏当前的Fragment，仅仅是设为不可见，并不会销毁</td></tr><tr><td>transaction.show()</td><td>显示之前隐藏的Fragment</td></tr><tr><td>transaction.commit()</td><td>提交一个事务</td></tr></tbody></table><p> <strong>实例</strong></p><p> 编写两个fragment</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-07_15-48-38.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-07_15-48-38.png" alt="Snipaste_2023-07-07_15-48-38"></a></p><p> 编写activity中代码，动态添加，隐藏，显示fragment</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/QQ%E6%88%AA%E5%9B%BE20230707155032.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/QQ%E6%88%AA%E5%9B%BE20230707155032.png" alt="QQ截图20230707155032"></a></p><p>最终实现效果，点击按钮实现切换不同的fragment</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/test.gif"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/test.gif" alt="test"></a></p><h4 id="3-4：Fragment通信"><a href="#3-4：Fragment通信" class="headerlink" title="3.4：Fragment通信"></a>3.4：Fragment通信</h4><h5 id="3-4-1：两个Fragment之间直接通信"><a href="#3-4-1：两个Fragment之间直接通信" class="headerlink" title="3.4.1：两个Fragment之间直接通信"></a>3.4.1：两个Fragment之间<strong>直接通信</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//添加时指定对应Fragment的tag</span><br><span class="hljs-type">Fragment</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fragment1</span>();<br><span class="hljs-type">Fragment2</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fragment2</span>();<br><span class="hljs-comment">//指定具体fragment的tag,后续可以使用findFragmentByTag找到指定的fragment</span><br>transaction.add(f1,<span class="hljs-string">&quot;f1&quot;</span>);<br>transaction.add(f2,<span class="hljs-string">&quot;f2&quot;</span>);<br><br><span class="hljs-comment">//在其他的Fragment中使用findFragmentByTag(String tag)方法获取的指定的Fragment进行通信</span><br><span class="hljs-type">RightFragment</span> <span class="hljs-variable">rightFragment</span> <span class="hljs-operator">=</span> (RightFragment) <span class="hljs-built_in">this</span>.getActivity().getSupportFragmentManager().findFragmentByTag(<span class="hljs-string">&quot;right&quot;</span>);<br><br><br></code></pre></td></tr></table></figure><h5 id="3-4-2：接口回调通信"><a href="#3-4-2：接口回调通信" class="headerlink" title="3.4.2：接口回调通信"></a>3.4.2：接口回调通信</h5><h3 id="4：service详解"><a href="#4：service详解" class="headerlink" title="4：service详解"></a>4：service详解</h3><h4 id="4-1：基本介绍"><a href="#4-1：基本介绍" class="headerlink" title="4.1：基本介绍"></a>4.1：基本介绍</h4><p> service为安卓的四大组件之一，是一个没有用户界面可以在后台无限期运行的组件</p><h4 id="4-2：启动方式"><a href="#4-2：启动方式" class="headerlink" title="4.2：启动方式"></a>4.2：启动方式</h4><h5 id="4-2-1：startService"><a href="#4-2-1：startService" class="headerlink" title="4.2.1：startService"></a>4.2.1：startService</h5><p> 通过该方式启动Service，访问者与Service之间没有关联，即使访问者退出了，Service也仍然运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//启动服务</span><br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Activity.<span class="hljs-built_in">this</span>,Service.class)<br>startService(intent)<br><br><span class="hljs-comment">//停止服务</span><br>stopService(intent)<br><br><br></code></pre></td></tr></table></figure><p> <strong>startService实例</strong></p><p> 1：service类的创建及声明</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-10_10-26-21.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-10_10-26-21.png" alt="Snipaste_2023-07-10_10-26-21"></a></p><p> 2：activity的页面绘制和类声明</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071010295792_0Snipaste_2023-07-10_10-28-39.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071010295792_0Snipaste_2023-07-10_10-28-39.png" alt="071010295792_0Snipaste_2023-07-10_10-28-39"></a></p><p> 3：结果</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071010293115_0Snipaste_2023-07-10_10-29-01.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071010293115_0Snipaste_2023-07-10_10-29-01.png" alt="071010293115_0Snipaste_2023-07-10_10-29-01"></a></p><h5 id="4-2-1：bindService"><a href="#4-2-1：bindService" class="headerlink" title="4.2.1：bindService"></a>4.2.1：bindService</h5><p> 1.bindService启动的服务和调用者之间是典型的<strong>client-server</strong>模式。调用者是client，service则是server 端。service只有一个，但绑定到service上面的client可以有一个或很多个。这里所提到的client指的是组件，比 如某个Activity。<br>​ 2.<strong>client可以通过IBinder接口获取Service实例</strong>，从而实现在client端直接调用Service中的方法以实现灵 活交互，这在通过startService方法启动中是无法实现的。<br>​ 3.bindService启动服务的生命周期与其绑定的client息息相关。当client销毁时，client会自动与Service解 除绑定。当然，client也可以明确调用Context的unbindService()方法与Service解除绑定。当没有任何client与 Service绑定时，Service会自行销毁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">bindService(Intent service, ServiceConnection conn,<span class="hljs-type">int</span> flags)<br>    <br><span class="hljs-comment">// Intent：就是你要绑定的服务，需要明确的声明。</span><br><span class="hljs-comment">// ServiceConnection：一个接口，包含两个回调onServiceConnected和onServiceDisconnected</span><br><span class="hljs-comment">// flags：一般选用BIND_AUTO_CREATE，下面的分析都是基于这个flag</span><br><span class="hljs-comment">// BIND_AUTO_CREATE：当bindService时，该服务如果不存在则自动创建该服务，Service生命周期：onCreate--&gt;onBind；如果服务存在，只会调用onBind;</span><br><br></code></pre></td></tr></table></figure><p> <strong>bindService实例</strong></p><p> <strong>1. Service</strong></p><p> 1.在Service的onBind()方法中返回IBinder类型的实例。<br>2.onBInd()方法返回的IBinder的实例需要能够返回Service实例本身。通常,最简单的方法就是在service 中创建binder的内部类，加入类似getService()的方法返回Service</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-10_16-21-20.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-10_16-21-20.png" alt="Snipaste_2023-07-10_16-21-20"></a></p><p>Snipaste_2023-07-10_16-21-20</p><p> <strong>2：client(这里使用activity)</strong></p><p> 1.创建<strong>ServiceConnection</strong>类型实例，并重写**onServiceConnected()**方法和onServiceDisconnected() 方法。<br>​ 2.当执行到onServiceConnected回调时，可通过IBinder实例得到Service实例对象，这样可实现client 与Service的连接。<br>​ 3.onServiceDisconnected回调被执行时，表示client与Service断开连接，在此可以写一些断开连接后需 要做的处理。只有断开不成功的时候会被执行</p><p> <strong>ActivityA和ActivityB代码类似</strong></p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071016293151_0QQ%E6%88%AA%E5%9B%BE20230710162815.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071016293151_0QQ%E6%88%AA%E5%9B%BE20230710162815.png" alt="071016293151_0QQ截图20230710162815"></a></p><p>071016293151_0QQ截图20230710162815</p><p> <strong>实现效果</strong></p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071016332657_0Snipaste_2023-07-10_16-32-12.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071016332657_0Snipaste_2023-07-10_16-32-12.png" alt="071016332657_0Snipaste_2023-07-10_16-32-12"></a></p><p>071016332657_0Snipaste_2023-07-10_16-32-12</p><p> <strong>结果讲述</strong></p><p> <strong>1.点击ActivityA的bindService按钮</strong><br>第一次调用bindService会实例化TestTwoService，然后执行其onBind()方法，得到IBinder类型的实例，将其作为参数传入ActivityA的ServiceConnection的onServiceConnected方法中，标志着ActivityA和Service建立了绑定</p><p> <strong>2.点击ActivityB中的bindService按钮</strong><br>​ 由于TestTwoService已处于运行状态，所以再次调用bindService不会重新创建它的实例，所以也不会执行TestTwoService的onCreate()方法和onBind()方法。ActivityB与ActivityA共享IBinder实例。此时有两个client与TestTwoService绑定。</p><p> <strong>3.点击ActivityB中的unbindService按钮</strong><br>ActivityB与TestTwoService解除了绑定，当没有任何client与Service绑定时，才会执行Service的onUnbind()方法。此时，<strong>ActivityA还在绑定连接中，所以不会执行Service的解绑方法</strong>。</p><p> <strong>4.点击ActivityA中的unbindService按钮</strong><br>ActivityA执行unbindService之后，ActivityA与TestTwoService就解除绑定了，这样就没有client与TestTwoService绑定，这时候Android会销毁TestTwoService，在销毁前会先执行TestTwoService的onUnbind()方法，然后才会执行其onDestroy()方法，这样TestService就销毁了。</p><h4 id="4-3：Service生命周期"><a href="#4-3：Service生命周期" class="headerlink" title="4.3：Service生命周期"></a>4.3：Service生命周期</h4><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/3ec6534aeaecba1eb2c6ba09f1abe6bb.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/3ec6534aeaecba1eb2c6ba09f1abe6bb.png" alt="img"></a></p><h3 id="5：BroadcastReceiver详解"><a href="#5：BroadcastReceiver详解" class="headerlink" title="5：BroadcastReceiver详解"></a>5：BroadcastReceiver详解</h3><h4 id="5-1：基本介绍"><a href="#5-1：基本介绍" class="headerlink" title="5.1：基本介绍"></a>5.1：基本介绍</h4><p> 在 Android 系统中，广播（Broadcast）是在组件之间传播数据的一种机制，这些组件可以位于不同的进程中，起到进程间通信的作用</p><p><strong>BroadcastReceiver</strong> 是对发送出来的 <strong>Broadcast</strong> 进行过滤、接受和响应的组件。</p><h4 id="5-2：作用"><a href="#5-2：作用" class="headerlink" title="5.2：作用"></a>5.2：作用</h4><ul><li><p>用于监听 &#x2F; 接收 应用发出的广播消息，并做出响应</p></li><li><p>应用场景<br>a. 不同组件之间通信（包括应用内 &#x2F; 不同应用之间）</p><p>b. 与 <code>Android</code> 系统在特定情况下的通信</p><blockquote><p>如当电话呼入时、网络可用时</p></blockquote><p>c. 多线程通信</p></li></ul><h4 id="5-3：怎么用"><a href="#5-3：怎么用" class="headerlink" title="5.3：怎么用"></a>5.3：怎么用</h4><h5 id="5-3-1：静态注册"><a href="#5-3-1：静态注册" class="headerlink" title="5.3.1：静态注册"></a>5.3.1：静态注册</h5><p> 即在AndroidManifest.xml文件中注册，android 8 (api26) 以后Google官方对静态注册方式进行限制</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071109180390_0Snipaste_2023-07-11_09-17-27.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071109180390_0Snipaste_2023-07-11_09-17-27.png" alt="071109180390_0Snipaste_2023-07-11_09-17-27"></a></p><h5 id="5-3-2：动态注册"><a href="#5-3-2：动态注册" class="headerlink" title="5.3.2：动态注册"></a>5.3.2：动态注册</h5><p> 动态注册即在代码中注册，我们一般在onResume里面注册。<strong>通过IntentFileter这个类包装Receiver然后通过registerReceiver去注册</strong></p><p> <strong>动态广播在onResume中注册，在onPause中销毁，有注册必须有注册，不然可能造成内存泄漏</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener&#123;<br><br>    <span class="hljs-keyword">private</span> DynamicBroadcastReceive dynamicBroadcastReceive;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        findViewById(R.id.send).setOnClickListener(<span class="hljs-built_in">this</span>);<br>        findViewById(R.id.dynamic).setOnClickListener(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//动态注册</span><br>        <span class="hljs-built_in">super</span>.onResume();<br>        <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>        intentFilter.addAction(<span class="hljs-string">&quot;com.lier.dynamic&quot;</span>);<br>        dynamicBroadcastReceive = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicBroadcastReceive</span>();<br><br>        registerReceiver(dynamicBroadcastReceive, intentFilter);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onPause();<br>        <span class="hljs-comment">//注销</span><br>        unregisterReceiver(dynamicBroadcastReceive);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-comment">//静态注册消息发送</span><br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.send)&#123;<br>            <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;android.intent.action.SEND&quot;</span>);<br>            intent.putExtra(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello world&quot;</span>);<br>            sendBroadcast(intent);<br>        &#125;<br><br>        <span class="hljs-comment">//动态消息发送</span><br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.dynamic)&#123;<br>            <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>            intent.setAction(<span class="hljs-string">&quot;com.lier.dynamic&quot;</span>);<br>            intent.putExtra(<span class="hljs-string">&quot;str&quot;</span>,<span class="hljs-string">&quot;hello dynamic&quot;</span>);<br>            sendBroadcast(intent);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicBroadcastReceive</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> intent.getStringExtra(<span class="hljs-string">&quot;str&quot;</span>);<br>        Log.i(getClass().getName(),<span class="hljs-string">&quot;接受到消息 = &quot;</span> + str);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="5-3-3：有序广播"><a href="#5-3-3：有序广播" class="headerlink" title="5.3.3：有序广播"></a>5.3.3：有序广播</h5><p> <strong>有序广播通过sendOrderedBroadcast发送，而接受者Receiver的Action是同一个，只不过他们通过 priority属性进行优先级的判定</strong>。priority越大优先级越高，优先级最高的会第一个拦截广播并处理，然后 才会往下传递.</p><p> <strong>创建三个Receiver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderReceiver1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> intent.getStringExtra(<span class="hljs-string">&quot;order&quot;</span>);<br>        Log.i(getClass().getName(),<span class="hljs-string">&quot;msg = &quot;</span> + order);<br><br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>        bundle.putString(<span class="hljs-string">&quot;str&quot;</span>,<span class="hljs-string">&quot;hello receiver2&quot;</span>);<br>        bundle.putInt(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>        setResultExtras(bundle);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderReceiver2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br><br>        Log.i(getClass().getName(), <span class="hljs-string">&quot;hello this is receiver2&quot;</span>);<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">resultExtras</span> <span class="hljs-operator">=</span> getResultExtras(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> resultExtras.getString(<span class="hljs-string">&quot;str&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> resultExtras.getInt(<span class="hljs-string">&quot;code&quot;</span>);<br><br>        Log.i(getClass().getName(),<span class="hljs-string">&quot;str = &quot;</span> + str + <span class="hljs-string">&quot; code = &quot;</span> + code );<br><br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>        bundle.putString(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;hello receiver3&quot;</span>);<br>        setResultExtras(bundle);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderReceiver3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.i(getClass().getName(),<span class="hljs-string">&quot;this is receiver3&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> getResultExtras(<span class="hljs-literal">true</span>).getString(<span class="hljs-string">&quot;data&quot;</span>);<br><br>        Log.i(getClass().getName(),<span class="hljs-string">&quot;data = &quot;</span> + data);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> <strong>注册Receiver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//设置不同的Priority</span><br><span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>intentFilter1.addAction(<span class="hljs-string">&quot;com.lier.order&quot;</span>);<br>intentFilter1.setPriority(<span class="hljs-number">3</span>);<br><span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>intentFilter2.setPriority(<span class="hljs-number">2</span>);<br>intentFilter2.addAction(<span class="hljs-string">&quot;com.lier.order&quot;</span>);<br><span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>intentFilter3.addAction(<span class="hljs-string">&quot;com.lier.order&quot;</span>);<br>intentFilter3.setPriority(<span class="hljs-number">1</span>);<br><br>orderReceiver1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderReceiver1</span>();<br>orderReceiver2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderReceiver2</span>();<br>orderReceiver3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderReceiver3</span>();<br><br>registerReceiver(orderReceiver1,intentFilter1);<br>registerReceiver(orderReceiver2,intentFilter2);<br>registerReceiver(orderReceiver3,intentFilter3);<br><br><br><br></code></pre></td></tr></table></figure><p> <strong>输出结果</strong></p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-11_11-50-48.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-11_11-50-48.png" alt="Snipaste_2023-07-11_11-50-48"></a></p><p>Snipaste_2023-07-11_11-50-48</p><h5 id="5-3-3：本地广播"><a href="#5-3-3：本地广播" class="headerlink" title="5.3.3：本地广播"></a>5.3.3：本地广播</h5><p> 前面的广播方式可以在其他应用中接收到，而且可以接受其他应用中的信息，可能造成不安全的因素，可以使用本地广播的方式，只能在应用内部传播，且只能接受来自应用内部的信息</p><p> <strong>本地广播是无法通过静态注册的方式来接收的</strong>，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了</p><p>本地广播是使用 <strong>LocalBroadcastManager</strong> 来对广播进行管理</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><strong>LocalBroadcastManager</strong>.getInstance(this).registerReceiver(BroadcastReceiver, IntentFilter)</td><td>注册Receiver</td></tr><tr><td><strong>LocalBroadcastManager</strong>.getInstance(this).unregisterReceiver(BroadcastReceiver);</td><td>注销Receiver</td></tr><tr><td><strong>LocalBroadcastManager</strong>.getInstance(this).sendBroadcast(Intent)</td><td>发送异步广播</td></tr><tr><td><strong>LocalBroadcastManager</strong>.getInstance(this).sendBroadcastSync(Intent)</td><td>发送同步广播</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> intent.getStringExtra(<span class="hljs-string">&quot;data&quot;</span>);<br>        Log.i(getClass().getName(),<span class="hljs-string">&quot;接收到了消息,data = &quot;</span> + data);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//注册 在onResume中</span><br>instance = LocalBroadcastManager.getInstance(<span class="hljs-built_in">this</span>);<br><span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>intentFilter4.addAction(<span class="hljs-string">&quot;com.lier.local&quot;</span>);<br>localReceiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalReceiver</span>();<br>instance.registerReceiver(localReceiver,intentFilter4);<br><br><span class="hljs-comment">//注销 在onPause中</span><br>instance.unregisterReceiver(localReceiver);<br><br><br><span class="hljs-comment">//发送消息</span><br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>intent.setAction(<span class="hljs-string">&quot;com.lier.local&quot;</span>);<br>intent.putExtra(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>);<br>instance.sendBroadcast(intent);<br><br><br></code></pre></td></tr></table></figure><h5 id="5-3-4：自定义权限"><a href="#5-3-4：自定义权限" class="headerlink" title="5.3.4：自定义权限"></a>5.3.4：自定义权限</h5><p> 动态注册广播接收器存在一个问题，即<strong>系统内的任何应用均可监听并触发我们的 Receiver</strong> 。通常情况下我们是不希望如此的，使用私有权限可以指定对应的广播接收器能接受到消息，<strong>系统内不同应用间</strong>指定广播接收器</p><p> <strong>&lt; receiver &gt;</strong> 标签添加一个 <strong>android:exported&#x3D;”false”</strong> 属性，标明该 Receiver <strong>仅限应用内部</strong>使用。这样，系统中的其他应用就无法接触到该 Receiver 了</p><p> 在系统内不同的应用间，可以自定义权限实现</p><p> 创建自己的使用权限，即在清单文件中添加一个 <strong>&lt; permission &gt;</strong> 标签来声明自定义权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">permission</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.permission.receiver&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:protectionLevel</span>=<span class="hljs-string">&quot;signature&quot;</span> /&gt;</span><br><br><br></code></pre></td></tr></table></figure><p> 自定义权限时必须同时指定 <strong>protectionLevel</strong> 属性值，系统根据该属性值确定自定义权限的使用方式</p><table><thead><tr><th>属性值</th><th>限定方式</th></tr></thead><tbody><tr><td>normal</td><td>默认值。较低风险的权限，对其他应用，系统和用户来说风险最小。系统在安装应用时会自动批准授予应用该类型的权限，不要求用户明确批准（虽然用户在安装之前总是可以选择查看这些权限）</td></tr><tr><td>dangerous</td><td>较高风险的权限，请求该类型权限的应用程序会访问用户私有数据或对设备进行控制，从而可能对用户造成负面影响。因为这种类型的许可引入了潜在风险，所以系统可能不会自动将其授予请求的应用。例如，系统可以向用户显示由应用请求的任何危险许可，并且在继续之前需要确认，或者可以采取一些其他方法来避免用户自动允许</td></tr><tr><td>signature</td><td>只有在请求该权限的应用与声明权限的应用使用相同的证书签名时，系统才会授予权限。如果证书匹配，系统会自动授予权限而不通知用户或要求用户的明确批准</td></tr><tr><td>signatureOrSystem</td><td>系统仅授予Android系统映像中与声明权限的应用使用相同的证书签名的应用。请避免使用此选项，“signature”级别足以满足大多数需求，“signatureOrSystem”权限用于某些特殊情况</td></tr></tbody></table><h3 id="6：SQLite详解"><a href="#6：SQLite详解" class="headerlink" title="6：SQLite详解"></a>6：SQLite详解</h3><h4 id="6-1：什么是SQLite"><a href="#6-1：什么是SQLite" class="headerlink" title="6.1：什么是SQLite"></a>6.1：什么是SQLite</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">是数据库，是<span class="hljs-variable">Android</span>系统提供的数据存贮方式之一<br><span class="hljs-variable">SQLite</span>占用的资源非常少，只有几百<span class="hljs-built_in">K</span><br><span class="hljs-variable">SQLite</span>不仅支持标准的<span class="hljs-variable">SQL</span>语句<span class="hljs-operator">,</span>还遵循数据库的<span class="hljs-variable">ACID</span>事务<br><span class="hljs-variable">SQLite</span>不需要安装，不需要用户名和密码就可以使用<br></code></pre></td></tr></table></figure><h4 id="6-2：能做什么"><a href="#6-2：能做什么" class="headerlink" title="6.2：能做什么"></a>6.2：能做什么</h4><p>类似于Mysql持久化数据到本地</p><h4 id="6-3：SQLite使用"><a href="#6-3：SQLite使用" class="headerlink" title="6.3：SQLite使用"></a>6.3：SQLite使用</h4><h5 id="6-3-1：SQLiteOpenHelper中常用API"><a href="#6-3-1：SQLiteOpenHelper中常用API" class="headerlink" title="6.3.1：SQLiteOpenHelper中常用API"></a>6.3.1：SQLiteOpenHelper中常用API</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"> <span class="hljs-comment">// 1. 创建 or 打开 可读/写的数据库（通过 返回的SQLiteDatabase对象 进行操作）</span><br> getWritableDatabase（）<br><br> <span class="hljs-comment">// 2. 创建 or 打开 可读的数据库（通过 返回的SQLiteDatabase对象 进行操作）</span><br> getReadableDatabase（）<br><br> <span class="hljs-comment">// 3. 数据库第1次创建时 则会调用，即 第1次调用 getWritableDatabase（） / getReadableDatabase（）时调用</span><br> <span class="hljs-comment">// 在继承SQLiteOpenHelper类的子类中复写</span><br> onCreate(SQLiteDatabase db) <br><br> <span class="hljs-comment">// 4. 数据库升级时自动调用</span><br> <span class="hljs-comment">// 在继承SQLiteOpenHelper类的子类中复写</span><br> onUpgrade(SQLiteDatabase db, <span class="hljs-type">int</span> oldVersion, <span class="hljs-type">int</span> newVersion)<br><br> <span class="hljs-comment">// 5. 关闭数据库</span><br> close（）<br><br> <span class="hljs-comment">/** </span><br><span class="hljs-comment">  *  数据库操作（增、删、减、查）</span><br><span class="hljs-comment">  */</span> <br> <span class="hljs-comment">// 1. 查询数据</span><br> (Cursor) query(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)  <br> <span class="hljs-comment">// 查询指定的数据表返回一个带游标的数据集。</span><br> <span class="hljs-comment">// 各参数说明： </span><br> <span class="hljs-comment">// table：表名称 </span><br> <span class="hljs-comment">// colums：列名称数组 </span><br> <span class="hljs-comment">// selection：条件子句，相当于where </span><br> <span class="hljs-comment">// selectionArgs：条件语句的参数数组 </span><br> <span class="hljs-comment">// groupBy：分组 </span><br> <span class="hljs-comment">// having：分组条件 </span><br> <span class="hljs-comment">// orderBy：排序类 </span><br> <span class="hljs-comment">// limit：分页查询的限制 </span><br> <span class="hljs-comment">// Cursor：返回值，相当于结果集ResultSet </span><br><br> (Cursor) rawQuery(String sql, String[] selectionArgs) <br> <span class="hljs-comment">//运行一个预置的SQL语句，返回带游标的数据集（与上面的语句最大的区别 = 防止SQL注入）</span><br><br> <span class="hljs-comment">// 2. 删除数据行  </span><br> (<span class="hljs-type">int</span>) delete(String table,String whereClause,String[] whereArgs) <br> <br> <span class="hljs-comment">// 3. 添加数据行 </span><br> (<span class="hljs-type">long</span>) insert(String table,String nullColumnHack,ContentValues values) <br> <br> <span class="hljs-comment">// 4. 更新数据行 </span><br>(<span class="hljs-type">int</span>) update(String table, ContentValues values, String whereClause, String[] whereArgs) <br> <br> <span class="hljs-comment">// 5. 执行一个SQL语句，可以是一个select or 其他sql语句 </span><br> <span class="hljs-comment">// 即 直接使用String类型传入sql语句 &amp; 执行</span><br> (<span class="hljs-keyword">void</span>) execSQL(String sql)<br><br><br></code></pre></td></tr></table></figure><h5 id="6-3-2：使用步骤"><a href="#6-3-2：使用步骤" class="headerlink" title="6.3.2：使用步骤"></a>6.3.2：使用步骤</h5><p> 1：自定义数据库子类（基础SQLiteOpenHelper）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySQLiteHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Context context;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MySQLiteHelper</span><span class="hljs-params">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class="hljs-type">int</span> version)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, name, factory, version);<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase)</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table user(id bigint primary key autoincrement,&quot;</span> +<br>                    <span class="hljs-string">&quot;name varchar(20),&quot;</span> +<br>                    <span class="hljs-string">&quot;phone varchar(20))&quot;</span>;<br><br>            sqLiteDatabase.execSQL(sql);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onUpgrade</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>            Log.i(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;数据库新版 = &quot;</span> + i1);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> 2：activity界面实现增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MainActivity.class</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener&#123;<br><br>    <span class="hljs-keyword">private</span> MySQLiteHelper mySQLiteHelper;<br><br>    <span class="hljs-keyword">private</span> SQLiteDatabase writableDatabase;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        findViewById(R.id.create).setOnClickListener(<span class="hljs-built_in">this</span>);<br>        findViewById(R.id.insert).setOnClickListener(<span class="hljs-built_in">this</span>);<br>        findViewById(R.id.delete).setOnClickListener(<span class="hljs-built_in">this</span>);<br>        findViewById(R.id.update).setOnClickListener(<span class="hljs-built_in">this</span>);<br>        findViewById(R.id.select).setOnClickListener(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.create)&#123;<br>            <span class="hljs-keyword">if</span>(mySQLiteHelper == <span class="hljs-literal">null</span>)&#123;<br>                mySQLiteHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySQLiteHelper</span>(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;user_db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>);<br>            &#125;<br>            writableDatabase = mySQLiteHelper.getWritableDatabase();<br>            Log.i(getClass().getName(),<span class="hljs-string">&quot;数据库创建成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.insert)&#123;<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">idText</span> <span class="hljs-operator">=</span> findViewById(R.id.id);<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">nameText</span> <span class="hljs-operator">=</span> findViewById(R.id.name);<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">phoneText</span> <span class="hljs-operator">=</span> findViewById(R.id.phone);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> idText.getText().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> nameText.getText().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> phoneText.getText().toString();<br><br>            <span class="hljs-type">ContentValues</span> <span class="hljs-variable">contentValues</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>            contentValues.put(<span class="hljs-string">&quot;id&quot;</span>,id);<br>            contentValues.put(<span class="hljs-string">&quot;name&quot;</span>,name);<br>            contentValues.put(<span class="hljs-string">&quot;phone&quot;</span>,phone);<br><br><br>            writableDatabase.insert(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-literal">null</span>,contentValues);<br>            Log.i(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;id = &quot;</span> + id + <span class="hljs-string">&quot; 的数据插入成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.update)&#123;<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">idText</span> <span class="hljs-operator">=</span> findViewById(R.id.id);<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">nameText</span> <span class="hljs-operator">=</span> findViewById(R.id.name);<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">phoneText</span> <span class="hljs-operator">=</span> findViewById(R.id.phone);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> idText.getText().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> nameText.getText().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> phoneText.getText().toString();<br><br>            <span class="hljs-type">ContentValues</span> <span class="hljs-variable">contentValues</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>            contentValues.put(<span class="hljs-string">&quot;name&quot;</span>,name);<br>            contentValues.put(<span class="hljs-string">&quot;phone&quot;</span>,phone);<br><br><br>            writableDatabase.update(<span class="hljs-string">&quot;user&quot;</span>,contentValues,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;id&#125;);<br>            Log.i(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;id = &quot;</span> + id + <span class="hljs-string">&quot; 的数据修改成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.delete)&#123;<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">idText</span> <span class="hljs-operator">=</span> findViewById(R.id.id);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> idText.getText().toString();<br><br>            writableDatabase.delete(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;id&#125;);<br>            Log.i(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;id = &quot;</span> + id + <span class="hljs-string">&quot; 的数据删除成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.select)&#123;<br>            <span class="hljs-type">Cursor</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> writableDatabase.query(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>&#125;,<br>                    <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span>(user.moveToNext())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">idIndex</span> <span class="hljs-operator">=</span> user.getColumnIndex(<span class="hljs-string">&quot;id&quot;</span>);<br>                id = user.getString(idIndex);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">nameIndex</span> <span class="hljs-operator">=</span> user.getColumnIndex(<span class="hljs-string">&quot;name&quot;</span>);<br>                name = user.getString(nameIndex);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">phoneIndex</span> <span class="hljs-operator">=</span> user.getColumnIndex(<span class="hljs-string">&quot;phone&quot;</span>);<br>                phone = user.getString(phoneIndex);<br><br>                System.out.println(<span class="hljs-string">&quot;输出结果 id = &quot;</span> + id + <span class="hljs-string">&quot; name = &quot;</span> + name + <span class="hljs-string">&quot; phone = &quot;</span> + phone);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br>&lt;!-- activity_main.xml --&gt;<br><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;LinearLayout xmlns:android=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span><br>    android:orientation=<span class="hljs-string">&quot;vertical&quot;</span><br>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;<br><br><br>    &lt;EditText<br>        android:id=<span class="hljs-string">&quot;@+id/id&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:ems=<span class="hljs-string">&quot;10&quot;</span><br>        android:inputType=<span class="hljs-string">&quot;textPersonName&quot;</span><br>        android:text=<span class="hljs-string">&quot;id&quot;</span> /&gt;<br><br>    &lt;EditText<br>        android:id=<span class="hljs-string">&quot;@+id/name&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:ems=<span class="hljs-string">&quot;10&quot;</span><br>        android:inputType=<span class="hljs-string">&quot;textPersonName&quot;</span><br>        android:text=<span class="hljs-string">&quot;name&quot;</span> /&gt;<br><br>    &lt;EditText<br>        android:id=<span class="hljs-string">&quot;@+id/phone&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:ems=<span class="hljs-string">&quot;10&quot;</span><br>        android:inputType=<span class="hljs-string">&quot;textPersonName&quot;</span><br>        android:text=<span class="hljs-string">&quot;phone&quot;</span> /&gt;<br><br>    &lt;Button<br>        android:id=<span class="hljs-string">&quot;@+id/create&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:text=<span class="hljs-string">&quot;创建数据库&quot;</span> /&gt;<br><br>    &lt;Button<br>        android:id=<span class="hljs-string">&quot;@+id/insert&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:text=<span class="hljs-string">&quot;insert&quot;</span> /&gt;<br><br>    &lt;Button<br>        android:id=<span class="hljs-string">&quot;@+id/update&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:text=<span class="hljs-string">&quot;update&quot;</span> /&gt;<br><br>    &lt;Button<br>        android:id=<span class="hljs-string">&quot;@+id/delete&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:text=<span class="hljs-string">&quot;delete&quot;</span> /&gt;<br><br>    &lt;Button<br>        android:id=<span class="hljs-string">&quot;@+id/select&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:text=<span class="hljs-string">&quot;select&quot;</span> /&gt;<br><br>&lt;/LinearLayout&gt;<br><br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071210470947_0Snipaste_2023-07-12_10-45-50.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071210470947_0Snipaste_2023-07-12_10-45-50.png" alt="071210470947_0Snipaste_2023-07-12_10-45-50"></a></p><p>071210470947_0Snipaste_2023-07-12_10-45-50</p><h3 id="7：ContentProvider详解"><a href="#7：ContentProvider详解" class="headerlink" title="7：ContentProvider详解"></a>7：ContentProvider详解</h3><h4 id="7-1：什么是ContentProvider"><a href="#7-1：什么是ContentProvider" class="headerlink" title="7.1：什么是ContentProvider"></a>7.1：什么是ContentProvider</h4><ul><li>ContentProvider是Android的四大组件之一，以标准化的方式在Android 应用间共享数据。</li><li>ContentProvider封装的数据存储以及增删改查等，并且必须实现一个对外统一的接口（Uri）。</li></ul><p>Uri(通用资源标识符 Universal Resource Identifer)，代表数据操作的地址，每一个ContentProvider都会有唯一的地址。</p><p>ContentProvider使用的Uri语法结构如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">content:<span class="hljs-regexp">//</span>authority<span class="hljs-regexp">/data_path/i</span>d<br></code></pre></td></tr></table></figure><ul><li><strong>content:&#x2F;&#x2F;</strong> 是通用前缀，表示该Uri用于ContentProvider定位资源。</li><li><strong>authority</strong> 是授权者名称，用来确定具体由哪一个ContentProvider提供资源。因此一般authority都由类的小写全称组成，以保证唯一性。</li><li><strong>data_path</strong> 是数据路径，用来确定请求的是哪个数据集。</li><li><strong>id</strong> 是数据编号，用来请求单条数据。如果是多条这个字段忽略。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">content:<span class="hljs-regexp">//</span>com.scc.userprovider/user多条<br>content:<span class="hljs-regexp">//</span>com.scc.userprovider<span class="hljs-regexp">/user/</span><span class="hljs-number">10</span>单条<br></code></pre></td></tr></table></figure><h4 id="7-2：什么是ContentResolver"><a href="#7-2：什么是ContentResolver" class="headerlink" title="7.2：什么是ContentResolver"></a>7.2：什么是ContentResolver</h4><ul><li>ContentResolver是数据调用者，ContentProvider将数据发布出来，通过ContentResolver对象结合Uri进行调用。</li><li>一般来说ContentProvider是单例模式，多个应用可通过ContentResolver调用ContentProvider的增删改查操作数据，ContentResolver调用的数据操作会让同一个ContentProvider处理。</li></ul><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/8498518-ec4f012859b2d8fb.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/8498518-ec4f012859b2d8fb.png" alt="img"></a></p><h4 id="7-3：ContentProvider实例"><a href="#7-3：ContentProvider实例" class="headerlink" title="7.3：ContentProvider实例"></a>7.3：ContentProvider实例</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.使用SQLite技术，创建好数据库和数据表<br><span class="hljs-attribute">2</span>.新建类继承ContentProvider，重写<span class="hljs-number">6</span>个抽象方法，创建UriMatcher，定义Uri规则<br><span class="hljs-attribute">3</span>.在Manifest中注册provider<br><span class="hljs-attribute">4</span>.ContentResolver对ContentProvider中共享的数据进行增删改查操作<br></code></pre></td></tr></table></figure><h5 id="7-3-1-使用SQLite技术，创建好数据库和数据表"><a href="#7-3-1-使用SQLite技术，创建好数据库和数据表" class="headerlink" title="7.3.1.使用SQLite技术，创建好数据库和数据表"></a>7.3.1.使用SQLite技术，创建好数据库和数据表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SQLiteHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SQLiteHelper</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Context context, <span class="hljs-meta">@Nullable</span> String name,</span><br><span class="hljs-params">                        <span class="hljs-meta">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class="hljs-type">int</span> version)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, name, factory, version);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase)</span> &#123;<br>        <br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table provider(id integer primary key autoincrement,&quot;</span> +<br>                <span class="hljs-string">&quot;provider varchar(20))&quot;</span>;<br>        <br>        sqLiteDatabase.execSQL(sql);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onUpgrade</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;newVersion = &quot;</span> + i1);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//在ContentProvider的create中创建数据库和数据库表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyContentProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentProvider</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> SQLiteDatabase writableDatabase;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SQLiteHelper</span> <span class="hljs-variable">sqLiteHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLiteHelper</span>(getContext(),<span class="hljs-string">&quot;provider_db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>);<br>        writableDatabase = sqLiteHelper.getWritableDatabase();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="7-3-2-继承ContentProvider，定义Uri规则"><a href="#7-3-2-继承ContentProvider，定义Uri规则" class="headerlink" title="7.3.2.继承ContentProvider，定义Uri规则"></a>7.3.2.继承ContentProvider，定义Uri规则</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyContentProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentProvider</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">USER_DIR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">USER_ITEM</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//创建authority</span><br>    <span class="hljs-comment">//此处的值必须和Manifest.xml文件中注册的provider的android:authorities的值一致</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTHORITY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.lier.contentprovider&quot;</span>;<br><br>    <span class="hljs-comment">//创建UriMatcher</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> UriMatcher uriMatcher;<br><br>    <span class="hljs-keyword">private</span> SQLiteDatabase writableDatabase;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//实例化utiMatcher</span><br>        uriMatcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UriMatcher</span>(UriMatcher.NO_MATCH);<br><br>        <span class="hljs-comment">//可以实现匹配URI的功能</span><br>        <span class="hljs-comment">//参数1：authority 参数2：路径 参数3：自定义代码</span><br>        uriMatcher.addURI(AUTHORITY,<span class="hljs-string">&quot;user&quot;</span>,USER_DIR);<br>        uriMatcher.addURI(AUTHORITY,<span class="hljs-string">&quot;user/#&quot;</span>,USER_ITEM);<br>    &#125;<br>       <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SQLiteHelper</span> <span class="hljs-variable">sqLiteHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLiteHelper</span>(getContext(),<span class="hljs-string">&quot;provider_db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>);<br>        writableDatabase = sqLiteHelper.getWritableDatabase();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Cursor <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> String[] strings, <span class="hljs-meta">@Nullable</span> String s, <span class="hljs-meta">@Nullable</span> String[] strings1, <span class="hljs-meta">@Nullable</span> String s1)</span> &#123;<br>        <span class="hljs-type">Cursor</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> USER_DIR:<br>                provider = writableDatabase.query(<span class="hljs-string">&quot;provider&quot;</span>, strings, s, strings1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, s1);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> USER_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">queryId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                provider = writableDatabase.query(<span class="hljs-string">&quot;provider&quot;</span>, strings, <span class="hljs-string">&quot;id = ?&quot;</span><br>                        , <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;queryId&#125;, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, s1);<br>        &#125;<br>        <span class="hljs-keyword">return</span> provider;<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Uri <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> ContentValues contentValues)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> USER_DIR:<br>            <span class="hljs-keyword">case</span> USER_ITEM:<br>                <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> writableDatabase.insert(<span class="hljs-string">&quot;provider&quot;</span>,<span class="hljs-literal">null</span>,contentValues);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> String s, <span class="hljs-meta">@Nullable</span> String[] strings)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">deleteInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> USER_DIR:<br>                deleteInt = writableDatabase.delete(<span class="hljs-string">&quot;provider&quot;</span>, s, strings);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> USER_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">deleteId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                deleteInt = writableDatabase.delete(<span class="hljs-string">&quot;provider&quot;</span>,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;deleteId&#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> deleteInt;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> ContentValues contentValues, <span class="hljs-meta">@Nullable</span> String s, <span class="hljs-meta">@Nullable</span> String[] strings)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">updateInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> USER_DIR:<br>                updateInt = writableDatabase.update(<span class="hljs-string">&quot;provider&quot;</span>,contentValues,s,strings);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> USER_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">updateId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                updateInt = writableDatabase.update(<span class="hljs-string">&quot;provider&quot;</span>,contentValues,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;updateId&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> updateInt;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="7-3-3-在Manifest中注册provider"><a href="#7-3-3-在Manifest中注册provider" class="headerlink" title="7.3.3.在Manifest中注册provider"></a>7.3.3.在Manifest中注册provider</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">provider</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">&quot;com.lier.contentprovider&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MyContentProvider&quot;</span>/&gt;</span><br><br><br></code></pre></td></tr></table></figure><h5 id="7-4-4-增删改查操作"><a href="#7-4-4-增删改查操作" class="headerlink" title="7.4.4.增删改查操作"></a>7.4.4.增删改查操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        findViewById(R.id.query).setOnClickListener(<span class="hljs-built_in">this</span>);<br>        findViewById(R.id.delete).setOnClickListener(<span class="hljs-built_in">this</span>);<br>        findViewById(R.id.update).setOnClickListener(<span class="hljs-built_in">this</span>);<br>        findViewById(R.id.insert).setOnClickListener(<span class="hljs-built_in">this</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@SuppressLint(&quot;Range&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.query)&#123;<br>            <span class="hljs-type">Uri</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.lier.contentprovider/user&quot;</span>);<br>            <span class="hljs-type">Cursor</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> getContentResolver().query(parse, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">while</span>(query.moveToNext())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> query.getInt(query.getColumnIndex(<span class="hljs-string">&quot;id&quot;</span>));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> query.getString(query.getColumnIndex(<span class="hljs-string">&quot;provider&quot;</span>));<br>                System.out.println(<span class="hljs-string">&quot;provider&#123;id = &quot;</span> + id +  <span class="hljs-string">&quot;,provider = &quot;</span> + provider + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.insert)&#123;<br>            <span class="hljs-type">Uri</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.lier.contentprovider/user&quot;</span>);<br>            <span class="hljs-type">ContentValues</span> <span class="hljs-variable">contentValues</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br><br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> findViewById(R.id.provider);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> text.getText().toString();<br><br>            contentValues.put(<span class="hljs-string">&quot;provider&quot;</span>,provider);<br><br>            getContentResolver().insert(parse,contentValues);<br>            Log.i(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;添加成功&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.update)&#123;<br>            <span class="hljs-type">Uri</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.lier.contentprovider/user&quot;</span>);<br>            <span class="hljs-type">ContentValues</span> <span class="hljs-variable">contentValues</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br><br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> findViewById(R.id.provider);<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">idText</span> <span class="hljs-operator">=</span> findViewById(R.id.id);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> idText.getText().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> text.getText().toString();<br><br>            contentValues.put(<span class="hljs-string">&quot;provider&quot;</span>,provider);<br>            contentValues.put(<span class="hljs-string">&quot;id&quot;</span>,id);<br>            getContentResolver().update(parse,contentValues,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;id&#125;);<br>            Log.i(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;修改&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(view.getId() == R.id.delete)&#123;<br>            <span class="hljs-type">Uri</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.lier.contentprovider/user&quot;</span>);<br><br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">idText</span> <span class="hljs-operator">=</span> findViewById(R.id.id);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> idText.getText().toString();<br><br>            getContentResolver().delete(parse,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;id&#125;);<br>            Log.i(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="7-4-5-最终效果"><a href="#7-4-5-最终效果" class="headerlink" title="7.4.5.最终效果"></a>7.4.5.最终效果</h5><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071214402071_0Snipaste_2023-07-12_14-39-05.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/071214402071_0Snipaste_2023-07-12_14-39-05.png" alt="071214402071_0Snipaste_2023-07-12_14-39-05"></a></p><p>071214402071_0Snipaste_2023-07-12_14-39-05</p><h3 id="8：View与ViewGroup"><a href="#8：View与ViewGroup" class="headerlink" title="8：View与ViewGroup"></a>8：View与ViewGroup</h3><p> <strong>所有的用户界面元素都是由View和ViewGroup的对象构成的。View是绘制在屏幕上的用户能与之交互的一个对象。而ViewGroup则是一个用于存放其他View（和ViewGroup）对象的布局容器</strong>！ Android为我们提供了一个View和ViewGroup子类的集合，集合中提供了一些常用的输入控件(比如按钮和文本域)和各种各样的布局模式（比如线性或相对布局）</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/68789093.jpg"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/68789093.jpg" alt="img"></a></p><h4 id="8-1：UI组件"><a href="#8-1：UI组件" class="headerlink" title="8.1：UI组件"></a>8.1：UI组件</h4><p>View组件包含了几乎所有的图形显示组件</p><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/2019040820130691.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/2019040820130691.png" alt="img"></a></p><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>TextView</td><td>一个文本的显示组件</td></tr><tr><td>Button</td><td>一个普通的按钮</td></tr><tr><td>EditText</td><td>一个可编辑的文本框组件</td></tr><tr><td>CheckBox</td><td>复选框组件</td></tr><tr><td>RadioGroup</td><td>单选按钮组件</td></tr><tr><td>Spinner</td><td>下拉列表框</td></tr><tr><td>DatePicker</td><td>日期选择组件</td></tr><tr><td>TimePicker</td><td>时间选择组件</td></tr><tr><td>ScrollView</td><td>滚动条</td></tr><tr><td>ProgressBar</td><td>进度处理条</td></tr><tr><td>SeekBar</td><td>拖动条组件</td></tr><tr><td>RatingBar</td><td>评分组件</td></tr><tr><td>ImageView</td><td>图片显示组件</td></tr><tr><td>ImageButton</td><td>图片按钮</td></tr><tr><td>AutoCompleteTextView</td><td>自动完成文本组件</td></tr><tr><td>Dialog</td><td>对话框组件</td></tr><tr><td>Toast</td><td>信息提示框组件</td></tr><tr><td>Menu</td><td>菜单显示组件</td></tr></tbody></table><p> <strong>样式复用</strong></p><p> 在values目录下定义样式表styles.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AppBaseTheme&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;android:Theme.Light&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;textViewStyle&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;AppBaseTheme&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- All customizations that are NOT specific to a particular API-level can go here. --&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">item</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:textSize&quot;</span>&gt;</span>20px<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:textColor&quot;</span>&gt;</span>#FF00<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:autoLink&quot;</span>&gt;</span>all<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:textStyle&quot;</span>&gt;</span>bold<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:layout_width&quot;</span>&gt;</span>wrap_content<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:layout_height&quot;</span>&gt;</span>wrap_content<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 组件引用该style --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span>  </span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/myText7&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/textViewStyle&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;网址:www.baidu.com&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 在AndroidManifest.xml中声明该style--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">application</span> <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/textViewStyle&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br><br><br><br></code></pre></td></tr></table></figure><h4 id="8-2：布局"><a href="#8-2：布局" class="headerlink" title="8.2：布局"></a>8.2：布局</h4><h5 id="8-2-1：LinearLayout线性布局"><a href="#8-2-1：LinearLayout线性布局" class="headerlink" title="8.2.1：LinearLayout线性布局"></a>8.2.1：LinearLayout线性布局</h5><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/15116314.jpg"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/15116314.jpg" alt="img"></a></p><p> weight计算</p><p> 组件使用<strong>wrap_content</strong>直接按照比例计算</p><p> 组件使用<strong>fill_parent</strong>时</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">根据 <span class="hljs-number">1</span> - <span class="hljs-number">2</span>*（所占比列）计算，如 <span class="hljs-number">1</span>：<span class="hljs-number">2</span>：<span class="hljs-number">3</span>，则第一个组件所占比列为 <span class="hljs-number">1</span> - <span class="hljs-number">2</span>*(<span class="hljs-number">1</span><span class="hljs-regexp">/(1+2+3)) = 2/</span><span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><p> 分割线</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 使用如下代码可以在组件之间添加分割线</span><br><span class="hljs-comment">&lt;View</span><br><span class="hljs-comment">      android:layout_width=&quot;match_parent&quot;</span><br><span class="hljs-comment">      android:layout_height=&quot;1px&quot;</span><br><span class="hljs-comment">      android:background=&quot;#000000&quot; /&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h5 id="8-2-2：RelativeLayout相对布局"><a href="#8-2-2：RelativeLayout相对布局" class="headerlink" title="8.2.2：RelativeLayout相对布局"></a>8.2.2：RelativeLayout相对布局</h5><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/797932661-1.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/797932661-1.png" alt="img"></a></p><h5 id="8-2-3：TableLayout表格布局"><a href="#8-2-3：TableLayout表格布局" class="headerlink" title="8.2.3：TableLayout表格布局"></a>8.2.3：TableLayout表格布局</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs XML">//确定行列数<br>①如果我们直接往TableLayout中添加组件的话,那么这个组件将占满一行！！！<br>②如果我们想一行上有多个组件的话,就要添加一个TableRow的容器,把组件都丢到里面！<br>③tablerow中的组件个数就决定了该行有多少列,而列的宽度由该列中最宽的单元格决定<br>④tablerow的layout_width属性,默认是fill_parent的,我们自己设置成其他的值也不会生效！！！ 但是layout_height默认是wrapten——content的,我们却可以自己设置大小！<br>⑤整个表格布局的宽度取决于父容器的宽度(占满父容器本身)<br>⑥有多少行就要自己数啦,一个tablerow一行,一个单独的组件也一行！多少列则是看tableRow中 的组件个数,组件最多的就是TableLayout的列数<br><br><br>//常用属性<br>android:collapseColumns:设置需要被隐藏的列的序号<br>android:shrinkColumns:设置允许被收缩的列的列序号<br>android:stretchColumns:设置运行被拉伸的列的列序号<br><br>以上这三个属性的列号都是从0开始算的,比如shrinkColunmns = &quot;2&quot;,对应的是第三列！<br>可以设置多个,用逗号隔开比如&quot;0,2&quot;,如果是所有列都生效,则用&quot;*&quot;号即可<br>除了这三个常用属性,还有两个属性,分别就是跳格子以及合并单元格,这和HTML中的Table类似:<br><br>android:layout_column=&quot;2&quot;:表示的就是跳过第二个,直接显示到第三个格子处,从1开始算的!<br>android:layout_span=&quot;4&quot;:表示合并4个单元格,也就说这个组件占4个单元格<br><br>JAVA<br><span class="hljs-tag">&lt;<span class="hljs-name">TableLayout</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/TableLayout2&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;fill_parent&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">    <span class="hljs-attr">android:collapseColumns</span>=<span class="hljs-string">&quot;0,2&quot;</span> &gt;</span>  <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TableRow</span>&gt;</span>  <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span>  <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;two&quot;</span> /&gt;</span>  <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;three&quot;</span> /&gt;</span>  <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;four&quot;</span> /&gt;</span>  <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>  </span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;five&quot;</span> /&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">TableRow</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">TableLayout</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-12_16-02-59.png"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/Snipaste_2023-07-12_16-02-59.png" alt="Snipaste_2023-07-12_16-02-59"></a></p><p>Snipaste_2023-07-12_16-02-59</p><h5 id="8-2-4：FrameLayout帧布局"><a href="#8-2-4：FrameLayout帧布局" class="headerlink" title="8.2.4：FrameLayout帧布局"></a>8.2.4：FrameLayout帧布局</h5><p> <strong>直接在屏幕上开辟出一块空白的区域,当我们往里面添加控件的时候,会默认把他们放到这块区域的左上角,而这种布局方式却没有任何的定位方式,所以它应用的场景并不多;帧布局的大小由控件中最大的子控件决定,如果控件的大小一样大的话,那么同一时刻就只能看到最上面的那个组件</strong>!后续添加的控件会覆盖前一个!虽然默认会将控件放置在左上角,但是我们也可以通过layout_gravity属性,指定到其他的位置</p><h5 id="8-2-5：GridLayout网格布局"><a href="#8-2-5：GridLayout网格布局" class="headerlink" title="8.2.5：GridLayout网格布局"></a>8.2.5：GridLayout网格布局</h5><p> 与TableLayout类似。相比其多了许多功能，如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1.可以自己设置布局中组件的排列方式<br>2.可以自定义网格布局有多少行,多少列<br>3.可以直接设置组件位于某行某列<br>4.可以设置组件横跨几行或者几列<br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/D07C612B-0DB8-4775-8045-9318F73C0B13.jpeg"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/D07C612B-0DB8-4775-8045-9318F73C0B13.jpeg" alt="img"></a></p><h5 id="8-2-6：AbsoluteLayout绝对布局"><a href="#8-2-6：AbsoluteLayout绝对布局" class="headerlink" title="8.2.6：AbsoluteLayout绝对布局"></a>8.2.6：AbsoluteLayout绝对布局</h5><p> 不建议使用，其是通过坐标的方式定位位置的，在不同尺寸的屏幕上都会导致出现组件撕裂的状况</p><h3 id="9：事件处理机制"><a href="#9：事件处理机制" class="headerlink" title="9：事件处理机制"></a>9：事件处理机制</h3><h4 id="9-1：基于监听"><a href="#9-1：基于监听" class="headerlink" title="9.1：基于监听"></a>9.1：基于监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匿名内部类的方式</span><br>findViewById(R.id.custom).setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>...<br>        <br>&#125;);<br><br><br></code></pre></td></tr></table></figure><h4 id="9-2：基于回调"><a href="#9-2：基于回调" class="headerlink" title="9.2：基于回调"></a>9.2：基于回调</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        findViewById(R.id.custom).setOnKeyListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnKeyListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onKey</span><span class="hljs-params">(View view, <span class="hljs-type">int</span> i, KeyEvent keyEvent)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;view.onKeyDownz&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onKeyDown</span><span class="hljs-params">(<span class="hljs-type">int</span> keyCode, KeyEvent event)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;activity.onKey&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onKeyDown(keyCode, event);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//回调方法返回值为false时，会继续往上传播，view --&gt; activity 直到返回true终止</span><br><br><br></code></pre></td></tr></table></figure><h4 id="9-3：Handler消息传递机制"><a href="#9-3：Handler消息传递机制" class="headerlink" title="9.3：Handler消息传递机制"></a>9.3：Handler消息传递机制</h4><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/90456225.jpg"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/90456225.jpg" alt="img"></a></p><p> 安卓规定UI组件只能在自己的线程中进行操作，避免多线程操作UI组件的并发问题，使得其他线程想操作其他线程中的UI组件时无能为力，直到Handler出现</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">UI线程:就是我们的主线程,系统在创建UI线程的时候会初始化一个Looper对象,同时也会创建一个与其关联的MessageQueue;</span><br><br><span class="hljs-section">Handler:作用就是发送与处理信息,如果希望Handler正常工作,在当前线程中要有一个Looper对象</span><br><br><span class="hljs-section">Message:Handler接收与处理的消息对象</span><br><br><span class="hljs-section">MessageQueue:消息队列,先进先出管理Message,在初始化Looper对象时会创建一个与之关联的MessageQueue;</span><br><br><span class="hljs-section">Looper:每个线程只能够有一个Looper,管理MessageQueue,不断地从中取出Message分发给对应的Handler处理</span><br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/25345060.jpg"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/25345060.jpg" alt="img"></a></p><p> 简而言之就是，当我们的子线程想要修改activity中的ui组件时，可以通过Handler对象发送一个Message到activity线程中的MessageQueue中等待，由其中的Looper取出Message并分发给Handler处理</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Text">void handleMessage(Message msg):处理消息的方法,通常是用于被重写<br><br>sendEmptyMessage(int what):发送空消息<br><br>sendEmptyMessageDelayed(int what,long delayMillis):指定延时多少毫秒后发送空信息<br><br>sendMessage(Message msg):立即发送信息<br><br>sendMessageDelayed(Message msg):指定延时多少毫秒后发送信息<br><br>final boolean hasMessage(int what):检查消息队列中是否包含what属性为指定值的消息 如果是参数为(int what,Object object):除了判断what属性,还需要判断Object属性是否为指定对象的消息<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//在主线程中使用Handler</span><br><span class="hljs-comment">//主线程中，已经初始化了Looper对象，直接实例化Handler即可使用</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WHAT</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><br>    <span class="hljs-keyword">private</span> EditText text;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>()&#123;<br>        <span class="hljs-meta">@SuppressLint(&quot;HandlerLeak&quot;)</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> &#123;<br>            List&lt;Integer&gt; list =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">if</span>(WHAT == msg.what)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">upper</span> <span class="hljs-operator">=</span> msg.getData().getInt(<span class="hljs-string">&quot;upper&quot;</span>);<br>                outer:<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= upper; i++)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= Math.sqrt(i); j++)&#123;<br>                        <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123;<br>                            <span class="hljs-keyword">continue</span> outer;<br>                        &#125;<br>                    &#125;<br>                    list.add(i);<br>                &#125;<br>            &#125;<br><br>            System.out.println(list.toString());<br>        &#125;<br>    &#125;;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        text = findViewById(R.id.etNum);<br><br>        findViewById(R.id.btn).setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                cal(view);<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(View view)</span>&#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.what = WHAT;<br><br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>        bundle.putInt(<span class="hljs-string">&quot;upper&quot;</span>,Integer.parseInt(text.getText().toString()));<br><br>        message.setData(bundle);<br>        handler.sendMessage(message);<br>    &#125;<br>&#125;<br><br>JAVA<br><span class="hljs-comment">//在子线程中使用handler</span><br><span class="hljs-comment">//子线程中需要自己实例化Looper</span><br><br><span class="hljs-comment">//子线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-keyword">public</span> Handler handler;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        Looper.prepare();<br>        handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> &#123;<br>                <span class="hljs-keyword">if</span>(msg.what == <span class="hljs-number">11</span>)&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">upper</span> <span class="hljs-operator">=</span> msg.getData().getInt(<span class="hljs-string">&quot;upper&quot;</span>);<br>                    outer:<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= upper; j++)&#123;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= Math.sqrt(j); i++)&#123;<br>                            <span class="hljs-keyword">if</span>(j % i == <span class="hljs-number">0</span>)&#123;<br>                                <span class="hljs-keyword">continue</span> outer;<br>                            &#125;<br>                        &#125;<br>                        list.add(j);<br>                    &#125;<br>                    System.out.println(Thread.currentThread().getName());<br>                    System.out.println(list.toString());<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        Looper.loop();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//主线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WHAT</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br><br>    <span class="hljs-keyword">private</span> MyThread thread;<br><br>    <span class="hljs-keyword">private</span> EditText text;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        text = findViewById(R.id.etNum);<br><br>        thread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        thread.start();<br>        findViewById(R.id.btn).setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                cal(view);<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(View view)</span>&#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.what = WHAT;<br><br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>        bundle.putInt(<span class="hljs-string">&quot;upper&quot;</span>,Integer.parseInt(text.getText().toString()));<br><br>        message.setData(bundle);<br>        thread.handler.sendMessage(message);<br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="9-4：AsyncTask异步"><a href="#9-4：AsyncTask异步" class="headerlink" title="9.4：AsyncTask异步"></a>9.4：AsyncTask异步</h4><p> 与Handler类似用来处理异步任务，不过其使用线程池的方式，且代码量较少</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">AsyncTask&lt;Params,progress,Result&gt;<br>Params: 启动任务入参<br><span class="hljs-keyword">progress: </span>后台执行任务的百分比<br>Result: 后台执行任务的返回结果<br><br></code></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/27686655.jpg"><img src="https://raw.githubusercontent.com/lier-ok/typora_pic/main/img/27686655.jpg" alt="img"></a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">注意事项:<br><span class="hljs-number">1.</span>Task实例必须在UI线程中创建<br><span class="hljs-number">2.</span>execute方法必须在UI线程中调用<br><span class="hljs-number">3.</span>不要手动的调用on<span class="hljs-constructor">PreExecute()</span>. on<span class="hljs-constructor">PostExecute(Result)</span>. <span class="hljs-keyword">do</span><span class="hljs-constructor">InBackground(<span class="hljs-params">params</span><span class="hljs-operator">...</span>)</span>. on<span class="hljs-constructor">ProgressUpdate(Progress<span class="hljs-operator">...</span>)</span>这些方法<br><span class="hljs-number">4.</span>task只能执行一次，多次调用会出现异常<br></code></pre></td></tr></table></figure><p> <strong>以上Handler和AsyncTask实现异步的方案在安卓11已被废弃</strong>，可使用Executors替代</p><h3 id="10：网络编程"><a href="#10：网络编程" class="headerlink" title="10：网络编程"></a>10：网络编程</h3>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CICD</title>
    <link href="/2023/07/27/CICD/"/>
    <url>/2023/07/27/CICD/</url>
    
    <content type="html"><![CDATA[<h2 id="CI-CD持续集成部署"><a href="#CI-CD持续集成部署" class="headerlink" title="CI&#x2F;CD持续集成部署"></a>CI&#x2F;CD持续集成部署</h2><h3 id="1-什么是CI-CD"><a href="#1-什么是CI-CD" class="headerlink" title="1.什么是CI&#x2F;CD"></a>1.什么是CI&#x2F;CD</h3><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209291022451.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209291022451.png" alt="20210319113044888"></a></p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209291023602.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209291023602.png" alt="20210319113116891"></a></p><h3 id="2-搭建gitLab仓库"><a href="#2-搭建gitLab仓库" class="headerlink" title="2.搭建gitLab仓库"></a>2.搭建gitLab仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">1.创建目录</span><br>/home/gitlab/config<br>/home/gitlab/logs<br>/home/gitlab/data<br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.启动容器后,将对应文件复制到挂在目录下,删除容器</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3.创建启动容器</span><br>sudo docker run --detach \<br>  --hostname 10.3.0.88 \<br>  --publish 9001:80 \<br>  --name gitlab \<br>  --restart always \<br>  --volume /home/gitlab/config:/etc/gitlab \<br>  --volume /home/gitlab/logs:/var/log/gitlab \<br>  --volume /home/gitlab/data:/var/opt/gitlab \<br>  gitlab/gitlab-ce:latest<br><span class="hljs-meta prompt_">#</span><span class="language-bash">4.进入容器,充值root用户密码</span><br>user = User.where(id: 1).first<br>user.password=&#x27;rootroot&#x27;<br>user.password_confirmation=&#x27;rootroot&#x27;<br>user.save!<br><span class="hljs-meta prompt_">#</span><span class="language-bash">5.登录</span><br><br><br></code></pre></td></tr></table></figure><h3 id="3-搭建docker镜像仓库"><a href="#3-搭建docker镜像仓库" class="headerlink" title="3.搭建docker镜像仓库"></a>3.搭建docker镜像仓库</h3><h4 id="3-1下载tgz文件"><a href="#3-1下载tgz文件" class="headerlink" title="3.1下载tgz文件"></a>3.1<strong>下载tgz文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">wget https://github.com/goharbor/harbor/releases/download/v2.2.0/harbor-offline-installer-v2.2.0.tgz<br><br><br></code></pre></td></tr></table></figure><h4 id="3-2解压"><a href="#3-2解压" class="headerlink" title="3.2解压"></a>3.2<strong>解压</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">tar -zxvf harbor-offline-installer-v2.2.0.tgz<br><br><br></code></pre></td></tr></table></figure><h4 id="3-3修改配置文件"><a href="#3-3修改配置文件" class="headerlink" title="3.3修改配置文件"></a>3.3<strong>修改配置文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">打开配置文件</span><br>cd harbor<br>cp harbor.yml.tmpl harbor.yml<br>vim harbor.yml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改如下即可</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">注释掉https相关,使用http访问</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">https related config</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">https:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">https port <span class="hljs-keyword">for</span> harbor, default is 443</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">port: 443</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">The path of cert and key files <span class="hljs-keyword">for</span> nginx</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">certificate: /your/certificate/path</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">private_key: /your/private/key/path</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">访问ip</span><br>hostname: $&#123;ip&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动端口</span><br>http:<br><span class="hljs-meta prompt_"># </span><span class="language-bash">port <span class="hljs-keyword">for</span> http, default is 80. If https enabled, this port will redirect to https port</span><br> port: $&#123;port&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">amdin账户密码</span><br>harbor_admin_password: $&#123;password&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="3-4启动运行"><a href="#3-4启动运行" class="headerlink" title="3.4启动运行"></a>3.4<strong>启动运行</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">cd harbor<br>./prepare<br>./install.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">后续启动运行</span><br>docker-compose down<br>docker-compose up -d<br><br><br>问题: 登录时核心服务不可用<br>删除redis的持久化文件dump即可<br><br><br></code></pre></td></tr></table></figure><h4 id="3-5设置向私有仓库中提交镜像"><a href="#3-5设置向私有仓库中提交镜像" class="headerlink" title="3.5设置向私有仓库中提交镜像"></a>3.5<strong>设置向私有仓库中提交镜像</strong></h4><p> 1.修改daemon.json文件，加入镜像仓库地址端口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ip&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br><br><br></code></pre></td></tr></table></figure><p> 2.测试镜像下拉和提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">登录harbor</span><br>docker login ip:port<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">构建镜像 镜像格式：ip/项目名/镜像名/版本tag</span><br>docker build -t 10.3.0.88/cicd/cicd/1.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上传镜像</span><br>docker push 10.3.0.88/cicd/cicd/1.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下拉镜像</span><br>docker pull 10.3.0.88/cicd/cicd/1.0<br><br><br></code></pre></td></tr></table></figure><p> 3.镜像仓库如图：</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071049013.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071049013.jpg" alt="Dingtalk_20221007104753"></a></p><h3 id="4-搭建jekins"><a href="#4-搭建jekins" class="headerlink" title="4: 搭建jekins"></a>4: 搭建jekins</h3><h4 id="4-1：jekins安装"><a href="#4-1：jekins安装" class="headerlink" title="4.1：jekins安装"></a>4.1：jekins安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">拉取镜像</span><br>docker pull jenkinsci/blueocean<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">运行</span><br>docker run -itd -u root -p 8080:8080 -p 50000:50000 -v v1:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock --name=jenkins  jenkinsci/blueocean<br><br><br><br></code></pre></td></tr></table></figure><p> 进入jekins如图</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071334225.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071334225.jpg" alt="Dingtalk_20221007133201"></a></p><p> 获取密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看jenkins密码</span><br>docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword<br><br><br></code></pre></td></tr></table></figure><h4 id="4-2-安装插件"><a href="#4-2-安装插件" class="headerlink" title="4.2: 安装插件"></a>4.2: 安装插件</h4><p> 系统管理—&gt; 插件管理 —-&gt; 可选插件，搜索Publish Over SSH</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071441860.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071441860.jpg" alt="Dingtalk_20221007143300"></a></p><h4 id="4-3-配置服务器信息"><a href="#4-3-配置服务器信息" class="headerlink" title="4.3:配置服务器信息"></a>4.3:配置服务器信息</h4><p> 系统管理—&gt; 系统配置—&gt; 登录</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071556749.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071556749.jpg" alt="Dingtalk_20221007155611"></a></p><p>Dingtalk_20221007155611</p><h3 id="5-实现CI-CD"><a href="#5-实现CI-CD" class="headerlink" title="5: 实现CI&#x2F;CD"></a>5: 实现CI&#x2F;CD</h3><h4 id="5-1-新建任务"><a href="#5-1-新建任务" class="headerlink" title="5.1: 新建任务"></a>5.1: 新建任务</h4><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071751906.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071751906.jpg" alt="Dingtalk_20221007160529"></a></p><h4 id="5-2-配置任务"><a href="#5-2-配置任务" class="headerlink" title="5.2: 配置任务"></a>5.2: 配置任务</h4><p> 配置仓库地址，已经git账户<a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071752318.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071752318.jpg" alt="Dingtalk_20221007172802"></a></p><p>Dingtalk_20221007172802</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071753867.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071753867.jpg" alt="Dingtalk_20221007172833"></a></p><p> 配置触发器</p><p> 如果没有该选项，安装gitLab插件即可</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071754064.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071754064.jpg" alt="Dingtalk_20221007174919"></a> <a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071755401.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210071755401.jpg" alt="Dingtalk_20221007174947"></a></p><h4 id="5-3-配置webHooks"><a href="#5-3-配置webHooks" class="headerlink" title="5.3: 配置webHooks"></a>5.3: 配置webHooks</h4><p> <strong>1：设置jekins的全局安全配置 系统管理—&gt; 系统全局安全配置</strong></p><p> <strong>2. 勾选图中选项</strong></p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081501467.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081501467.jpg" alt="Dingtalk_20221008103416"></a></p><p>Dingtalk_20221008103416</p><p><strong>3.去除图中勾选</strong></p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081502716.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081502716.jpg" alt="Dingtalk_20221008145841"></a></p><p> <strong>4.在gitLab仓库配置webHooks 设置 —&gt; webHooks</strong><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081504386.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081504386.jpg" alt="Dingtalk_20221008150347"></a></p><p>Dingtalk_20221008150347</p><p> <em><strong>注意：</strong></em>其中网址(url)和secret令牌必须与jekins构建任务时一致，如下图</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081509474.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081509474.jpg" alt="Dingtalk_20221008145909"></a></p><p>Dingtalk_20221008145909</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081510453.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081510453.jpg" alt="Dingtalk_20221008150627"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>集成部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2023/07/27/Docker/"/>
    <url>/2023/07/27/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h4 id="1-docker入门"><a href="#1-docker入门" class="headerlink" title="1:docker入门"></a>1:docker入门</h4><h5 id="1-1-虚拟化和容器化技术对比"><a href="#1-1-虚拟化和容器化技术对比" class="headerlink" title="1.1 虚拟化和容器化技术对比"></a>1.1 虚拟化和容器化技术对比</h5><p> 虚拟化技术的缺点:资源占用十分多,冗余步骤多,启动很慢</p><h5 id="1-2-比较Docker和虚拟化技术的不同"><a href="#1-2-比较Docker和虚拟化技术的不同" class="headerlink" title="1.2 比较Docker和虚拟化技术的不同"></a>1.2 比较Docker和虚拟化技术的不同</h5><p> 传统虚拟机， 虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件<br>​ 容器内的应用直接运行在宿主机的内部，容器是没有自己的内核的，也没有虚拟硬件，所以轻便<br>​ 每个容器间是相互隔离的，每个容器内都有一个属于自己的文件系统，互不影响<br>​ 应用更快速的交互和部署</p><p> 传统：一堆帮助文档，安装程序<br>​ Docker： 打包镜像发布测试，一键运行<br>​ 更便捷的升级和扩缩容<br>​ 更简的系统运维<br>​ 更高效的计算资源利用</p><h5 id="1-3-基本底层原理"><a href="#1-3-基本底层原理" class="headerlink" title="1.3 基本底层原理"></a>1.3 基本底层原理</h5><p>底层原理</p><p> Docker Engine是一个客户端-服务器应用程序，具有以下主要组件:</p><p> 一个服务器，它是一种长期运行的程序，称为守护进程(dockerd命令)<br>​ 一个REST API，它指定程序可以用来与守护进程对话并指示它做什么的接口。<br>​ Docker是一个Client Server结构的系统，Docker守护进程运行在主机上，然后通过Socket连接从客户 端访问，守护进程从客户端接受 命令并管理运行在主机上的容器。</p><h5 id="1-4-相关名词"><a href="#1-4-相关名词" class="headerlink" title="1.4 相关名词"></a>1.4 相关名词</h5><p>①镜像（image）</p><p> Docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，tomcat镜像 &#x3D;&#x3D;&#x3D;&gt; run &#x3D;&#x3D;&#x3D;&gt; tomcat01容器， 通过这个镜像可以 创建多个容器（最终服务运行或者项目运行就是在容器中的）</p><p>②容器（container）<br>Docker利用容器技术，独立运行一个或者一组应用， 通过镜像来创建的<br>启动，停止，删除，基本命令！<br>就目前可以把这个容器理解为一个建议的linux系统</p><p>③仓库（repository）<br>存放镜像的地方<br>Docker Hub（默认是国外的）<br>阿里云,,,都有容器服务（配置镜像加速！）</p><h4 id="2-docker常用命令"><a href="#2-docker常用命令" class="headerlink" title="2 docker常用命令"></a>2 docker常用命令</h4><h5 id="2-1-帮助命令"><a href="#2-1-帮助命令" class="headerlink" title="2.1 :帮助命令"></a>2.1 :帮助命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">docker version  # docker版本信息<br>docker info     # 系统级别的信息，包括镜像和容器的数量<br>docker 命令 --help <br><br><br></code></pre></td></tr></table></figure><h5 id="2-2-镜像命令"><a href="#2-2-镜像命令" class="headerlink" title="2.2 :镜像命令"></a>2.2 :镜像命令</h5><h6 id="2-2-1-docker-images-查看所有本地主机上的镜像"><a href="#2-2-1-docker-images-查看所有本地主机上的镜像" class="headerlink" title="2.2.1 docker images 查看所有本地主机上的镜像"></a>2.2.1 docker images 查看所有本地主机上的镜像</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>hello-world         latest              bf756fb1ae65        7 months ago        13.3kB<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解释</span><br>REPOSITORY      # 镜像的仓库<br>TAG             # 镜像的标签<br>IMAGE ID        # 镜像的ID<br>CREATED         # 镜像的创建时间<br>SIZE            # 镜像的大小<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可选项</span><br>--all , -a      # 列出所有镜像<br>--quiet , -q    # 只显示镜像的id<br><br><br></code></pre></td></tr></table></figure><h6 id="2-2-2-docker-search-查找镜像"><a href="#2-2-2-docker-search-查找镜像" class="headerlink" title="2.2.2 docker search 查找镜像"></a>2.2.2 docker search 查找镜像</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">可选项</span><br>--filter=STARS=3000     # 搜素出来的镜像就是STARS大于3000的<br>docker search mysql --filter=STARS=3000 #查询收藏大于3000的镜像<br><br><br></code></pre></td></tr></table></figure><h6 id="2-2-3-docker-pull-下拉镜像"><a href="#2-2-3-docker-pull-下拉镜像" class="headerlink" title="2.2.3 docker pull 下拉镜像"></a>2.2.3 docker pull 下拉镜像</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载镜像，docker pull 镜像名[:tag] tag必须在官网支持版本中</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker pull mysql<br>Using default tag: latest           # 如果不写tag，默认就是latest<br>latest: Pulling from library/mysql<br>bf5952930446: Pull complete         # 分层下载，docker images的核心，联合文件系统<br>8254623a9871: Pull complete <br>938e3e06dac4: Pull complete <br>ea28ebf28884: Pull complete <br>f3cef38785c2: Pull complete <br>894f9792565a: Pull complete <br>1d8a57523420: Pull complete <br>6c676912929f: Pull complete <br>ff39fdb566b4: Pull complete <br>fff872988aba: Pull complete <br>4d34e365ae68: Pull complete <br>7886ee20621e: Pull complete <br>Digest: sha256:c358e72e100ab493a0304bda35e6f239db2ec8c9bb836d8a427ac34307d074ed     # 签名<br>Status: Downloaded newer image for mysql:latest<br>docker.io/library/mysql:latest      # 真实地址<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">等价于</span><br>docker pull mysql<br>docker pull docker.io/library/mysql:latest<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定版本下载</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker pull mysql:5.7<br>5.7: Pulling from library/mysql<br>bf5952930446: Already exists   #已经在上面下载过了,无需下载----&gt; 分层下载<br>8254623a9871: Already exists <br>938e3e06dac4: Already exists <br>ea28ebf28884: Already exists <br>f3cef38785c2: Already exists <br>894f9792565a: Already exists <br>1d8a57523420: Already exists <br>5f09bf1d31c1: Pull complete <br>1b6ff254abe7: Pull complete <br>74310a0bf42d: Pull complete <br>d398726627fd: Pull complete <br>Digest: sha256:da58f943b94721d46e87d5de208dc07302a8b13e638cd1d24285d222376d6d84<br>Status: Downloaded newer image for mysql:5.7<br>docker.io/library/mysql:5.7  #镜像真实地址<br><br><br></code></pre></td></tr></table></figure><h6 id="2-2-4-docker-rmi-删除镜像"><a href="#2-2-4-docker-rmi-删除镜像" class="headerlink" title="2.2.4 docker rmi 删除镜像"></a>2.2.4 docker rmi 删除镜像</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker rmi -f IMAGE ID                        # 删除指定镜像<br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker rmi -f IMAGE ID1 IMAGE ID2 IMAGE ID3   # 删除多个镜像<br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker rmi -f $(docker images -aq)            # 删除所有镜像<br><br><br></code></pre></td></tr></table></figure><h5 id="2-3-容器命令"><a href="#2-3-容器命令" class="headerlink" title="2.3 容器命令"></a>2.3 容器命令</h5><h6 id="2-3-1-新建容器并启动"><a href="#2-3-1-新建容器并启动" class="headerlink" title="2.3.1 新建容器并启动"></a>2.3.1 新建容器并启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">docker run [可选参数] image<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数说明</span><br>--name=“Name”   容器名字    tomcat01    tomcat02    用来区分容器<br>-d      后台方式运行<br>-it     使用交互方式运行，进入容器查看内容<br>-p      指定容器的端口     -p 8080:8080<br>    -p  ip:主机端口：容器端口<br>    -p  主机端口：容器端口（常用）<br>    -p  容器端口<br>    容器端口<br>-p      随机指定端口<br> <br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试，启动并进入容器</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker run -it centos /bin/bash<br>[root@74e82b7980e7 /]# ls   # 查看容器内的centos，基础版本，很多命令是不完善的<br>bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var<br>dev  home  lib64  media       opt  root  sbin  sys  usr<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">从容器中退回主机</span><br>[root@77969f5dcbf9 /]# exit<br>exit<br>[root@iZ2zeg4ytp0whqtmxbsqiiZ /]# ls<br>bin   dev  fanfan  lib    lost+found  mnt  proc  run   srv  tmp  var<br>boot  etc  home    lib64  media       opt  root  sbin  sys  usr<br><br><br></code></pre></td></tr></table></figure><h6 id="2-3-2-列出所有的运行的容器"><a href="#2-3-2-列出所有的运行的容器" class="headerlink" title="2.3.2 列出所有的运行的容器"></a>2.3.2 列出所有的运行的容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker ps 命令</span><br>        # 列出当前正在运行的容器<br>-a      # 列出正在运行的容器包括历史容器<br>-n=?    # 显示最近创建的容器 ?为数字,表示近几个<br>-q      # 只显示当前容器的编号<br> <br>[root@iZ2zeg4ytp0whqtmxbsqiiZ /]# docker ps<br>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<br>[root@iZ2zeg4ytp0whqtmxbsqiiZ /]# docker ps -a<br>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES<br>77969f5dcbf9        centos              &quot;/bin/bash&quot;         5 minutes ago       Exited (0) 5 minutes ago                       xenodochial_bose<br>74e82b7980e7        centos              &quot;/bin/bash&quot;         16 minutes ago      Exited (0) 6 minutes ago                       silly_cori<br>a57250395804        bf756fb1ae65        &quot;/hello&quot;            7 hours ago         Exited (0) 7 hours ago                         elated_nash<br>392d674f4f18        bf756fb1ae65        &quot;/hello&quot;            8 hours ago         Exited (0) 8 hours ago                         distracted_mcnulty<br>571d1bc0e8e8        bf756fb1ae65        &quot;/hello&quot;            23 hours ago        Exited (0) 23 hours ago                        magical_burnell<br> <br>[root@iZ2zeg4ytp0whqtmxbsqiiZ /]# docker ps -qa<br>77969f5dcbf9<br>74e82b7980e7<br>a57250395804<br>392d674f4f18<br>571d1bc0e8e8<br><br><br></code></pre></td></tr></table></figure><h6 id="2-3-3-退出容器"><a href="#2-3-3-退出容器" class="headerlink" title="2.3.3 退出容器"></a>2.3.3 退出容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">exit            # 直接退出容器并关闭<br>Ctrl + P + Q    # 容器不关闭退出<br><br><br></code></pre></td></tr></table></figure><h6 id="2-3-4-删除容器"><a href="#2-3-4-删除容器" class="headerlink" title="2.3.4 删除容器"></a>2.3.4 删除容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">docker rm -f 容器id                       # 删除指定容器<br>docker rm -f $(docker ps -aq)       # 删除所有容器<br>docker ps -a -q|xargs docker rm -f  # 删除所有的容器<br><br><br></code></pre></td></tr></table></figure><h6 id="2-3-5-启动和停止容器的操作"><a href="#2-3-5-启动和停止容器的操作" class="headerlink" title="2.3.5 启动和停止容器的操作"></a>2.3.5 启动和停止容器的操作</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">docker start 容器id           # 启动容器<br>docker restart 容器id         # 重启容器<br>docker stop 容器id            # 停止当前正在运行的容器<br>docker kill 容器id            # 强制停止当前的容器<br><br><br></code></pre></td></tr></table></figure><h4 id="2-4-其他常用命令"><a href="#2-4-其他常用命令" class="headerlink" title="2.4 其他常用命令"></a>2.4 其他常用命令</h4><h6 id="2-4-1-注意点"><a href="#2-4-1-注意点" class="headerlink" title="2.4.1 注意点"></a>2.4.1 注意点</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">命令 docker run -d 镜像名</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ /]# docker run -d centos<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">问题 docker ps， 发现centos停止了</span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">常见的坑， docker 容器使用后台运行， 就必须要有一个前台进程，docker发现没有应用，就会自动停止</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx， 容器启动后，发现自己没有提供服务，就会立即停止，就是没有程序了</span><br><br><br></code></pre></td></tr></table></figure><h6 id="2-4-2-查看日志"><a href="#2-4-2-查看日志" class="headerlink" title="2.4.2 查看日志"></a>2.4.2 查看日志</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">后台运行容器并写入运行shell脚本</span><br>[root@hadoop1 ~]# docker run -d centos /bin/sh &quot;while true;do echo test;sleep 1;done&quot;<br>949b9679a8907627a95171b99482abed59714a4d5a21354c52ad8708578a07dd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询正在运行的容器</span><br>[root@hadoop1 ~]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES<br>44a6d67584d6   centos    &quot;/bin/sh -c &#x27;while t…&quot;   19 seconds ago   Up 18 seconds             awesome_cori<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看对应容器日志</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-tf 查看全部日志</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--<span class="hljs-built_in">tail</span> number 查看指定number条日志</span><br>[root@hadoop1 ~]# docker logs -tf 44a6d67584d6<br>2021-11-01T10:09:16.277847024Z test<br>2021-11-01T10:09:17.284248062Z test<br>2021-11-01T10:09:18.288563750Z test<br>2021-11-01T10:09:19.295090565Z test<br>2021-11-01T10:09:20.298176959Z test<br>2021-11-01T10:09:21.303277365Z test<br><br><br><br></code></pre></td></tr></table></figure><h6 id="2-4-3-查看容器中进程信息"><a href="#2-4-3-查看容器中进程信息" class="headerlink" title="2.4.3 查看容器中进程信息"></a>2.4.3 查看容器中进程信息</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">[root@hadoop1 ~]# docker top 44a6d67584d6(容器id)<br>UID                 PID                 PPID                C                   STIME               TTY     <br>root                17445               17425               0                   18:09               ?        root                17846               17445               0                   18:13               ?       <br><br><br></code></pre></td></tr></table></figure><h6 id="2-4-4-查看镜像的元数据"><a href="#2-4-4-查看镜像的元数据" class="headerlink" title="2.4.4 查看镜像的元数据"></a>2.4.4 查看镜像的元数据</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">[root@hadoop1 ~]# docker inspect 44a6d67584d6<br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;44a6d67584d6d8eb9f2533971853e47094ff1dd85ae8a112e4474860f28f6dc8&quot;,<br>        &quot;Created&quot;: &quot;2021-11-01T10:09:15.27493519Z&quot;,<br>        &quot;Path&quot;: &quot;/bin/sh&quot;,<br>        &quot;Args&quot;: [<br>            &quot;-c&quot;,<br>            &quot;while true;do echo test;sleep 1;done&quot;<br>        ],<br>        &quot;State&quot;: &#123;<br>            &quot;Status&quot;: &quot;running&quot;,<br>            &quot;Running&quot;: true,<br>            &quot;Paused&quot;: false,<br>            &quot;Restarting&quot;: false,<br>            &quot;OOMKilled&quot;: false,<br>            &quot;Dead&quot;: false,<br>            &quot;Pid&quot;: 17445,<br>            &quot;ExitCode&quot;: 0,<br>            &quot;Error&quot;: &quot;&quot;,<br>            &quot;StartedAt&quot;: &quot;2021-11-01T10:09:16.278907345Z&quot;,<br>            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;<br>        &#125;,<br>  ......等<br><br><br><br></code></pre></td></tr></table></figure><h6 id="2-4-5-进入当前正在运行的容器"><a href="#2-4-5-进入当前正在运行的容器" class="headerlink" title="2.4.5 进入当前正在运行的容器"></a>2.4.5 <strong>进入当前正在运行的容器</strong></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">[root@hadoop1 ~]# docker exec -it 44a6d67584d6 /bin/bash<br>[root@44a6d67584d6 /]# ls<br>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br><br>[root@hadoop1 ~]# docker attach 44a6d67584d6<br>test<br>test<br>test<br><br><br><br><br></code></pre></td></tr></table></figure><h6 id="2-4-6-从容器中拷贝文件到主机"><a href="#2-4-6-从容器中拷贝文件到主机" class="headerlink" title="2.4.6 从容器中拷贝文件到主机"></a>2.4.6 <strong>从容器中拷贝文件到主机</strong></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">先创建</span><br>[root@7967f3648636 home]# touch test.java<br>[root@7967f3648636 home]# ls<br>test.java<br><br>docker cp 容器id：容器内路径    目的地主机路径<br> <br>[root@iZ2zeg4ytp0whqtmxbsqiiZ /]# docker cp 7af535f807e0:/home/test.java /home<br><br><br></code></pre></td></tr></table></figure><h3 id="3-配置Nginx-和-Tomcat"><a href="#3-配置Nginx-和-Tomcat" class="headerlink" title="3 配置Nginx 和 Tomcat"></a>3 配置Nginx 和 Tomcat</h3><h5 id="3-1-nginx"><a href="#3-1-nginx" class="headerlink" title="3.1 nginx"></a>3.1 nginx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">拉取Nginx镜像</span><br>[root@hadoop1 ~]# docker pull nginx<br>Using default tag: latest<br>latest: Pulling from library/nginx<br>b380bbd43752: Pull complete <br>fca7e12d1754: Pull complete <br>745ab57616cb: Pull complete <br>a4723e260b6f: Pull complete <br>1c84ebdff681: Pull complete <br>858292fd2e56: Pull complete <br>Digest: sha256:644a70516a26004c97d0d85c7fe1d0c3a67ea8ab7ddf4aff193d9f301670cf36<br>Status: Downloaded newer image for nginx:latest<br>docker.io/library/nginx:latest<br>[root@hadoop1 ~]# docker images<br>REPOSITORY   TAG       IMAGE ID       CREATED       SIZE<br>nginx        latest    87a94228f133   2 weeks ago   133MB<br>centos       latest    5d0da3dc9764   6 weeks ago   231MB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">运行容器</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-d 后台运行</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">--name 给容器取别名</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-p 添加端口映射</span><br>[root@hadoop1 ~]# docker run -d --name nginx1 -p 3344:80 nginx<br>d168c9aa2b2ce062aba6d92c9650f13c036aa98bf37fd1952e7a7d4029aea13c<br>[root@hadoop1 ~]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                   NAMES<br>d168c9aa2b2c   nginx     &quot;/docker-entrypoint.…&quot;   9 seconds ago   Up 7 seconds   0.0.0.0:3344-&gt;80/tcp, :::3344-&gt;80/tcp   nginx1<br><br>docker run -d --name nginx01 -p 80:80 -v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/nginx/logs:/var/log/nginx nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过192.168.100.130:3344即可访问nginx</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以进入容器中修改对应配置文件----&gt;后续通过数据卷形式进行文件映射修改</span><br><br><br><br><br></code></pre></td></tr></table></figure><h5 id="3-2-tomcat"><a href="#3-2-tomcat" class="headerlink" title="3.2 tomcat"></a>3.2 tomcat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">拉取镜像</span><br>[root@hadoop1 ~]# docker pull tomcat<br>Using default tag: latest<br>latest: Pulling from library/tomcat<br>bb7d5a84853b: Pull complete <br>f02b617c6a8c: Pull complete <br>d32e17419b7e: Pull complete <br>c9d2d81226a4: Extracting  54.57MB/54.57MB<br>fab4960f9cd2: Download complete <br>da1c1e7baf6d: Download complete <br>1d2ade66c57e: Download complete <br>ea2ad3f7cb7c: Download complete <br>d75cb8d0a5ae: Download complete <br>76c37a4fffe6: Download complete <br>latest: Pulling from library/tomcat<br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="4-可视化工具-portainer"><a href="#4-可视化工具-portainer" class="headerlink" title="4 可视化工具(portainer)"></a>4 可视化工具(portainer)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ home]# curl localhost:8088<br>&lt;!DOCTYPE html<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> ng-app=<span class="hljs-string">&quot;portainer&quot;</span>&gt;</span><br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">外网访问 http://ip:8088</span> <br> <br><br><br></code></pre></td></tr></table></figure><h3 id="5-Docker原理"><a href="#5-Docker原理" class="headerlink" title="5 Docker原理"></a>5 Docker原理</h3><p> Docker镜像都是只读的，当容器启动时， 一个新的可写层被加载到镜像的顶部！</p><p> 这一层就是我们通常说的容器层， 容器之下的都叫做镜像层</p><p>理解: 拉取镜像后会有最底下的一层—&gt;镜像层 ,当通过修改变更后会在该层上加上一层 —&gt; 容器层</p><h3 id="6-提交自定义镜像"><a href="#6-提交自定义镜像" class="headerlink" title="6 提交自定义镜像"></a>6 提交自定义镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">docker commit 提交容器成为一个新的版本<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">命令和git 原理类似</span><br>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名：[TAG]<br> <br>docker commit -a=&quot;xiaofan&quot; -m=&quot;add webapps app&quot; d798a5946c1f tomcat007:1.0<br> <br><br><br></code></pre></td></tr></table></figure><h3 id="7-容器数据卷"><a href="#7-容器数据卷" class="headerlink" title="7 容器数据卷"></a>7 容器数据卷</h3><h5 id="7-1-使用数据卷"><a href="#7-1-使用数据卷" class="headerlink" title="7.1 使用数据卷"></a>7.1 使用数据卷</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker run -it -v 主机地址:容器地址 镜像名 /bin/bash</span><br>[root@hadoop1 ~]# docker run -it -v /home/ceshi:/home centos /bin/bash<br>[root@hadoop1 ~]# docker inspect 7f9c8191ddb0 #查询镜像详细信息<br> &quot;Mounts&quot;: [<br>            &#123;<br>                &quot;Type&quot;: &quot;bind&quot;,<br>                &quot;Source&quot;: &quot;/home/ceshi&quot;, #映射主机地址<br>                &quot;Destination&quot;: &quot;/home&quot;, #容器地址<br>                &quot;Mode&quot;: &quot;&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;rprivate&quot;<br>            &#125;<br>        ],<br><br><br><br><br></code></pre></td></tr></table></figure><h5 id="7-2-实战–-同步mysql数据"><a href="#7-2-实战–-同步mysql数据" class="headerlink" title="7.2 实战–&gt;同步mysql数据"></a>7.2 实战–&gt;同步mysql数据</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#-e MYSQL_ROOT_PASSWORD=密码 </span><br>[root@hadoop1 ~] docker run -d -p <span class="hljs-number">3344</span>:<span class="hljs-number">3306</span> -v <span class="hljs-regexp">/home/my</span>sql<span class="hljs-regexp">/conf:/</span>etc<span class="hljs-regexp">/mysql/</span>conf.d -v <span class="hljs-regexp">/home/my</span>sql<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/lib/my</span>sql -e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> --name mysql01 mysql:<span class="hljs-number">5.7</span><br><br>SHELL<br></code></pre></td></tr></table></figure><h5 id="7-3-具名挂载和匿名挂载"><a href="#7-3-具名挂载和匿名挂载" class="headerlink" title="7.3 具名挂载和匿名挂载"></a>7.3 具名挂载和匿名挂载</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">匿名挂载</span><br>-v 容器内路径<br>docker run -d -P --name nginx01 -v /etc/nginx nginx     # -P 随机指定端口<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">具名挂载</span><br>-v 卷名:容器内路径<br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx<br><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker volume ls #查看所有卷<br>DRIVER              VOLUME NAME<br>local               561b81a03506f31d45ada3f9fb7bd8d7c9b5e0f826c877221a17e45d4c80e096<br>local               36083fb6ca083005094cbd49572a0bffeec6daadfbc5ce772909bb00be760882<br>local               juming-nginx<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过-v 卷名：容器内的路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看一下这个卷</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker volume inspect juming-nginx</span><br> <br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker volume inspect juming-nginx #查看指定卷的详细信息<br>[<br>  &#123;<br>      &quot;CreatedAt&quot;: &quot;2020-08-12T18:15:21+08:00&quot;,<br>      &quot;Driver&quot;: &quot;local&quot;,<br>      &quot;Labels&quot;: null,<br>      &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;, #默认映射主机路径<br>      &quot;Name&quot;: &quot;juming-nginx&quot;,<br>      &quot;Options&quot;: null,<br>      &quot;Scope&quot;: &quot;local&quot;<br>  &#125;<br>]<br><br><br></code></pre></td></tr></table></figure><h3 id="8-初始化DockerFile"><a href="#8-初始化DockerFile" class="headerlink" title="8 初始化DockerFile"></a>8 初始化DockerFile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个dockerfile文件， 名字可以随机</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件的内容 指定（大写） 参数</span><br> <br>FROM centos<br> <br>VOLUME [&quot;volume01&quot;, &quot;volume02&quot;] #匿名挂载路径<br> <br>CMD echo &quot;----end----&quot;<br>CMD /bin/bash<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里的每一个命令都是镜像的一层！</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">docker build -f dockerfile文件绝对路径 -t 自定义镜像名 . (不要忘记一个点)</span><br><br>[root@iZ2vcb4sibyek91jif7g03Z dockerfile]# docker build -f /home/dockerfile/dockerfile01 -t lier/centos:1.0 .<br>Sending build context to Docker daemon  2.048kB<br>Step 1/4 : FROM centos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">5d0da3dc9764</span><br>Step 2/4 : VOLUME [&quot;vloume01&quot;,&quot;volume02&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 9550fd50fff9</span><br>Removing intermediate container 9550fd50fff9<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">790b5202eee3</span><br>Step 3/4 : CMD echo &quot;-------success--------&quot;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 59756290379d</span><br>Removing intermediate container 59756290379d<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">7ea7e620d7fa</span><br>Step 4/4 : CMD /bin/bash<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> da0c4b28015e</span><br>Removing intermediate container da0c4b28015e<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">68dcb8f250e4</span><br>Successfully built 68dcb8f250e4<br>Successfully tagged lier/centos:1.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">dockerfile文件中匿名挂载路径</span><br> &quot;Mounts&quot;: [<br>            &#123;<br>                &quot;Type&quot;: &quot;volume&quot;,<br>                &quot;Name&quot;: &quot;01f9bbe5582271a8349fa997263ba2e5189d683a8522cd64e4a94650fa4623b6&quot;,<br>                &quot;Source&quot;: &quot;/var/lib/docker/volumes/01f9bbe5582271a8349fa997263ba2e5189d683a8522cd64e4a94650fa4623b6/_data&quot;,<br>                &quot;Destination&quot;: &quot;vloume01&quot;,<br>                &quot;Driver&quot;: &quot;local&quot;,<br>                &quot;Mode&quot;: &quot;&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;&quot;<br>            &#125;,<br>            &#123;<br>                &quot;Type&quot;: &quot;volume&quot;,<br>                &quot;Name&quot;: &quot;14d4f110646e3490fc9cd8b44c533c391a8a764697cef969cab6d27a7ae94df4&quot;,<br>                &quot;Source&quot;: &quot;/var/lib/docker/volumes/14d4f110646e3490fc9cd8b44c533c391a8a764697cef969cab6d27a7ae94df4/_data&quot;,<br>                &quot;Destination&quot;: &quot;volume02&quot;,<br>                &quot;Driver&quot;: &quot;local&quot;,<br>                &quot;Mode&quot;: &quot;&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;&quot;<br>            &#125;<br>        ],<br><br><br><br></code></pre></td></tr></table></figure><h3 id="9-数据卷容器"><a href="#9-数据卷容器" class="headerlink" title="9 数据卷容器"></a>9 数据卷容器</h3><p>使得多台容器间数据同步,共用数据,只要有一台容器在数据就不会丢失,全部容器丢失后,持久化的数据也不会丢失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">先启动一台作为数据卷容器</span><br>[root@iZ2vcb4sibyek91jif7g03Z dockerfile]# docker run -it --name liercentos01 liercentos:2.0<br>[root@00d779cd2466 /]# [root@iZ2vcb4sibyek91jif7g03Z dockerfile]# docker ps<br>CONTAINER ID   IMAGE            COMMAND                  CREATED         STATUS         PORTS     NAMES<br>00d779cd2466   liercentos:2.0   &quot;/bin/sh -c /bin/bash&quot;   9 seconds ago   Up 9 seconds             liercentos01<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动第二台容器使用--volumes-from 实现数据同步</span> <br>[root@iZ2vcb4sibyek91jif7g03Z dockerfile]# docker run -it --name liercnetos02 --volumes-from liercentos01 liercentos:2.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入该容器使用 <span class="hljs-built_in">ls</span> -al 发现目录与liercentos01 一致</span><br><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="10-DockerFile详解"><a href="#10-DockerFile详解" class="headerlink" title="10 DockerFile详解"></a>10 DockerFile详解</h3><p>dockerFile是用来构建docker镜像的文件！命令参数脚本！</p><h5 id="10-1构建步骤"><a href="#10-1构建步骤" class="headerlink" title="10.1构建步骤"></a>10.1构建步骤</h5><p>一: 编写一个dockerFile文件</p><p>二: docker build 构建成为一个镜像</p><p>三: docker run 运行镜像</p><p>四: docker push 发布镜像（DockerHub、阿里云镜像）</p><h5 id="10-2-dockerfile构建过程"><a href="#10-2-dockerfile构建过程" class="headerlink" title="10.2 dockerfile构建过程"></a>10.2 dockerfile构建过程</h5><h6 id="10-2-1-基础知识"><a href="#10-2-1-基础知识" class="headerlink" title="10.2.1 基础知识"></a>10.2.1 基础知识</h6><p> 每个保留关键字（指令）都是必须大写字母</p><p> 执行从上到下顺序执行</p><p> #&#96; 表示注释</p><p> 每个指令都会创建提交一个新的镜像层，并提交!</p><h6 id="10-2-2-相关概念"><a href="#10-2-2-相关概念" class="headerlink" title="10.2.2 相关概念"></a>10.2.2 相关概念</h6><p> DockerFile： 构建文件， 定义了一切的步骤，源代码</p><p> DockerImages： 通过DockerFile构建生成的镜像， 最终发布和运行的产品！</p><p> Docker容器：容器就是镜像运行起来提供服务器</p><p> 10.3.3 相关命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">FROM            # 基础镜像，一切从这里开始构建<br>MAINTAINER      # 镜像是谁写的， 姓名+邮箱<br>RUN             # 镜像构建的时候需要运行的命令<br>ADD             # 步骤， tomcat镜像， 这个tomcat压缩包！添加内容<br>WORKDIR         # 镜像的工作目录<br>VOLUME          # 挂载的目录<br>EXPOSE          # 保留端口配置<br>CMD             # 指定这个容器启动的时候要运行的命令，只有最后一个会生效可被替代<br>ENTRYPOINT      # 指定这个容器启动的时候要运行的命令， 可以追加命令<br>ONBUILD         # 当构建一个被继承DockerFile 这个时候就会运行 ONBUILD 的指令，触发指令<br>COPY            # 类似ADD, 将我们文件拷贝到镜像中<br>ENV             # 构建的时候设置环境变量！<br><br><br></code></pre></td></tr></table></figure><h5 id="10-3-实战"><a href="#10-3-实战" class="headerlink" title="10.3 实战"></a>10.3 实战</h5><h6 id="10-3-1-构建自己的centos"><a href="#10-3-1-构建自己的centos" class="headerlink" title="10.3.1 构建自己的centos"></a>10.3.1 构建自己的centos</h6><p> 需求:原生的centos没有 vim指令 和 ifconfig指令 —-&gt; 构建添加这两个指令的centos系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">构建相关的dockerfile文件</span><br>FROM centos<br>MAINTRINER lier&lt;664478853@qq.com&gt;<br><br>ENV MYPATH /usr/local   #配置环境路径变量<br>WORKDIR $MYPATH<br><br>RUN yum -y install vim  #安装vim工具<br>RUN yum -y install net-tools #安装网络工具<br><br>EXPOSE 80 #暴露80端口<br><br>CMD echo &quot;--------success--------&quot;<br>CMD echo $MYPATH<br>CMD /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据DockerFile文件构建镜像</span><br>[root@iZ2vcb4sibyek91jif7g03Z dockerfile-centos]# docker build -f /home/dockerfile-centos/DockerFile -t mycentos:1.0 .<br>Sending build context to Docker daemon  2.048kB<br>Step 1/10 : FROM centos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">5d0da3dc9764</span><br>Step 2/10 : MAINTAINER lier&lt;664478853@qq.com&gt;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 5893c1eeb855</span><br>Removing intermediate container 5893c1eeb855<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">6c473ed6363b</span><br>Step 3/10 : ENV MYPATH /usr/local   #配置环境路径变量<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> e475927a66bd</span><br>Removing intermediate container e475927a66bd<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">33dd18a7a31e</span><br>Step 4/10 : WORKDIR $MYPATH<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 93f481d11774</span><br>Removing intermediate container 93f481d11774<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">349ecdd33ae2</span><br>Step 5/10 : ADD yum -y install vim  #安装vim工具<br>ADD failed: file not found in build context or excluded by .dockerignore: stat yum: file does not exist<br><br><br><br></code></pre></td></tr></table></figure><h6 id="10-3-2-构建发布tomcat"><a href="#10-3-2-构建发布tomcat" class="headerlink" title="10.3.2 构建发布tomcat"></a>10.3.2 构建发布tomcat</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">dockerfile 文件</span><br>FROM centos<br>MAINTAINER lier&lt;664478853@qq.com&gt;<br><br>COPY readme.txt /usr/local/readme.txt<br><br>ADD apache-tomcat-9.0.37.tar.gz  /usr/local<br>ADD jdk-8u261-linux-x64.tar.gz   /usr/local<br><br>RUN yum -y install vim<br><br>ENV MYPATH /usr/local<br>WORKDIR $MYPATH<br><br><br>ENV JAVA_HOME /usr/local/jdk2.8.0_261<br>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><br>ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.37<br>ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.37<br>ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br><br>EXPOSE 8080<br><br><br>CMD /usr/local/apache-tomcat-9.0.37/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.37/logs/catalina.out<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">构建镜像</span><br>[root@iZ2vcb4sibyek91jif7g03Z tomcat-docker]# docker build -t mytomcat .<br>Sending build context to Docker daemon  154.3MB<br>Step 1/15 : FROM centos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">5d0da3dc9764</span><br>Step 2/15 : MAINTAINER lier&lt;664478853@qq.com&gt;<br>.....<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行</span><br>[root@iZ2vcb4sibyek91jif7g03Z tomcat-docker]# docker run -d -p 3344:8080 --name mytomcat1.0 mytomcat<br>9b59ad5431cd96f5192840a626c5f295cb4cc3aa33f027b96b70ff56fac3f7f2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试</span><br><br>[root@iZ2vcb4sibyek91jif7g03Z tomcat-docker]# curl localhost:3344<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>    &lt;head&gt;<br><br><br><br><br></code></pre></td></tr></table></figure><h5 id="10-4-发布镜像"><a href="#10-4-发布镜像" class="headerlink" title="10.4 发布镜像"></a>10.4 发布镜像</h5><h6 id="10-4-1-发送到dockerhub"><a href="#10-4-1-发送到dockerhub" class="headerlink" title="10.4.1 发送到dockerhub"></a>10.4.1 发送到dockerhub</h6><p> ①: 创建自己的dockerhub账号,通过 docker login –username&#x3D;username –password&#x3D;password 登录</p><p> ②: 通过 docker tag 镜像名 自定义镜像名:版本号 —&gt;第一版本标识,如果镜像已有标识版本可以忽略</p><p> ③: docker push 镜像名:版本号 进行提交</p><h6 id="10-4-2-发送镜像到阿里云"><a href="#10-4-2-发送镜像到阿里云" class="headerlink" title="10.4.2 发送镜像到阿里云"></a>10.4.2 发送镜像到阿里云</h6><p> 登录阿里云,在容器镜像服务中创建命名空间,在命名空间中创建镜像仓库,分局提示步骤上船镜像即可</p><h3 id="11-Docker网络"><a href="#11-Docker网络" class="headerlink" title="11 Docker网络"></a>11 Docker网络</h3><h5 id="11-1-docker0"><a href="#11-1-docker0" class="headerlink" title="11.1 docker0"></a>11.1 docker0</h5><p> 原理: 我们每启动一个docker容器， docker就会给docker容器分配一个ip， 我们只要安装了docker，就会有一个网卡 docker0桥接模式，使用的技术是veth-pair技术！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">我们发现这个容器带来网卡，都是一对对的</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">正因为有这个特性，veth-pair充当一个桥梁， 连接各种虚拟网络设备</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">OpenStac， Docker容器之间的链接，OVS的链接， 都是使用veth-pair技术</span><br><br><br></code></pre></td></tr></table></figure><h5 id="11-2-相关测试结论"><a href="#11-2-相关测试结论" class="headerlink" title="11.2 相关测试结论"></a>11.2 相关测试结论</h5><p>启动两个容器,因为他们默认使用同一个网卡docker0,所以可以相互ping通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动两个容器 tomcat01 tomcat02</span><br>[root@iZ2vcb4sibyek91jif7g03Z ~]# docker ps<br>CONTAINER ID   IMAGE     COMMAND             CREATED         STATUS         PORTS      NAMES<br>599a796e4438   tomcat    &quot;catalina.sh run&quot;   3 seconds ago   Up 3 seconds   8080/tcp   tomcat02<br>485a3230a747   tomcat    &quot;catalina.sh run&quot;   9 seconds ago   Up 9 seconds   8080/tcp   tomcat01<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用ifconfig 或者 ip addr 查看 ---&gt; 容器网卡成对出现 (使用的技术是veth-pair技术！)</span><br>[root@iZ2vcb4sibyek91jif7g03Z ~]# ifconfig<br>vethfb3c521: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        ether fa:32:f0:63:66:31  txqueuelen 0  (Ethernet)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>vethfc64237: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        ether 3a:ac:52:4a:d5:92  txqueuelen 0  (Ethernet)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br>        <br><span class="hljs-meta prompt_"># </span><span class="language-bash">dokcer network <span class="hljs-built_in">ls</span> 查看网卡<span class="hljs-built_in">id</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker network inspect 网卡<span class="hljs-built_in">id</span> 查看指定网卡下的容器信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it 容器名 ping 其他同网段容器ip</span><br><br><br></code></pre></td></tr></table></figure><h5 id="11-3-–link"><a href="#11-3-–link" class="headerlink" title="11.3 –link"></a>11.3 –link</h5><p> 每次重启容器之后ip会变化 使用–link 之后 可使用容器名,类似于微服务调用 feign</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker exec -it tomcat02 ping tomcat01<br>ping: tomcat01: Name or service not known<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如何可以解决呢？</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过--<span class="hljs-built_in">link</span>既可以解决网络连通问题</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker run -d -P  --name tomcat03 --link tomcat02 tomcat<br>3a2bcaba804c5980d94d168457c436fbd139820be2ee77246888f1744e6bb473<br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker ps<br>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES<br>3a2bcaba804c        tomcat              &quot;catalina.sh run&quot;   4 seconds ago       Up 3 seconds        0.0.0.0:32772-&gt;8080/tcp   tomcat03<br>f22ed47ed1be        tomcat              &quot;catalina.sh run&quot;   57 minutes ago      Up 57 minutes       0.0.0.0:32771-&gt;8080/tcp   tomcat02<br>9d97f93401a0        tomcat              &quot;catalina.sh run&quot;   About an hour ago   Up About an hour    0.0.0.0:32770-&gt;8080/tcp   tomcat01<br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker exec -it tomcat03 ping tomcat02<br>PING tomcat02 (172.17.0.3) 56(84) bytes of data.<br>64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.129 ms<br>64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.100 ms<br>64 bytes from tomcat02 (172.17.0.3): icmp_seq=3 ttl=64 time=0.110 ms<br>64 bytes from tomcat02 (172.17.0.3): icmp_seq=4 ttl=64 time=0.107 ms<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">反向可以ping通吗？</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker exec -it tomcat02 ping tomcat03<br>ping: tomcat03: Name or service not known<br><span class="hljs-meta prompt_"># </span><span class="language-bash">反向需要再次使用--<span class="hljs-built_in">link</span>反向绑定</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">其原理就是在hosts文件中 配置了一个 ip 映射</span><br><br><br></code></pre></td></tr></table></figure><h5 id="11-4-自定义网络"><a href="#11-4-自定义网络" class="headerlink" title="11.4 自定义网络"></a>11.4 自定义网络</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">网络相关指令 ---&gt; docker network --<span class="hljs-built_in">help</span> 查看</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">默认网卡 docker0 ---&gt;driver</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建网卡 docker  network create --<span class="hljs-built_in">help</span>  查看帮助</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--subnet 子网</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--gateway 网关</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker network create [options] 网卡名</span><br><br>[root@iZ2vcb4sibyek91jif7g03Z ~]# docker network create --subnet 192.168.0.1/16 --gateway 192.168.0.2 mynet<br>a7af152329fbb85c02ea8cd88dc827780b4b7533e3d4a725c490a8c28fdd71a2<br>[root@iZ2vcb4sibyek91jif7g03Z ~]# docker network ls<br>NETWORK ID     NAME      DRIVER    SCOPE<br>ae14bdd28933   bridge    bridge    local<br>01b0b3743f52   host      host      local<br>a7af152329fb   mynet     bridge    local<br>f59f8ebc617a   none      null      local<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行容器时指定网卡---&gt; --net</span><br>[root@iZ2vcb4sibyek91jif7g03Z ~]# clear<br>[root@iZ2vcb4sibyek91jif7g03Z ~]# docker run -d -P --name tomcat03 --net mynet tomcat<br>f2de1e2ab7fe3cb5de6bdbd98863b1fc051881e97397bdfc91f602d3a468713f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用自定义网卡之后, 不用--<span class="hljs-built_in">link</span> 也可以ping名字,定义的网络docker都已经帮我们维护好了对应的关系</span><br><br><br></code></pre></td></tr></table></figure><h5 id="11-5-网络连通"><a href="#11-5-网络连通" class="headerlink" title="11.5 网络连通"></a>11.5 网络连通</h5><p> 指使用不同网卡的两个容器之间的网络连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">[root@iZ2zeg4ytp0whqtmxbsqiiZ ~]# docker network connect  mynet tomcat01 #打通默认网卡下的容器tomcat01 与 mynet<br><span class="hljs-meta prompt_"># </span><span class="language-bash">这样亮哥不同网段之间的容器就可相互ping通</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">连通之后就是讲tomcat01 放到了mynet网路下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">一个容器两个ip地址：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">阿里云服务器，公网ip，私网ip</span><br><br><br></code></pre></td></tr></table></figure><h5 id="11-6-实战部署redis"><a href="#11-6-实战部署redis" class="headerlink" title="11.6 实战部署redis"></a>11.6 实战部署redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建自定义网卡 redis</span><br>[root@iZ2vcb4sibyek91jif7g03Z ~]# docker network create --subnet 192.160.0.1/16 --gateway 192.160.0.2 redis<br>387b51203fba1462a1b51b95b89e9f38aecfc5b653caebec0dff8a74c003a6c7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过脚本创建六个redis配置</span><br>for port in $(seq 1 6);<br>do<br>mkdir -p /mydata/redis/node-$&#123;port&#125;/conf<br>touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf<br>cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf<br>port 6379<br>bind 0.0.0.0<br>cluster-enabled yes<br>cluster-config-file nodes.conf<br>cluster-node-timeout 5000<br>cluster-announce-ip 192.160.0.1$&#123;port&#125;<br>cluster-announce-port 6379<br>cluster-announce-bus-port 16379<br>appendonly yes<br>EOF<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建节点</span><br>docker run -p 6371:6379 -p 16371:16379 --name redis-1 \<br>-v /mydata/redis/node-1/data:/data \<br>-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 192.160.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建结点2</span><br>docker run -p 6372:6379 -p 16372:16379 --name redis-2 \<br>-v /mydata/redis/node-2/data:/data \<br>-v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 192.160.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建结点3</span><br>docker run -p 6373:6379 -p 16373:16379 --name redis-3 \<br>-v /mydata/redis/node-3/data:/data \<br>-v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 192.160.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建结点4</span><br>docker run -p 6374:6379 -p 16374:16379 --name redis-4 \<br>-v /mydata/redis/node-4/data:/data \<br>-v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 192.160.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建结点5</span><br>docker run -p 6375:6379 -p 16375:16379 --name redis-5 \<br>-v /mydata/redis/node-5/data:/data \<br>-v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 192.160.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建结点6</span><br>docker run -p 6376:6379 -p 16376:16379 --name redis-6 \<br>-v /mydata/redis/node-6/data:/data \<br>-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 192.160.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看执行成功</span><br>[root@iZ2vcb4sibyek91jif7g03Z redis]# docker ps<br>CONTAINER ID   IMAGE                    COMMAND                  CREATED              STATUS              PORTS                                              NAMES<br>25f1b0314aa7   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   6 seconds ago        Up 5 seconds        0.0.0.0:6376-&gt;6379/tcp, 0.0.0.0:16376-&gt;16379/tcp   redis-6<br>ad550f0ab391   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   12 seconds ago       Up 11 seconds       0.0.0.0:6375-&gt;6379/tcp, 0.0.0.0:16375-&gt;16379/tcp   redis-5<br>8bd65b125ad2   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   21 seconds ago       Up 20 seconds       0.0.0.0:6374-&gt;6379/tcp, 0.0.0.0:16374-&gt;16379/tcp   redis-4<br>d30cefb7c53d   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   32 seconds ago       Up 31 seconds       0.0.0.0:6373-&gt;6379/tcp, 0.0.0.0:16373-&gt;16379/tcp   redis-3<br>690e1190687c   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   48 seconds ago       Up 47 seconds       0.0.0.0:6372-&gt;6379/tcp, 0.0.0.0:16372-&gt;16379/tcp   redis-2<br>39439b1d7806   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute   0.0.0.0:6371-&gt;6379/tcp, 0.0.0.0:16371-&gt;16379/tcp   redis-1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建集群</span> <br>[root@iZ2vcb4sibyek91jif7g03Z ~]# docker exec -it redis-1 /bin/sh #进入随机一台redis<br>/data # redis-cli --cluster create 192.160.0.11:6379 192.160.0.12:6379 192.160.0.13:6379 192.160.0.14:6379 192.160.0.15:6379 192.160.0.16:6379 --cluster-replicas 1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...</span><br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 192.160.0.15:6379 to 192.160.0.11:6379<br>Adding replica 192.160.0.16:6379 to 192.160.0.12:6379<br>Adding replica 192.160.0.14:6379 to 192.160.0.13:6379<br>M: a60a08d2ca7edc6cf09d1b5adf07ee3010550e8b 192.160.0.11:6379<br>   slots:[0-5460] (5461 slots) master<br>M: f3ef7f0c4b2ec73e5727b94a18e4e3145fa9201e 192.160.0.12:6379<br>   slots:[5461-10922] (5462 slots) master<br>M: ca12d5b42f0a5056870cda9107ccc1cba3e0c737 192.160.0.13:6379<br>   slots:[10923-16383] (5461 slots) master<br>S: 184726ccd46dbbce9cee2170dacd9c26e70c4986 192.160.0.14:6379<br>   replicates ca12d5b42f0a5056870cda9107ccc1cba3e0c737<br>S: a22cb6735f42c1b8462964b196ebef051769db72 192.160.0.15:6379<br>   replicates a60a08d2ca7edc6cf09d1b5adf07ee3010550e8b<br>S: 4a8e465f40a619e5f556d4075ce98e3316d35ac3 192.160.0.16:6379<br>   replicates f3ef7f0c4b2ec73e5727b94a18e4e3145fa9201e<br><br>docker run -p 6379:6379 --name yyghredis -d -v /home/redis/data:/data<br>-v /home/redis/conf/redis.conf:/etc/redis/redis.conf redis:<br><br><br></code></pre></td></tr></table></figure><h4 id="12-SpringBoot微服务打包Docker镜像"><a href="#12-SpringBoot微服务打包Docker镜像" class="headerlink" title="12.SpringBoot微服务打包Docker镜像"></a>12.SpringBoot微服务打包Docker镜像</h4><p> 12.1 创建helloword–springboot程序 并打包</p><p> 12.2 编写DockerFile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell">FROM java:8<br> <br>COPY *.jar /app.jar<br> <br>CMD [&quot;--server.port=8080&quot;]<br> <br>EXPOSE 8080<br> <br>ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]<br><br>DOCKERFILE<br></code></pre></td></tr></table></figure><p> 12.3 将打包后的jar和DockerFile发送的linux中,并构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">把打好的jar包和Dockerfile上传到linux</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ idea]# ll<br>total 16140<br>-rw-r--r-- 1 root root 16519871 Aug 14 17:38 demo-0.0.1-SNAPSHOT.jar<br>-rw-r--r-- 1 root root      122 Aug 14 17:38 Dockerfile<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建镜像，不要忘了最后有一个点</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ idea]# docker build -t xiaofan666 .<br>Sending build context to Docker daemon  16.52MB<br>Step 1/5 : FROM java:8<br>8: Pulling from library/java<br>5040bd298390: Pull complete <br>fce5728aad85: Pull complete <br>76610ec20bf5: Pull complete <br>60170fec2151: Pull complete <br>e98f73de8f0d: Pull complete <br>11f7af24ed9c: Pull complete <br>49e2d6393f32: Pull complete <br>bb9cdec9c7f3: Pull complete <br>Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d<br>Status: Downloaded newer image for java:8<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">d23bdf5b1b1b</span><br>Step 2/5 : COPY *.jar /app.jar<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">d4de8837ebf9</span><br>Step 3/5 : CMD [&quot;--server.port=8080&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> e3abc66303f0</span><br>Removing intermediate container e3abc66303f0<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">131bb3917fea</span><br>Step 4/5 : EXPOSE 8080<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> fa2f25977db7</span><br>Removing intermediate container fa2f25977db7<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">d98147377951</span><br>Step 5/5 : ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> e1885e23773b</span><br>Removing intermediate container e1885e23773b<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">afb6b5f28a32</span><br>Successfully built afb6b5f28a32<br>Successfully tagged xiaofan666:latest<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看镜像</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ idea]# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>xiaofan666          latest              afb6b5f28a32        14 seconds ago      660MB<br>tomcat              latest              2ae23eb477aa        8 days ago          647MB<br>redis               5.0.9-alpine3.11    3661c84ee9d0        3 months ago        29.8MB<br>java                8                   d23bdf5b1b1b        3 years ago         643MB<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行容器</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ idea]# docker run -d -P --name xiaofan-springboot-web xiaofan666<br>fd9a353a80bfd61f6930c16cd92204532bfd734e003f3f9983b5128a27b0375e<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看运行起来的容器端口（因为我们启动的时候没有指定）</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ idea]# docker ps<br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES<br>fd9a353a80bf        xiaofan666          &quot;java -jar /app.jar …&quot;   9 seconds ago       Up 8 seconds        0.0.0.0:32779-&gt;8080/tcp   xiaofan-springboot-web<br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地访问1</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ idea]# curl localhost:32779<br>&#123;&quot;timestamp&quot;:&quot;2020-08-14T09:42:57.371+00:00&quot;,&quot;status&quot;:404,&quot;error&quot;:&quot;Not Found&quot;,&quot;message&quot;:&quot;&quot;,&quot;path&quot;:&quot;/&quot;&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地访问2</span><br>[root@iZ2zeg4ytp0whqtmxbsqiiZ idea]# [root@iZ2zeg4ytp0whqtmxbsqiiZ idea]# curl localhost:32779/hello<br>hello, xiaofan<br><span class="hljs-meta prompt_"># </span><span class="language-bash">远程访问</span><br><br><br></code></pre></td></tr></table></figure><h3 id="12-Docker-Compose"><a href="#12-Docker-Compose" class="headerlink" title="12 Docker Compose"></a>12 Docker Compose</h3><h4 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1: 简介"></a>12.1: 简介</h4><p> 假设有100个微服务,那使用dockerFile构建,docker build,docker run等进行操作,相当麻烦,使用Docker Compose来进行容器间高效的管理,定义运行多个容器等</p><p> 12.2: 使用步骤</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">1</span>: dockerFile定义应用的运行环境,保证我们项目在任何地方都可以运行<br><span class="hljs-attribute">2</span>: docker-compose.yaml:定义服务并将他们写入yaml配置中,一次启动多个服务<br><span class="hljs-attribute">3</span>: docker compose up 启动项目<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>容器虚拟化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC并发详解</title>
    <link href="/2023/07/27/JUC%E5%B9%B6%E5%8F%91%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/07/27/JUC%E5%B9%B6%E5%8F%91%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="JUC并发编程"><a href="#JUC并发编程" class="headerlink" title="JUC并发编程"></a>JUC并发编程</h2><h3 id="1-什么是JUC"><a href="#1-什么是JUC" class="headerlink" title="1: 什么是JUC"></a>1: 什么是JUC</h3><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1: 概念"></a>1.1: 概念</h4><p> JUC 就是 java.util .concurrent 工具包的简称。这是一个处理线程的工具包，JDK 1.5 开始出现的。</p><h3 id="2-线程和进程相关概念"><a href="#2-线程和进程相关概念" class="headerlink" title="2: 线程和进程相关概念"></a>2: 线程和进程相关概念</h3><h4 id="2-1-进程和线程"><a href="#2-1-进程和线程" class="headerlink" title="2.1: 进程和线程"></a>2.1: 进程和线程</h4><p> 进程: 计算机中一个运行起来的程序,是系统进行资源分配和调度的基本单位,是操作系统的结构的基础</p><p> 是线程的容器</p><p> 线程: 是进程中一个单一的顺序控制流,操作系统能够进行运算调度的最小单位,一个进程可以有一个或多个线程</p><h4 id="2-2-线程的状态-生命周期"><a href="#2-2-线程的状态-生命周期" class="headerlink" title="2.2: 线程的状态(生命周期)"></a>2.2: 线程的状态(生命周期)</h4><p> 新建 就绪 运行 阻塞 死亡</p><h4 id="2-3-wait与sleep区别"><a href="#2-3-wait与sleep区别" class="headerlink" title="2.3: wait与sleep区别"></a>2.3: wait与sleep区别</h4><p> 相同: 一旦执行就会使线程进入阻塞状态</p><p> 不同:</p><p> 1: sleep时Thread类中的静态方法,wait是Object中的方法,</p><p> 2: sleep不会占用锁,所以可以在任何地方调用,且当前线程有锁时sleep不会释放锁,而wait会占用锁,wait所在当前 线程必须有锁,但是wait不会释放锁</p><h4 id="2-4-并发和并行"><a href="#2-4-并发和并行" class="headerlink" title="2.4: 并发和并行"></a>2.4: 并发和并行</h4><p> 串行: 一次只能获取到一个任务,只能处理一个任务,按顺序处理</p><p> 并发: 一个CPU核处理多个任务,根据细分时间片交替执行,逻辑上时同时执行</p><p> 并行: 多核CPU或多个处理器同时处理多个任务,</p><h4 id="2-5-管程"><a href="#2-5-管程" class="headerlink" title="2.5: 管程"></a>2.5: 管程</h4><p> 管程(monitor)是保证了同一时刻只有一个进程在管程内活动,JVM 中同步就是基于进入和退出管程(monitor)对象实现的</p><h4 id="2-6-用户线程和守护线程"><a href="#2-6-用户线程和守护线程" class="headerlink" title="2.6: 用户线程和守护线程"></a>2.6: 用户线程和守护线程</h4><p> 用户线程: 平时用到的普通线程,自定义线程</p><p> 守护线程: 运行在后台,是一种特殊的线程,比如垃圾回收</p><p> 区别: 当主线程结束后,用户线程还在运行,JVM 存活 如果没有用户线程,都是守护线程,JVM 结束</p><h3 id="3-Lock接口"><a href="#3-Lock接口" class="headerlink" title="3: Lock接口"></a>3: Lock接口</h3><h4 id="3-1-synchronized"><a href="#3-1-synchronized" class="headerlink" title="3.1: synchronized"></a>3.1: synchronized</h4><h5 id="3-1-1-使用"><a href="#3-1-1-使用" class="headerlink" title="3.1.1: 使用"></a>3.1.1: 使用</h5><p> 同步方法和同步代码块</p><p> <strong>synchronized 关键字不能被继承</strong>。如果在父类中的某个方 法使用了 synchronized 关键字，而在子类中覆盖了这个方 法，在子类中的这 个方法默认情况下并不是同步的，而必须显式地在子类的这个方法中加上 synchronized 关键字才可以。 或者在子类方法中调用父类的同步方法</p><h5 id="3-1-2-多线程编程步骤-上"><a href="#3-1-2-多线程编程步骤-上" class="headerlink" title="3.1.2: 多线程编程步骤(上)"></a>3.1.2: 多线程编程步骤(<strong>上</strong>)</h5><p> 1: 创建资源类及其属性和操作方法</p><p> 2: 创建多线程调用资源类的操作方法</p><h5 id="3-1-3-火车售票案列"><a href="#3-1-3-火车售票案列" class="headerlink" title="3.1.3: 火车售票案列"></a>3.1.3: 火车售票案列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicket</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Ticket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">40</span>;i++)&#123;<br>               ticket.sale();<br>           &#125;<br>        &#125;,<span class="hljs-string">&quot;线程1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">40</span>;i++)&#123;<br>                ticket.sale();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;线程2&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">40</span>;i++)&#123;<br>                ticket.sale();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;线程3&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建资源类及其属性和操作方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sale</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(ticketNum &gt; <span class="hljs-number">0</span>)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;售出第&quot;</span> + (<span class="hljs-number">31</span> - ticketNum--) + <span class="hljs-string">&quot;张票,剩余&quot;</span> + ticketNum );<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="3-1-4-缺陷"><a href="#3-1-4-缺陷" class="headerlink" title="3.1.4: 缺陷"></a>3.1.4: 缺陷</h5><p>如果一个代码块被 synchronized 修饰了，当一个线程获取了对应的锁，并执 行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里 获取锁的线程释放锁只会有两种情况：</p><p> 1）获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</p><p> 2）线程执行发生异常，此时 JVM 会让线程自动释放锁。</p><p>那么<strong>如果这个获取锁的线程由于要等待 IO 或者其他原因（比如调用 sleep 方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一 下，这多么影响程序执行效率。</strong> 因此就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等 待一定的时间或者能够响应中断），通过 Lock 就可以办到。</p><h4 id="3-2-Lock接口"><a href="#3-2-Lock接口" class="headerlink" title="3.2: Lock接口"></a>3.2: Lock接口</h4><h5 id="3-2-1-lock与synchronized区别"><a href="#3-2-1-lock与synchronized区别" class="headerlink" title="3.2.1: lock与synchronized区别"></a>3.2.1: lock与synchronized区别</h5><p> Lock 不是 Java 语言内置的，synchronized 是 Java 语言的关键字，因此是内 置特性。Lock 是一个类，通过这个类可以实现 同步访问；</p><p> lock需要手动上锁和释放锁,而synchronized可以自动上锁和释放锁</p><p> lock锁可以让等待锁的线程响应中断, 而synchronized必须等待当前线程执行完</p><p> 线程间竞争不激烈时,两者效率差不多,激烈时,lock锁的效率高于synchronized</p><h5 id="3-2-2-ReentrantLock"><a href="#3-2-2-ReentrantLock" class="headerlink" title="3.2.2: ReentrantLock"></a>3.2.2: ReentrantLock</h5><p> 可重入锁: 类似排队,进去时上锁,出来时释放锁</p><h5 id="3-3-3-案列"><a href="#3-3-3-案列" class="headerlink" title="3.3.3: 案列"></a>3.3.3: 案列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LSaleTicket</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>       <span class="hljs-type">LTicket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LTicket</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                ticket.sale();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;线程1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                ticket.sale();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;线程2&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                ticket.sale();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;线程3&quot;</span>).start();<br>    &#125;<br>&#125;<br><br>    <span class="hljs-comment">//创建资源类及其属性和操作方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LTicket</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">//可重入锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sale</span><span class="hljs-params">()</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">if</span>(ticketNum &gt; <span class="hljs-number">0</span>)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;售出第&quot;</span> + (<span class="hljs-number">31</span> - ticketNum--) + <span class="hljs-string">&quot;张票,剩余&quot;</span> + ticketNum );<br>            &#125;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="4-线程间的通信"><a href="#4-线程间的通信" class="headerlink" title="4: 线程间的通信"></a>4: 线程间的通信</h3><p> <strong>调用start方法并不会立即创建一个线程,而是由操作系统决定的,所以调用start方法不一定创建一个线程</strong></p><h4 id="4-1-多线程编程步骤-中"><a href="#4-1-多线程编程步骤-中" class="headerlink" title="4.1: 多线程编程步骤(中)"></a>4.1: 多线程编程步骤(中)</h4><p> 1: 创建资源类及其属性和操作方法</p><p> 2: 判断: 判断资源是否满足操作条件, 干活: 操作相应资源, 通知: 通知其他线程进行操作</p><p> 3: 创建多线程调用资源类的操作方法</p><h4 id="4-2-synchronized-版"><a href="#4-2-synchronized-版" class="headerlink" title="4.2: synchronized 版"></a>4.2: synchronized 版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyTestThread</span> <span class="hljs-variable">myTestThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTestThread</span>();<br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                myTestThread.incr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;++线程&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                myTestThread.decr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;--线程&quot;</span>).start();<br><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTestThread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//++ 的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">incr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">if</span>(number != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//干活</span><br>        number++;<br><br>        System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;: &quot;</span> + number);<br><br>        <span class="hljs-comment">//通知</span><br>        <span class="hljs-built_in">this</span>.notifyAll();<br>    &#125;<br><br>    <span class="hljs-comment">//--的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decr</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">if</span>(number != <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//干活</span><br>        number--;<br><br>        System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;: &quot;</span> + number);<br><br>        <span class="hljs-comment">//通知</span><br>        <span class="hljs-built_in">this</span>.notifyAll();<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h4 id="4-3-虚假唤醒问题"><a href="#4-3-虚假唤醒问题" class="headerlink" title="4.3: 虚假唤醒问题"></a>4.3: 虚假唤醒问题</h4><p> 描述: 在多线程编程步骤中做判断时,使用if判断,满足条件后,调用wait方法,当前线程1进入阻塞状态,并释放锁,其他线程拿到锁后,成功执行并唤醒其他所有线程(包括当前线程1),此时<strong>由于wait方法在哪里阻塞就在哪里被唤醒的特性,导致if判断失效,从而出现虚假唤醒问题</strong></p><p> 解决: <strong>将if判断改为while做判断</strong></p><p> 3.3.4: 多线程编程步骤(下)</p><p> 1: 创建资源类及其属性和操作方法</p><p> 2: 判断: 判断资源是否满足操作条件, 干活: 操作相应资源, 通知: 通知其他线程进行操作</p><p> 3: 创建多线程调用资源类的操作方法</p><p> 4: 防止虚假唤醒问题</p><h4 id="4-4-lock版"><a href="#4-4-lock版" class="headerlink" title="4.4: lock版"></a>4.4: lock版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LThread</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Share</span> <span class="hljs-variable">share</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Share</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                share.incr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;++线程1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                share.decr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;--线程1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                share.incr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;++线程2&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                share.decr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;--线程2&quot;</span>).start();<br><br><br>    &#125;<br><br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Share</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-comment">//++方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">incr</span><span class="hljs-params">()</span>&#123;<br><br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//判断</span><br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    condition.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//干活</span><br>            number++;<br>            System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;: &quot;</span> + number);<br><br>            <span class="hljs-comment">//唤醒</span><br>            condition.signalAll();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//--方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decr</span><span class="hljs-params">()</span>&#123;<br>        lock.lock();<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//判断</span><br>            <span class="hljs-keyword">while</span>(number != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    condition.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//干活</span><br>            number--;<br>            System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;: &quot;</span> + number);<br><br>            <span class="hljs-comment">//唤醒</span><br>            condition.signalAll();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="5-线程间定制化化通信"><a href="#5-线程间定制化化通信" class="headerlink" title="5: 线程间定制化化通信"></a>5: 线程间定制化化通信</h3><p> 定义一个标志位,判断标志位来判断时那个线程并进行通信</p><h4 id="5-1-案列"><a href="#5-1-案列" class="headerlink" title="5.1: 案列"></a>5.1: 案列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomizeCommunication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ShareResource</span> <span class="hljs-variable">shareResource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShareResource</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareResource.print5(i);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareResource.print10(i);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareResource.print15(i);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;CC&quot;</span>).start();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShareResource</span>&#123;<br>    <span class="hljs-comment">//标志位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-comment">//钥匙</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-comment">//打印5次,loop表示当前为第几轮</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print5</span><span class="hljs-params">(<span class="hljs-type">int</span> loop)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(flag != <span class="hljs-number">1</span>)&#123;<br>                c1.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i + <span class="hljs-string">&quot;,当前轮数: &quot;</span> + loop );<br>            &#125;<br>            <span class="hljs-comment">//修改标志位,通知对应线程</span><br>            flag = <span class="hljs-number">2</span>;<br>            c1.signal();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>           lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//打印10次,loop表示当前为第几轮</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print10</span><span class="hljs-params">(<span class="hljs-type">int</span> loop)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(flag != <span class="hljs-number">2</span>)&#123;<br>                c2.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i + <span class="hljs-string">&quot;,当前轮数: &quot;</span> + loop );<br>            &#125;<br>            <span class="hljs-comment">//修改标志位,通知对应线程</span><br>            flag = <span class="hljs-number">3</span>;<br>            c2.signal();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//打印15次,loop表示当前为第几轮</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print15</span><span class="hljs-params">(<span class="hljs-type">int</span> loop)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(flag != <span class="hljs-number">3</span>)&#123;<br>                c3.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">15</span>;i++)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i + <span class="hljs-string">&quot;,当前轮数: &quot;</span> + loop );<br>            &#125;<br>            <span class="hljs-comment">//修改标志位,通知对应线程</span><br>            flag = <span class="hljs-number">1</span>;<br>            c3.signal();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="6-集合的线程安全"><a href="#6-集合的线程安全" class="headerlink" title="6: 集合的线程安全"></a>6: 集合的线程安全</h3><h4 id="6-1-List集合"><a href="#6-1-List集合" class="headerlink" title="6.1: List集合"></a>6.1: List集合</h4><h5 id="6-1-1相关案列"><a href="#6-1-1相关案列" class="headerlink" title="6.1.1相关案列"></a>6.1.1相关案列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayList</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                list.add(UUID.randomUUID().toString());<br><br>                System.out.println(list);<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>案列出现java.util.ConcurrentModificationException异常,出现在System.out.println(list)时,因为多个线程操作集合添加数据,由于添加方法时线程不安全的,所以在读取时,可能由线程正在添加,导致出现该异常</p><h5 id="6-1-2-解决方案"><a href="#6-1-2-解决方案" class="headerlink" title="6.1.2: 解决方案"></a>6.1.2: 解决方案</h5><h6 id="方案一-使用vector"><a href="#方案一-使用vector" class="headerlink" title="方案一: 使用vector"></a>方案一: 使用vector</h6><p> 因为他是一个线程安全的集合,</p><h6 id="方案二-使用Collections工具类"><a href="#方案二-使用Collections工具类" class="headerlink" title="方案二: 使用Collections工具类"></a>方案二: 使用Collections工具类</h6><p> 使用synchronizedList方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayList</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="hljs-comment">//方案一</span><br><span class="hljs-comment">//        List&lt;String&gt; list = new Vector&lt;&gt;();</span><br>        <span class="hljs-comment">//方案二</span><br>        List&lt;String&gt; list = Collections.synchronizedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                list.add(UUID.randomUUID().toString());<br><br>                System.out.println(list);<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h6 id="方案三-使用CopyOnWriteArrayList"><a href="#方案三-使用CopyOnWriteArrayList" class="headerlink" title="方案三: 使用CopyOnWriteArrayList"></a>方案三: 使用CopyOnWriteArrayList</h6><p> 该类采用写时复制技术,其写入数据时,会将原数据赋值一份出来进行线程安全的操作(<strong>独立写</strong>),然后再与原来数据合并,没写一次操作一次,<strong>读是并发的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                list.add(UUID.randomUUID().toString());<br><br>                System.out.println(list);<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="6-2-Set集合"><a href="#6-2-Set集合" class="headerlink" title="6.2: Set集合"></a>6.2: Set集合</h4><p> 采用CopyOnWriteArraySet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayList</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                set.add(UUID.randomUUID().toString());<br><br>                System.out.println(set);<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="6-3-Map集合"><a href="#6-3-Map集合" class="headerlink" title="6.3: Map集合"></a>6.3: Map集合</h4><h5 id="方案一-采用collections工具类"><a href="#方案一-采用collections工具类" class="headerlink" title="方案一: 采用collections工具类"></a>方案一: 采用collections工具类</h5><p> 使用synchronizedMap()方法,与List类似</p><h5 id="方案二-使用ConcurrentHashMap类"><a href="#方案二-使用ConcurrentHashMap类" class="headerlink" title="方案二: 使用ConcurrentHashMap类"></a>方案二: 使用ConcurrentHashMap类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayList</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> String.valueOf(i);<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                map.put(key,UUID.randomUUID().toString());<br><br>                System.out.println(map);<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="7-多线程锁"><a href="#7-多线程锁" class="headerlink" title="7: 多线程锁"></a>7: 多线程锁</h3><h4 id="7-1-synchronized锁"><a href="#7-1-synchronized锁" class="headerlink" title="7.1: synchronized锁"></a>7.1: synchronized锁</h4><p> synchronized实现同步的基础: java的每个对象都可以充当锁</p><p> 同步方法: 锁为当前对象,范围就是当前对象所有synchronized方法,</p><p> 同步静态方法: 锁为当前类,范围就是当前类所有实例的synchronized方法</p><p> 同步代码块: 锁为synchronized括号中的声明</p><h4 id="7-2-公平锁和非公平锁"><a href="#7-2-公平锁和非公平锁" class="headerlink" title="7.2: 公平锁和非公平锁"></a>7.2: 公平锁和非公平锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//空参构造或传入false: 非公平锁</span><br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">//传入true: 公平锁</span><br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(<span class="hljs-literal">true</span>);<br><br><br></code></pre></td></tr></table></figure><p>区别: 公平锁会使每个线程都能获取任务执行,但不能保证每个线程执行任务数相同,效率低,因为他在执行任务时会获取当前任务是否有线程在执行,有就不执行去排队</p><p>非公平锁: 有可能所有的任务都被其中一个线程执行,造成其他线程没有任务执行的情况,出现线程 “饿死” 现象,但是其效率高于公平锁,因为它只要发现当前任务没有执行,就直接执行,相对于公平锁少了获取当前任务是否有线程在执行的问题</p><h4 id="7-3-可重入锁"><a href="#7-3-可重入锁" class="headerlink" title="7.3: 可重入锁"></a>7.3: 可重入锁</h4><p> synchronized和lock都是可重入锁,通过以下案列实现,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//嵌套</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span>(TestReentrantLock.class)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + <span class="hljs-string">&quot;外层&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span>(TestReentrantLock.class)&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + <span class="hljs-string">&quot;中层&quot;</span>);<br>                    <span class="hljs-keyword">synchronized</span>(TestReentrantLock.class)&#123;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + <span class="hljs-string">&quot;内层&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;aa&quot;</span>).start();<br>    &#125;<br><span class="hljs-comment">//递归</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestReentrantLock</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestReentrantLock</span>().add();<br>        &#125;,<span class="hljs-string">&quot;aa&quot;</span>).start();<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        add();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//lock</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                lock.lock();<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: 外层&quot;</span>);<br>                <span class="hljs-keyword">try</span>&#123;<br>                    lock.lock();<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: 中层&quot;</span>);<br>                    <span class="hljs-keyword">try</span>&#123;<br>                        lock.lock();<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: 内层&quot;</span>);<br>                    &#125;<span class="hljs-keyword">finally</span>&#123;<br>                        lock.unlock();<br>                    &#125;;<br>                &#125;<span class="hljs-keyword">finally</span>&#123;<br>                    lock.unlock();<br>                &#125;;<br>            &#125;<span class="hljs-keyword">finally</span>&#123;<br>                lock.unlock();<br>            &#125;;<br>        &#125;,<span class="hljs-string">&quot;aa&quot;</span>).start();<br>    &#125;<br><span class="hljs-comment">//将中层的释放锁注释之后,依然可以执行内存代码</span><br><br><br></code></pre></td></tr></table></figure><p>特点: synchronized和lock都是可重入锁,当前线程获得最外层锁时,就可以无视内层的所有锁,依然可以内层代码</p><h4 id="7-4-死锁"><a href="#7-4-死锁" class="headerlink" title="7.4: 死锁"></a>7.4: 死锁</h4><h5 id="7-4-1-概念"><a href="#7-4-1-概念" class="headerlink" title="7.4.1: 概念"></a>7.4.1: 概念</h5><p> 两个或者两个以上的线程占有对方需要的同步资源,导致线程一致处于等待现象</p><h5 id="7-4-2-产生死锁的原因"><a href="#7-4-2-产生死锁的原因" class="headerlink" title="7.4.2: 产生死锁的原因"></a>7.4.2: 产生死锁的原因</h5><p> 1: 系统资源不足</p><p> 2: 运行的推进顺序不合适</p><p> 3: 资源分配不当</p><h5 id="7-4-3-手写死锁"><a href="#7-4-3-手写死锁" class="headerlink" title="7.4.3: 手写死锁"></a>7.4.3: 手写死锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> &#123;<br><br>    <span class="hljs-comment">//定义两个对象充当锁</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span>(a)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 线程持有锁a,试图获取锁b&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">synchronized</span>(b)&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;获取到锁b&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;A&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span>(b)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 线程持有锁b,试图获取锁a&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">synchronized</span>(a)&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;获取到锁a&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;B&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="7-4-4-判断是否为死锁"><a href="#7-4-4-判断是否为死锁" class="headerlink" title="7.4.4: 判断是否为死锁"></a>7.4.4: 判断是否为死锁</h5><p> 1: jps -l : 在idea控制台输入命令,找到当前类对应编号</p><p> 2: jstack 编号 : 看是否出现死锁,jstack为jvm堆栈追踪工具</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301111256.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301111256.png" alt="img"></a></p><h3 id="8-Callable接口"><a href="#8-Callable接口" class="headerlink" title="8: Callable接口"></a>8: Callable接口</h3><h4 id="8-1-callable"><a href="#8-1-callable" class="headerlink" title="8.1: callable"></a>8.1: callable</h4><h5 id="8-1-1-概述"><a href="#8-1-1-概述" class="headerlink" title="8.1.1: 概述"></a>8.1.1: 概述</h5><p> 实现多线程的第三种方案</p><h5 id="8-2-2-与Runnable区别"><a href="#8-2-2-与Runnable区别" class="headerlink" title="8.2.2: 与Runnable区别"></a>8.2.2: 与Runnable区别</h5><p> 1: 由于Runnable实现多线程在run方法执行结束后,无法使线程返回结果,所以引入Callable接口,call方法相对run方法可以 返回结果</p><p> 2: call()方法可以抛出异常,而run方法不行</p><h4 id="8-2-FutureTask-未来任务"><a href="#8-2-FutureTask-未来任务" class="headerlink" title="8.2: FutureTask(未来任务)"></a>8.2: FutureTask(未来任务)</h4><h5 id="8-2-1概念"><a href="#8-2-1概念" class="headerlink" title="8.2.1概念:"></a>8.2.1概念:</h5><p> 不影响主线程的情况下,单开一个线程去执行较为复杂的任务,最终进行汇总,且只汇总一次</p><h5 id="8-2-2原理"><a href="#8-2-2原理" class="headerlink" title="8.2.2原理:"></a>8.2.2原理:</h5><p> FutureTask实现了Runnable和Future接口,Future对象用于保存放回结果</p><p> <strong>在主线程中需要执行比较耗时的操作时，但又不想阻塞主线程时，可以把这些作业交给 Future 对象在后台完成</strong></p><p> <strong>当主线程将来需要时，就可以通过 Future 对象获得后台作业的计算结果或者执 行状态</strong></p><p> 一般 FutureTask 多用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果, 仅在计算完成时才能检索结果；<strong>如 果计算尚未完成，则阻塞 get 方法 • 一旦计算完成，就不能再重新开始或取消计算</strong> • get 方法获取结果只有在计算完成时获 取，否则会一直阻塞直到任务转入完 成状态，然后会返回结果或者抛出异常 ,<strong>get 只计算一次,因此 get 方法放到最后</strong></p><p> 接口中三个重要方法:</p><p> public boolean cancel（boolean mayInterrupt）：用于停止任务。</p><p> public Object get（）抛出 InterruptedException，ExecutionException： 用于获取任务的结果。</p><p> public boolean isDone（）：如果任务完成，则返回 true，否则返回 false</p><h5 id="8-3-3-实现"><a href="#8-3-3-实现" class="headerlink" title="8.3.3: 实现"></a>8.3.3: 实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallableDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">futureTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName());<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>        &#125;);<br><br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask,<span class="hljs-string">&quot;AA&quot;</span>).start();<br><br>        <span class="hljs-comment">//判断是否执行完成,未完成阻塞等待</span><br>        <span class="hljs-keyword">while</span>(!futureTask.isDone())&#123;<br>            System.out.println(<span class="hljs-string">&quot;wait...&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//获取计算结果</span><br>        System.out.println(futureTask.get());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="9-JUC辅助类"><a href="#9-JUC辅助类" class="headerlink" title="9: JUC辅助类"></a>9: JUC辅助类</h3><h4 id="9-1-CountDownLatch减少计数"><a href="#9-1-CountDownLatch减少计数" class="headerlink" title="9.1: CountDownLatch减少计数"></a>9.1: CountDownLatch减少计数</h4><h5 id="9-1-1-解决的问题"><a href="#9-1-1-解决的问题" class="headerlink" title="9.1.1: 解决的问题"></a>9.1.1: 解决的问题</h5><p> 当需要当前的多个线程执行完之后,在执行主线程的代码时,采用CountDownLatch</p><h5 id="9-2-2-问题复现"><a href="#9-2-2-问题复现" class="headerlink" title="9.2.2: 问题复现"></a>9.2.2: 问题复现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatchDemo</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">6</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;同学离开&quot;</span>);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;班长锁门&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> 发现主线程不会等所有线程执行完(所有同学离开)后,在执行</p><h5 id="9-2-3-解决"><a href="#9-2-3-解决" class="headerlink" title="9.2.3: 解决"></a>9.2.3: 解决</h5><p> 使用CountDownLatch解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatchDemo</span> &#123;<br><br><span class="hljs-comment">//指定初始值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">6</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;同学离开&quot;</span>);<br><br>                <span class="hljs-comment">//每个线程执行后,计数-1</span><br>                countDownLatch.countDown();<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br><br>        <span class="hljs-comment">//等待结果减为0,即以上线程执行完成</span><br>        countDownLatch.await();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;班长锁门&quot;</span>);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="9-2-CyclicBarier循环栅栏"><a href="#9-2-CyclicBarier循环栅栏" class="headerlink" title="9.2: CyclicBarier循环栅栏"></a>9.2: CyclicBarier循环栅栏</h4><h5 id="9-2-1-概念"><a href="#9-2-1-概念" class="headerlink" title="9.2.1: 概念"></a>9.2.1: 概念</h5><p> 阻塞指定的线程数,直到阻塞线程都执行完之后,去执行指定的代码</p><p> 9.2.2: 案列</p><p> 收集其7颗龙珠后,执行召唤神龙的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CyclicBarrierDemo</span> &#123;<br><br>    <span class="hljs-comment">//指定阻塞的线程, 此处为收集七龙珠的所有线程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建循环栅栏对象</span><br>        <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cyclicBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(NUM,() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;召唤神龙&quot;</span>);<br>        &#125;);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">7</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;星龙珠已收集&quot;</span>);<br><br>                <span class="hljs-comment">//所有线程任务执行完成之前阻塞</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    cyclicBarrier.await();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>结果:</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301112903.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301112903.png" alt="img"></a></p><h4 id="9-3-Semaphore信号灯"><a href="#9-3-Semaphore信号灯" class="headerlink" title="9.3: Semaphore信号灯"></a>9.3: Semaphore信号灯</h4><h5 id="9-3-1-概念"><a href="#9-3-1-概念" class="headerlink" title="9.3.1: 概念"></a>9.3.1: 概念</h5><p> 可以通过Semaphore设置当前许可多少线程执行,其他线程阻塞等待</p><p> 9.3.2: 案列</p><p> 实现六辆汽车,争抢三个停车位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SemaphoreDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//指定许可执行的线程数,即这里的停车位</span><br>        <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">//模拟线程争抢许可执行, 即这里的汽车争抢停车位</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">6</span>;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                <span class="hljs-comment">//抢占许可</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire();<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;汽车抢占到车位,停车...&quot;</span>);<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">5</span>));<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;离开车位&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">finally</span>&#123;<br>                    <span class="hljs-comment">//释放许可</span><br>                    semaphore.release();<br>                &#125;<br><br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>结果</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301112253.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301112253.png" alt="img"></a></p><h3 id="10-ReentrantReadWriteLock读写锁"><a href="#10-ReentrantReadWriteLock读写锁" class="headerlink" title="10: ReentrantReadWriteLock读写锁"></a>10: ReentrantReadWriteLock读写锁</h3><h4 id="10-1相关锁的介绍"><a href="#10-1相关锁的介绍" class="headerlink" title="10.1相关锁的介绍"></a>10.1相关锁的介绍</h4><p> 悲观锁: 每次执行前都会给对应资源上锁,使其它线程阻塞,执行完之后在释放锁,但不支持并发,</p><p> 乐观锁: 给相应资源添加版本号,操作时判断版本号是否一致,支持并发,</p><p> 行锁: 会给当前修改的行上锁,其他线程操作当前行会阻塞,当多个线程操作多行时,会出现死锁</p><p> 表锁: 会给线程操作的表上锁,其他线程阻塞,不会发生死锁</p><p> 读锁: 也叫共享锁,允许当个线程获取同一份数据,但多个线程获取多份数据可能会发生死锁</p><p> 写锁: 也叫独占锁,排它锁,当前写操作没有完成时,会阻塞其他的读锁和写锁,多个线程操作多条记录也会出现死锁问题</p><p>读锁,写锁死锁问题分析</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301112830.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301112830.png" alt="img"></a></p><h4 id="10-2-ReentrantReadWriteLock-读写锁"><a href="#10-2-ReentrantReadWriteLock-读写锁" class="headerlink" title="10.2 ReentrantReadWriteLock 读写锁"></a>10.2 ReentrantReadWriteLock 读写锁</h4><h5 id="10-2-1-案列分析"><a href="#10-2-1-案列分析" class="headerlink" title="10.2.1: 案列分析"></a>10.2.1: 案列分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCache</span>&#123;<br>    <span class="hljs-comment">//模拟数据缓存</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//写操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在写入数据&quot;</span>);<br>            cache.put(key,value);<br>            <span class="hljs-comment">//模拟写入时间</span><br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写完了&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//读操作</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在读取数据&quot;</span>);<br>            result = cache.get(key);<br>            <span class="hljs-comment">//模拟写入时间</span><br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读完了&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLockDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyCache</span> <span class="hljs-variable">myCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCache</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> i+ <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myCache.put(num,num);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> i+ <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myCache.get(num);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="10-2-2-出现问题"><a href="#10-2-2-出现问题" class="headerlink" title="10.2.2: 出现问题:"></a>10.2.2: 出现问题:</h5><p> <strong>发现数据还没写完,就开始读该数据,不合理</strong></p><h5 id="10-2-3-解决"><a href="#10-2-3-解决" class="headerlink" title="10.2.3: 解决"></a>10.2.3: 解决</h5><p> 使用读写锁ReentrantReadWriteLock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCache</span>&#123;<br>    <span class="hljs-comment">//模拟数据缓存</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//创建读写锁实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><br>    <span class="hljs-comment">//写操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-comment">//写操作----&gt;写锁</span><br>        rwLock.writeLock().lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在写入数据&quot;</span>);<br>            cache.put(key,value);<br>            <span class="hljs-comment">//模拟写入时间</span><br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写完了&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//释放写锁</span><br>            rwLock.writeLock().unlock();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//读操作</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-comment">//读操作----&gt;读锁</span><br>        rwLock.readLock().lock();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在读取数据&quot;</span>);<br>            result = cache.get(key);<br>            <span class="hljs-comment">//模拟写入时间</span><br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读完了&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//释放读锁</span><br>            rwLock.readLock().unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLockDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyCache</span> <span class="hljs-variable">myCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCache</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> i+ <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myCache.put(num,num);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> i+ <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myCache.get(num);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="10-2-4-发现"><a href="#10-2-4-发现" class="headerlink" title="10.2.4: 发现"></a>10.2.4: 发现</h5><p> 写操作是一个一个执行的,读操作是并发进行的,符合描述读写锁的特点</p><p> 一个资源可以被多个读线程访问,或者一个写线程访问,但是读写操作不能存在于一个线程中,<strong>读写互斥,读读共享</strong></p><p> <strong>读的时候不能写,写的时候可以读(锁的降级)</strong></p><h5 id="10-2-5-读写锁演变过程及缺陷"><a href="#10-2-5-读写锁演变过程及缺陷" class="headerlink" title="10.2.5: 读写锁演变过程及缺陷"></a>10.2.5: 读写锁演变过程及缺陷</h5><p> <strong>演变过程</strong></p><p> 1: 无锁情况</p><p> 多线程间互相争抢资源,导致资源争抢很乱出现很多线程安全的问题</p><p> 2: synchronized和lock</p><p> 这两个都是独占锁,读读,读写,写写都只能一个线程通过执行,效率出现问题</p><p> 3: ReentrantReadWriteLock读写锁</p><p> 相对synchronized和lock读读时可以共享的(多线程访问),</p><p> 但是由于其读写互斥的特点,可能出现一致读,没有写的情况,造成写线程 “饿死” 现象</p><p> <strong>缺陷</strong>:</p><p> 因为读写锁是读写互斥的,所以可能出现一致在读,而没有写的问题</p><h5 id="10-2-5-锁的降级"><a href="#10-2-5-锁的降级" class="headerlink" title="10.2.5: 锁的降级"></a>10.2.5: 锁的降级</h5><p> <strong>jdk8说明</strong></p><p> 获取写锁—-&gt;获取读锁—–&gt;释放写锁——&gt;释放读锁</p><p> 这歌过程会使写锁降级为读锁 —–&gt; 写的时候可以读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        <span class="hljs-comment">//获取写锁</span><br>        rwLock.writeLock().lock();<br>        System.out.println(<span class="hljs-string">&quot;---write&quot;</span>);<br>        <span class="hljs-comment">//获取读锁</span><br>        rwLock.readLock().lock();<br>        System.out.println(<span class="hljs-string">&quot;---read&quot;</span>);<br><br>        <span class="hljs-comment">//释放写锁</span><br>        rwLock.writeLock().unlock();<br>        <span class="hljs-comment">//释放读锁</span><br>        rwLock.readLock().unlock();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p> 而读锁不能升级为写锁——-&gt; 读的时候不能写,读–&gt;写互斥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//由于读写互斥,该程序不能执行System.out.println(&quot;---write&quot;);</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br>        <span class="hljs-comment">//获取读锁</span><br>        rwLock.readLock().lock();<br>        System.out.println(<span class="hljs-string">&quot;---read&quot;</span>);<br>        <span class="hljs-comment">//获取写锁</span><br>        rwLock.writeLock().lock();<br>        System.out.println(<span class="hljs-string">&quot;---write&quot;</span>);<br>        <br>        <span class="hljs-comment">//释放读锁</span><br>        rwLock.readLock().unlock();<br><br>        <span class="hljs-comment">//释放写锁</span><br>        rwLock.writeLock().unlock();<br>        <br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="11-BlockingQueue阻塞队列"><a href="#11-BlockingQueue阻塞队列" class="headerlink" title="11: BlockingQueue阻塞队列"></a>11: BlockingQueue阻塞队列</h3><h4 id="11-1-概念与结构"><a href="#11-1-概念与结构" class="headerlink" title="11.1: 概念与结构"></a>11.1: 概念与结构</h4><h5 id="11-1-1-概念"><a href="#11-1-1-概念" class="headerlink" title="11.1.1: 概念"></a>11.1.1: 概念</h5><p> 队列: 即先进先出,或者先进后出(特殊队列栈)的一种数据结构,</p><p> 阻塞: 满足某种条件后时操作线程进入等待状态</p><p> 阻塞队列是一个共享队列,允许多个线程进行操作,<strong>当队列中元素满时,阻塞添加元素的所有队列,直到有元素被其他线程取出</strong></p><p><strong>当队列中元素空时,阻塞所有取出元素队列,直到有其他线程添加元素</strong>,这就是阻塞队列</p><p> <strong>BlockingQueue 很好的解决了多线程中，如何高效安全 “传输”数据的问题。通过这些高效并且线程安全的队列类，为我们快速搭建 高质量的多线程程序带来极大的便利。</strong></p><h5 id="11-1-2-架构图"><a href="#11-1-2-架构图" class="headerlink" title="11.1.2: 架构图"></a>11.1.2: 架构图</h5><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301112099.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301112099.png" alt="img"></a></p><h4 id="11-2-阻塞队列分类"><a href="#11-2-阻塞队列分类" class="headerlink" title="11.2: 阻塞队列分类"></a>11.2: 阻塞队列分类</h4><p> BlockingQueue是一个接口,有父接口Collection,Itetable等,其子接口就是不同的阻塞队列实例</p><p> <strong>1: ArrayBlockingQueue</strong></p><p> 底层由定长的数组实现的有界阻塞队列</p><p> <strong>2: LinkedBlockingQueue</strong></p><p> 底层由链表实现的有界阻塞队列,长度为Integer.MAX_VALUE</p><p> 3: DelayQueue</p><p> 使用优先级队列实现的延迟无界阻塞队列</p><p> 4: PriorityBlockingQueue</p><p> 支持优先级排序的无界阻塞队列</p><p> 5: SynchronousQueue</p><p> 不存储元素的阻塞队列，也即单个元素的队列</p><p> 6: LinkedTransferQueue</p><p> 由链表组成的无界阻塞队列</p><p> 7: LinkedBlockingDeque</p><p> 由链表组成的双向阻塞队列</p><h4 id="11-3-常用方法"><a href="#11-3-常用方法" class="headerlink" title="11.3: 常用方法"></a>11.3: 常用方法</h4><p> 抛出异常 返回特殊值 阻塞 阻塞超时</p><p>添加 add(e)  offer(e)  put(e)  offer(e,时间,时间单位)</p><p>移除 remove()  poll()  tack()  poll(时间,时间单位)</p><p>检查是否存在 element(e)   peek(e) 没有 没有</p><h3 id="12-线程池ThreadPool"><a href="#12-线程池ThreadPool" class="headerlink" title="12: 线程池ThreadPool"></a>12: 线程池ThreadPool</h3><h4 id="12-1-概述和架构"><a href="#12-1-概述和架构" class="headerlink" title="12.1: 概述和架构"></a>12.1: 概述和架构</h4><h5 id="12-1-1-概述"><a href="#12-1-1-概述" class="headerlink" title="12.1.1: 概述"></a>12.1.1: 概述</h5><p> 类似连接池,将线程统一管理,先将线程创建好,放入池子中,省去每次创建和销毁线程的过程,可以降低资源消耗和提 高响应速度,统一管理</p><h5 id="12-1-2-架构"><a href="#12-1-2-架构" class="headerlink" title="12.1.2: 架构"></a>12.1.2: 架构</h5><p> Executors为对应工具类</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301113793.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301113793.png" alt="img"></a></p><h4 id="12-2-线程池的分类和使用"><a href="#12-2-线程池的分类和使用" class="headerlink" title="12.2: 线程池的分类和使用"></a>12.2: 线程池的分类和使用</h4><h5 id="12-2-1-线程池的分类"><a href="#12-2-1-线程池的分类" class="headerlink" title="12.2.1: 线程池的分类"></a>12.2.1: 线程池的分类</h5><p> <strong>1: Executors.newFixedThreadPool(int n) : 一池N线程</strong></p><p> 特点:</p><p> 指定一个线程池中有多少个线程,线程池中的线程处于一定的量</p><p> 可以很好的控制线程的并发量 线程可以重复被使用</p><p> 在显示关闭之前，都将一直存在</p><p> 超出一定量的线程被提交时候需在队列中等待</p><p> 2: <strong>Executors.newSingleThreadExecutor()</strong> : 一池一线程</p><p> 特点:</p><p> 线程池中最多执行 1 个线程，之后提交的线程活动将会排在队列中以此 执行</p><p> 3: <strong>Executors.newCachedThreadPool()</strong> : 一池可扩容线程</p><p> 线程池中数量没有固定，可达到最大值（Interger. MAX_VALUE</p><p> 线程池中的线程可进行缓存重复利用和回收（回收默认时间为 1 分钟）</p><p> 当线程池中，没有可用线程，会重新创建一个线程</p><p> <strong>前三个底层都是采用ThreadPoolExecutor类的构造器实现的</strong></p><p> 4: newScheduleThreadPool()</p><p> 线程池中具有指定数量的线程，即便是空线程也将保留</p><p> 可定时或者 延迟执行线程活动</p><p> 适用于需要多个后台线程执行周期任务的场景</p><p> 5: newWorkStealingPool</p><p> jdk1.8 提供的线程池，底层使用的是 ForkJoinPool 实现，创建一个拥有多个 任务队列的线程池，可以减少连接数， 创建当前可用 cpu 核数的线程来并行执 行任务</p><h5 id="12-2-2-使用案例"><a href="#12-2-2-使用案例" class="headerlink" title="12.2.2: 使用案例"></a>12.2.2: 使用案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//newFixedThreadPool(int n)</span><br><span class="hljs-comment">//        ExecutorService pool1 = Executors.newFixedThreadPool(5);</span><br><br>        <span class="hljs-comment">//newSingleThreadExecutor()</span><br><span class="hljs-comment">//        ExecutorService pool2 = Executors.newSingleThreadExecutor();</span><br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool3</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                pool3.execute(()-&gt;&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;办理业务&quot;</span>);<br>                &#125;);<br>            &#125;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            pool3.shutdown();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="12-3-线程池的七个参数"><a href="#12-3-线程池的七个参数" class="headerlink" title="12.3: 线程池的七个参数"></a>12.3: 线程池的七个参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//int corePoolSize: 常驻线程数量</span><br><span class="hljs-comment">//int maximumPoolSize: 最大线程数量</span><br><span class="hljs-comment">//long keepAliveTime: 存活时间</span><br><span class="hljs-comment">//TimeUnit unit: 存活时间单位</span><br><span class="hljs-comment">//BlockingQueue&lt;Runnable&gt; workQueue: 阻塞队列</span><br><span class="hljs-comment">//ThreadFactory threadFactory: 线程工厂</span><br><span class="hljs-comment">//RejectedExecutionHandler handler: 拒绝策略</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                              <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                              <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                              TimeUnit unit,</span><br><span class="hljs-params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                              ThreadFactory threadFactory,</span><br><span class="hljs-params">                              RejectedExecutionHandler handler)</span> &#123;...&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="12-4-线程池运行流程和拒绝策略"><a href="#12-4-线程池运行流程和拒绝策略" class="headerlink" title="12.4: 线程池运行流程和拒绝策略"></a>12.4: 线程池运行流程和拒绝策略</h4><h5 id="12-4-1-运行流程"><a href="#12-4-1-运行流程" class="headerlink" title="12.4.1: 运行流程"></a>12.4.1: 运行流程</h5><p> ①主线程中调用线程池中的execute方法</p><p> <strong>注意:</strong> 创建线程池后,其中线程会清零,创建线程池对象时不会创建线程,只有调用execute方法执行传入该方法中Runnable接口 实现类的run方法时才创建线程</p><p> ②如果当前线程池中线程数少于常驻线程数(corePoolSize),创建线程处理当前任务</p><p> ③如果线程池中线程数大于或等于常驻线程数,那就把当前任务丢入阻塞队列(workQueue)中,进行等待</p><p> ④这时如果阻塞队列满了,且当前线程数小于最大线程数,就新建一个线程进行处理该任务</p><p> ⑤如果当前线程数已经大于或等于最大线程数(maximumPoolSize),就使用相应的拒绝策略处理</p><p> ⑥当一个线程处于空闲状态时间超过设定的存活时间(keepAliveTime),且当前线程池中线程数大于常驻线程数(corePoolSize),就将该线程停掉,最终线程池中线程数会收缩到常驻线程数(corePoolSize)大小</p><h4 id="12-5-自定义线程池"><a href="#12-5-自定义线程池" class="headerlink" title="12.5: 自定义线程池"></a>12.5: 自定义线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomizeThreadPool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> PoolUtil.getThreadPool();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br>                threadPool.execute(()-&gt;&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;办理业务&quot;</span>);<br>                &#125;);<br>            &#125;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            threadPool.shutdown();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PoolUtil</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadPoolExecutor <span class="hljs-title function_">getThreadPool</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">2</span>,<br>                               <span class="hljs-number">5</span>,<br>                               <span class="hljs-number">10</span>,<br>                               TimeUnit.SECONDS,<br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>(<span class="hljs-number">3</span>),<br>                               Executors.defaultThreadFactory(),<br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()<br>        );<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="13-Fork-Join分支合并框架"><a href="#13-Fork-Join分支合并框架" class="headerlink" title="13: Fork&#x2F;Join分支合并框架"></a>13: Fork&#x2F;Join分支合并框架</h3><h4 id="13-1-思想"><a href="#13-1-思想" class="headerlink" title="13.1: 思想"></a>13.1: 思想</h4><p> Fork&#x2F;Join 它可以将一个大的任务拆分成多个子任务进行并行处理，最后将子任务结果合并成最后的计算结果，并进行输出。</p><p> Fork&#x2F;Join 框架要完成两件事情：</p><p> Fork：把一个复杂任务进行分拆，大事化小</p><p> Join：把分拆任务的结果进行合并</p><h4 id="13-2-结构"><a href="#13-2-结构" class="headerlink" title="13.2: 结构"></a>13.2: 结构</h4><p> 1: ForkJoinTask:我们要使用 Fork&#x2F;Join 框架，首先需要创建一个 ForkJoin 任务。 该类提供了在任务中执行 fork 和 join 的机 制。通常情况下我们不需要直接集 成 ForkJoinTask 类，只需要继承它的子类，Fork&#x2F;Join 框架提供了两个子类： RecursiveAction：用于没有返回结果的任务</p><p> RecursiveTask:用于有返回结果的任务</p><p> 2: ForkJoinPool:ForkJoinTask 需要通过 ForkJoinPool 来执行</p><p>3: RecursiveTask: 继承后可以实现递归(自己调自己)调用的任务</p><h4 id="13-3-案例"><a href="#13-3-案例" class="headerlink" title="13.3: 案例"></a>13.3: 案例</h4><p> 实现分开计算1+…+100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkJoinDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//分支合并池</span><br>        <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">forkJoinPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>();<br><br>        <span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>);<br><br>        ForkJoinTask&lt;Integer&gt; forkJoinTask = forkJoinPool.submit(myTask);<br><br>        <span class="hljs-comment">//获取计算结果</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> forkJoinTask.get();<br><br>        System.out.println(integer);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        forkJoinPool.shutdown();<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">VALUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">//规定差值大于时就进行拆分</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> begin;<span class="hljs-comment">//相加起始值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> end;<span class="hljs-comment">//相加结束值</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> result;<span class="hljs-comment">//封装计算结果</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask</span><span class="hljs-params">(<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end)</span>&#123;<br>        <span class="hljs-built_in">this</span>.begin = begin;<br>        <span class="hljs-built_in">this</span>.end = end;<br>    &#125;<br><br>    <span class="hljs-comment">//拆分合并的过程</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//判断起始值与结束值差值,进行拆分</span><br>        <span class="hljs-keyword">if</span>((end-begin)&lt;=VALUE)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> begin;i &lt;= end;i++)&#123;<br>                result += i;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//计算中间值,进行左右递归拆分</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">midValue</span> <span class="hljs-operator">=</span> (begin + end) /<span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//左递归拆分</span><br>            <span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(begin, midValue);<br>            myTask1.fork();<br>            <span class="hljs-comment">//右递归拆分</span><br>            <span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(midValue + <span class="hljs-number">1</span>, end);<br>            myTask2.fork();<br><br>            <span class="hljs-comment">//合并结果</span><br>            result = myTask1.join() + myTask2.join();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="14-CompletableFuture异步回调"><a href="#14-CompletableFuture异步回调" class="headerlink" title="14: CompletableFuture异步回调"></a>14: CompletableFuture异步回调</h3><h4 id="14-1-异步和同步-略"><a href="#14-1-异步和同步-略" class="headerlink" title="14.1: 异步和同步 略"></a>14.1: 异步和同步 略</h4><h4 id="14-2-实现案例"><a href="#14-2-实现案例" class="headerlink" title="14.2: 实现案例"></a>14.2: 实现案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//没有返回值的异步回调</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">CompletableFuture</span> <span class="hljs-variable">completableFuture1</span> <span class="hljs-operator">=</span> CompletableFuture.runAsync(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; completableFuture1&quot;</span>);<br>        &#125;);<br><br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br><br>        <span class="hljs-comment">//结束异步回调</span><br>        completableFuture1.get();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>结果:</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301113830.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301113830.png" alt="img"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//有返回值的异步回调</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureDemo1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-type">CompletableFuture</span> <span class="hljs-variable">completableFuture2</span> <span class="hljs-operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; completableFuture1&quot;</span>);<br><span class="hljs-comment">//            int i = 10/0;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>        &#125;);<br><br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br><br>        <span class="hljs-comment">//结束异步回调</span><br>        <span class="hljs-comment">//参数t:返回值</span><br>        <span class="hljs-comment">//参数u:出现的异常</span><br>        completableFuture2.whenComplete((t,u) -&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;---t=&quot;</span> + t);<br>            System.out.println(<span class="hljs-string">&quot;---u=&quot;</span> + u);<br>        &#125;).get();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>发现:</p><p> <strong>异步回调只有当CompletableFuture对象调用get方法时结束,且不影响主线程执行顺序</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB</title>
    <link href="/2023/07/27/MongoDB/"/>
    <url>/2023/07/27/MongoDB/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h3 id="1-相关介绍"><a href="#1-相关介绍" class="headerlink" title="1: 相关介绍"></a>1: 相关介绍</h3><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1: 概念"></a>1.1: 概念</h4><p> MongoDB是一个开源、高性能、无模式的文档型数据库，当初的设计就是用于简化开发和方便扩展，是NoSQL数据库产品中的一种。是最 像关系型数据库（MySQL）的非关系型数据库。 它支持的数据结构非常松散，是一种类似于 JSON 的 格式叫BSON，所以它既可以存储比较复杂的数据类型，又相当的灵活。</p><h4 id="1-2-与MySql对比"><a href="#1-2-与MySql对比" class="headerlink" title="1.2: 与MySql对比"></a>1.2: 与MySql对比</h4><table><thead><tr><th>SQL术语&#x2F;概念</th><th>MongoDB术语&#x2F;概念</th><th>解释&#x2F;说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>数据字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接,MongoDB不支持</td></tr><tr><td></td><td>嵌入文档</td><td>MongoDB通过嵌入式文档来替代多表连接</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h4 id="1-3-MongoDB数据模型"><a href="#1-3-MongoDB数据模型" class="headerlink" title="1.3: MongoDB数据模型"></a>1.3: MongoDB数据模型</h4><p> MongoDB的最小存储单位就是文档(document)对象。文档(document)对象对应于关系型数据库的行。<strong>数据在MongoDB中以 BSON（Binary-JSON）文档的格式存储在磁盘上。</strong></p><p> <strong>BSON（Binary Serialized Document Format）是一种类json的一种二进制形式的存储格式，简称Binary JSON。</strong>BSON和JSON一样，支持 内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和BinData类型。</p><h4 id="1-4-应用场景"><a href="#1-4-应用场景" class="headerlink" title="1.4: 应用场景"></a>1.4: 应用场景</h4><p> 传统的关系型数据库（如MySQL），在数据操作的“三高”需求以及应对Web2.0的网站需求面前，显得力不从心。</p><p> <strong>三高”需求：</strong> </p><p> • High performance - 对数据库<strong>高并发读写的需求</strong>。</p><p> • Huge Storage - 对海量数据的<strong>高效率存储和访问的需求</strong>。</p><p> • High Scalability &amp;&amp; High Availability- 对数据库的<strong>高可扩展性和高可用性的需求。</strong></p><p> 适用场景:</p><p> （1）数据量大</p><p> （2）写入操作频繁（读写都很频繁）</p><p> （3）价值较低的数据，对事务性要求不高, 对于这样的数据，我们更适合使用MongoDB来实现数据的存储。</p><h4 id="1-5-MongoDB特点"><a href="#1-5-MongoDB特点" class="headerlink" title="1.5: MongoDB特点"></a>1.5: MongoDB特点</h4><p> 1）高性能：</p><p> MongoDB提供高性能的数据持久性。特别是, 对嵌入式数据模型的支持减少了数据库系统上的I&#x2F;O活动。 索引支持 更快的查询，并且可以包含来自嵌入式文档和数组的键。（文本索引解决搜索的需求、TTL索引解决历史数据自动过期 的需求、地理位置索引可用于构建各种 O2O 应用） mmapv1、wiredtiger、mongorocks（rocksdb）、in-memory 等多引擎支持满足各种场景需求。 Gridfs解决文件存储的需求。</p><p> 2）高可用性：</p><p> MongoDB的复制工具称为副本集（replica set），它可提供自动故障转移和数据冗余。</p><p> 3）高扩展性： MongoDB提供了水平可扩展性作为其核心功能的一部分。 分片将数据分布在一组集群的机器上。 （海量数据存储，服务能力水平扩展） 从3.4开始，MongoDB支持基于片键创建数据区域。在一个平衡的集群 中，MongoDB将一个区域所覆盖的读写只定向到该区域内的那些片。</p><p> 4）丰富的查询支持：</p><p> MongoDB支持丰富的查询语言，支持读和写操作(CRUD)，比如数据聚合、文本搜索和地理空间查询等。</p><p> 5）其他特点：</p><p> 如无模式（动态模式）、灵活的文档模型、</p><h3 id="2-单机部署及连接"><a href="#2-单机部署及连接" class="headerlink" title="2: 单机部署及连接"></a>2: 单机部署及连接</h3><h4 id="2-1-Windows"><a href="#2-1-Windows" class="headerlink" title="2.1: Windows"></a>2.1: Windows</h4><p> 下载zip: <a href="https://www.mongodb.com/download-center#community">https://www.mongodb.com/download-center#community</a></p><p> 解压启动:</p><p> 方式一:</p><p> 先创建一个文件目录存储数据库</p><p> cmd命令: mongod –dbpath&#x3D;数据库存储路径</p><p> 方式二: 创建一个文件目录存储数据库,和配置文件mongod.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment">#写入配置</span><br><span class="hljs-attr">storage:</span><br><span class="hljs-comment">#The directory where the mongod instance stores its data.Default Value is &quot;\data\db&quot; on Windows.</span><br><span class="hljs-attr">dbPath:</span> <span class="hljs-string">D:\02_Server\DBServer\mongodb-win32-x86_64-2008plus-ssl-4.0.1\data</span><br><br><br></code></pre></td></tr></table></figure><p> 通过配置文件启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">mongod -f ../config/mongod.conf<br>或<br>mongod --config ../config/mongod.conf<br><br><br></code></pre></td></tr></table></figure><h4 id="2-2-Linux"><a href="#2-2-Linux" class="headerlink" title="2.2: Linux"></a>2.2: Linux</h4><p> 通过docker安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">拉取镜像</span> <br>docker pull mongo:latest<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建和启动容器</span> <br>docker run -d --restart=always -p 27017:27017 --name mymongo -v /data/db:/data/db -d mongo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器</span> <br>docker exec -it mymongo/bin/bash <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用MongoDB客户端进行操作</span> <br>mongo <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">show dbs <span class="hljs-comment">#查询所有的数据库</span></span> <br><br><br></code></pre></td></tr></table></figure><h4 id="2-3-连接数据库方式"><a href="#2-3-连接数据库方式" class="headerlink" title="2.3: 连接数据库方式"></a>2.3: 连接数据库方式</h4><p> 命令行连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">本地: 直接mongo<br>或者 mongo --host=ip --port=port<br><br><br></code></pre></td></tr></table></figure><p> 图形化工具</p><p> compass或者NoSQLBooster for MongoDB等图形化工具</p><h3 id="3-基本的常用命令"><a href="#3-基本的常用命令" class="headerlink" title="3: 基本的常用命令"></a>3: 基本的常用命令</h3><h4 id="3-1-数据库操作"><a href="#3-1-数据库操作" class="headerlink" title="3.1: 数据库操作"></a>3.1: 数据库操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">选择和创建数据库,有就切换,没有就创建,由于mongodb分层的(内存 + 磁盘),创建时是在内存中,只有在该库中创建集合才持久化到磁盘</span><br>use 数据库名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除数据库</span><br>db.dropDatabase()<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前库</span><br>db<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前磁盘中所有数据库</span><br>show dbs<br>show databases<br><br><br></code></pre></td></tr></table></figure><h4 id="3-2-集合的操作"><a href="#3-2-集合的操作" class="headerlink" title="3.2: 集合的操作"></a>3.2: 集合的操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">显示创建集合</span><br>db.createCollection(collectionName)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">隐式创建: 当向一个不存在的集合中添加文档时,自动创建</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示当前数据库中所有集合</span><br>show collections<br>show tables<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除指定集合</span><br>db.集合名.drop()<br><br><br></code></pre></td></tr></table></figure><h4 id="3-3-文档操作"><a href="#3-3-文档操作" class="headerlink" title="3.3: 文档操作"></a>3.3: 文档操作</h4><h5 id="3-3-1-文档插入"><a href="#3-3-1-文档插入" class="headerlink" title="3.3.1: 文档插入"></a>3.3.1: 文档插入</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">单个文档插入</span><br>db.集合名.insert(&#123;&quot;key&quot;:&quot;value&quot;,&quot;key&quot;:&quot;value&quot;,...&#125;)<br>db.集合名.save(&#123;&quot;key&quot;:&quot;value&quot;,&quot;key&quot;:&quot;value&quot;,...&#125;)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">1）集合如果不存在，则会隐式创建</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2）mongo中的数字，默认情况下是double类型，如果要存整型，必须使用函数NumberInt(整型数字)，否则取出来就有问题了。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3）插入当前日期使用 new Date()</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4）插入的数据没有指定 _id ，会自动生成主键值</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5）如果某字段没值，可以赋值为null，或不写该字段。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如下:</span> <br>db.comment.insert(&#123;&quot;articleid&quot;:&quot;100000&quot;,&quot;content&quot;:&quot;今天天气真好，阳光明媚&quot;,&quot;userid&quot;:&quot;1001&quot;,&quot;nickname&quot;:&quot;Rose&quot;,&quot;createdatetime&quot;:new Date(),&quot;likenum&quot;:NumberInt(10),&quot;state&quot;:null&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1. 文档中的键/值对是有序的。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2. 文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3. MongoDB区分类型和大小写。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4. MongoDB的文档不能有重复的键。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5. 文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">批量文档插入</span><br>db.集合名.insertmany([&#123;&quot;key&quot;:&quot;value&quot;,&quot;key&quot;:&quot;value&quot;,...&#125;,&#123;&quot;key&quot;:&quot;value&quot;,&quot;key&quot;:&quot;value&quot;,...&#125;,...])<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">插入时指定了 _id ，则主键就是该值。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果某条数据插入失败，将会终止插入，但已经插入成功的数据不会回滚掉。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">因为批量插入由于数据较多容易出现失败，因此，可以使用try catch进行异常捕捉处理，测试的时候可以不处理。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">try-catch</span><br>try&#123;<br>db.集合名.insertmany([&#123;&quot;key&quot;:&quot;value&quot;,&quot;key&quot;:&quot;value&quot;,...&#125;,<br>&#123;&quot;key&quot;:&quot;value&quot;,&quot;key&quot;:&quot;value&quot;,...&#125;,<br>...]);<br>&#125;catch(e)&#123;<br>print(e)<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="3-3-2-文档的查询"><a href="#3-3-2-文档的查询" class="headerlink" title="3.3.2: 文档的查询"></a>3.3.2: 文档的查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">查询所有文档--&gt;集合中所有数据</span><br>db.集合名.find()<br>db.集合名.find(&#123;&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">条件查询---&gt;添加指定字段和字段值查询</span><br>db.集合名.find(&#123;&quot;key&quot;:&quot;value&quot;&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">条件查询结果值返回第一条</span><br>db.集合名.findOne(&#123;&quot;key&quot;:&quot;value&quot;&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">投影查询</span><br>db.集合名.find(&#123;&quot;key&quot;:&quot;value&quot;&#125;,&#123;&quot;key&quot;:1,&quot;_id&quot;:0&#125;)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">前面&#123;&#125;中为查询条件,可以为空,代表查询所有</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">后面的&#123;&#125;中为结果中显示的列,1为显示,0为不显示且这样写之后所有列默认为0</span><br><br><br></code></pre></td></tr></table></figure><h5 id="3-3-3-文档的更新"><a href="#3-3-3-文档的更新" class="headerlink" title="3.3.3: 文档的更新"></a>3.3.3: 文档的更新</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">覆盖修改</span><br>db.集合名.update(&#123;&quot;key&quot;:&quot;value&quot;&#125;,&#123;&quot;key&quot;,&quot;value&quot;&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">第一个&#123;&#125;表示查询条件,可有多个</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二个表示修改的字段和修改后的值,可以有多个</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">但是这种会将原来的文档覆盖,只存在修改后的字段和值</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">局部修改--&gt;可避免文档中其他列被覆盖,其他与覆盖修改类似</span><br>db.集合名.update(&#123;&quot;key&quot;:&quot;value&quot;&#125;,&#123;$set:&#123;&quot;key&quot;,&quot;value&quot;&#125;&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">批量修改,当有多条修改数据时,默认只修改第一条,以上方式</span><br>db.集合名.update(&#123;&quot;key&quot;:&quot;value&quot;&#125;,&#123;$set:&#123;&quot;key&quot;,&quot;value&quot;&#125;&#125;,&#123;multi:true&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列值增加/减少</span><br>db.comment.update(&#123;key:&quot;value&quot;&#125;,&#123;$inc:&#123;likenum:NumberInt(1)&#125;&#125;) #likenum列增加1<br><br><br></code></pre></td></tr></table></figure><h5 id="3-3-4-文档的删除"><a href="#3-3-4-文档的删除" class="headerlink" title="3.3.4: 文档的删除"></a>3.3.4: 文档的删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">全部删除</span><br>db.集合名.remove(&#123;&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">条件删除</span><br>db.集合名.remove(&#123;条件&#125;)<br><br><br></code></pre></td></tr></table></figure><h5 id="3-3-5-文档的统计查询"><a href="#3-3-5-文档的统计查询" class="headerlink" title="3.3.5: 文档的统计查询"></a>3.3.5: 文档的统计查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">查询集合中所有文档数</span><br>db.集合名.count()<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询集合中满足条件的记录数</span><br>db.集合名.count(&#123;条件&#125;)<br><br><br></code></pre></td></tr></table></figure><h5 id="3-3-6-文档的分页查询"><a href="#3-3-6-文档的分页查询" class="headerlink" title="3.3.6: 文档的分页查询"></a>3.3.6: 文档的分页查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">skip(m): 跳过m条记录</span><br>db.集合名.find().skip(m)<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">limit</span>(n): 显示前n条记录</span><br>db.集合名.find().limit(n)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示m到n之间记录</span><br>db.集合名.find().skip(m).limit(n) <br><br><br></code></pre></td></tr></table></figure><h5 id="3-3-7-文档的排序查询"><a href="#3-3-7-文档的排序查询" class="headerlink" title="3.3.7: 文档的排序查询"></a>3.3.7: 文档的排序查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">1: 升序, -1: 降序</span><br>db.集合名.find().sort(&#123;key:1,key:-1&#125;)<br><br><br></code></pre></td></tr></table></figure><p><strong>注意: skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()，和命令编写顺序无关。</strong></p><h5 id="3-3-8-其他查询"><a href="#3-3-8-其他查询" class="headerlink" title="3.3.8: 其他查询"></a>3.3.8: 其他查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">正则查询</span><br>db.集合名.find(key:/正则表达式/&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/哈哈/ : 查询key对应的之中1包含<span class="hljs-string">&quot;哈哈&quot;</span>的文档记录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">/^李/ : 查询以<span class="hljs-string">&quot;李&quot;</span>开头的文档记录</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">比较查询</span><br>db.集合名称.find(&#123; &quot;field&quot; : &#123; $gt: value &#125;&#125;) // 大于: field &gt; value<br>db.集合名称.find(&#123; &quot;field&quot; : &#123; $lt: value &#125;&#125;) // 小于: field &lt; value<br>db.集合名称.find(&#123; &quot;field&quot; : &#123; $gte: value &#125;&#125;) // 大于等于: field &gt;= value<br>db.集合名称.find(&#123; &quot;field&quot; : &#123; $lte: value &#125;&#125;) // 小于等于: field &lt;= value<br>db.集合名称.find(&#123; &quot;field&quot; : &#123; $ne: value &#125;&#125;) // 不等于: field != value<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">包含查询</span><br>db.comment.find(&#123;userid:&#123;$in:[&quot;1003&quot;,&quot;1004&quot;]&#125;&#125;) # 查询userid包含1003和1004的记录<br>db.comment.find(&#123;userid:&#123;$nin:[&quot;1003&quot;,&quot;1004&quot;]&#125;&#125;)# 查询userid不包含1003和1004的记录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">条件连接查询---&gt;类似mysql中的and,or</span><br>db.comment.find(&#123;$and:[&#123;likenum:&#123;$gte:NumberInt(700)&#125;&#125;,&#123;likenum:&#123;$lt:NumberInt(2000)&#125;&#125;]&#125;)<br>db.comment.find(&#123;$or:[ &#123;userid:&quot;1003&quot;&#125; ,&#123;likenum:&#123;$lt:1000&#125; &#125;]&#125;)<br><br><br></code></pre></td></tr></table></figure><h3 id="4-索引"><a href="#4-索引" class="headerlink" title="4: 索引"></a>4: 索引</h3><p> 一种特殊数据结构,mongodb索引有b-Tree实现</p><p> 一种将字段排好序的数据结构</p><h4 id="4-1-索引类型"><a href="#4-1-索引类型" class="headerlink" title="4.1: 索引类型"></a>4.1: 索引类型</h4><h5 id="4-1-1-单字段索引"><a href="#4-1-1-单字段索引" class="headerlink" title="4.1.1: 单字段索引"></a>4.1.1: 单字段索引</h5><p> 只有一个字段作为索引,</p><h5 id="4-1-2-复合索引"><a href="#4-1-2-复合索引" class="headerlink" title="4.1.2: 复合索引"></a>4.1.2: 复合索引</h5><p> 多个字段排序索引</p><h5 id="4-1-3-其他索引"><a href="#4-1-3-其他索引" class="headerlink" title="4.1.3: 其他索引"></a>4.1.3: 其他索引</h5><h6 id="1-地理空间索引（Geospatial-Index）"><a href="#1-地理空间索引（Geospatial-Index）" class="headerlink" title="1: 地理空间索引（Geospatial Index）"></a>1: 地理空间索引（Geospatial Index）</h6><p> 为了支持对地理空间坐标数据的有效查询，MongoDB提供了两种特殊的索引：返回结果时使用平面几何的二维索引和返回 结果时使用球面 几何的二维球面索引。</p><h6 id="2-文本索引（Text-Indexes）"><a href="#2-文本索引（Text-Indexes）" class="headerlink" title="2: 文本索引（Text Indexes）"></a>2: 文本索引（Text Indexes）</h6><p> MongoDB提供了一种文本索引类型，支持在集合中搜索字符串内容。这些文本索引不存储特定于语言的停止词（例 如“the”、“a”、“or”）， 而将集合中的词作为词干，只存储根词。</p><h6 id="3-哈希索引（Hashed-Indexes）"><a href="#3-哈希索引（Hashed-Indexes）" class="headerlink" title="3: 哈希索引（Hashed Indexes）"></a>3: 哈希索引（Hashed Indexes）</h6><p> 为了支持基于散列的分片，MongoDB提供了散列索引类型，它对字段值的散列进行索引。这些索引在其范围内的值分布更 加随机，但只支 持相等匹配，不支持基于范围的查询。</p><h4 id="4-2-索引的操作"><a href="#4-2-索引的操作" class="headerlink" title="4.2: 索引的操作"></a>4.2: 索引的操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">查询集合中所有的索引</span><br>db.集合名.getIndexes()<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建索引</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">一个key即为单值索引,多个key即为复合索引</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">1: 升序索引  -1:降序索引</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">options: 其他选项,一般可以不写</span><br>db.集合名.createIndex(&#123;key1:1,key2:-1&#125;,options)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除指定索引,索引名可通过查出 指定要删除的索引。可以通过索引名称或索引规范文档指定索引。若要删除文本索引，请指定</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">索引名称。推荐直接使用名称删除索引</span><br>db.集合名.dropIndex(索引名)<br><br><br></code></pre></td></tr></table></figure><p> 4.3: 执行计划</p><p> 通过explain分析查询性能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">查询命令.explain() 分析查询性能</span><br>db.comment.find(&#123;userid:&quot;1003&quot;&#125;).explain()<br><br><br></code></pre></td></tr></table></figure><h3 id="5-整合springboot"><a href="#5-整合springboot" class="headerlink" title="5:整合springboot"></a>5:整合springboot</h3><h4 id="5-1-配置"><a href="#5-1-配置" class="headerlink" title="5.1: 配置"></a>5.1: 配置</h4><p> 1: pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br><br></code></pre></td></tr></table></figure><p> 2:yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">mongodb:</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">mongodb://ip:端口/数据库</span><br><br><br></code></pre></td></tr></table></figure><p> 3: 主启动,业务类等</p><h4 id="5-2-基于MongoTemplate的CRUD"><a href="#5-2-基于MongoTemplate的CRUD" class="headerlink" title="5.2: 基于MongoTemplate的CRUD"></a>5.2: 基于MongoTemplate的CRUD</h4><p> 1: 添加集合对应的实体类</p><p> @Document(collection &#x3D; “集合”): 指定集合</p><p> @Id: 主键</p><p> @Field: 指定属性对应的字段</p><p> @Indexed: 创建该属性对应字段的单值索引,也可以通过命令行进行创建(前面有)</p><p> @CompoundIndex( def &#x3D; “{‘userid’: 1, ‘nickname’: -1}”): 标注在类上,指定复合索引</p><p> 2: 案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemomogoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br><br>    <span class="hljs-comment">//添加</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setName(<span class="hljs-string">&quot;test&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;4932200@qq.com&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mongoTemplate.insert(user);<br>        System.out.println(user1);<br>    &#125;<br><br>    <span class="hljs-comment">//查询所有</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUser</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; userList = mongoTemplate.findAll(User.class);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <br>mongoTemplate.findById(<span class="hljs-string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>, User.class);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-comment">//条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria<br>                .where(<span class="hljs-string">&quot;name&quot;</span>).is(<span class="hljs-string">&quot;test&quot;</span>)<br>                .and(<span class="hljs-string">&quot;age&quot;</span>).is(<span class="hljs-number">20</span>));<br>        List&lt;User&gt; userList = mongoTemplate.find(query, User.class);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//模糊查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUsersLikeName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;est&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s%s%s&quot;</span>, <span class="hljs-string">&quot;^.*&quot;</span>, name, <span class="hljs-string">&quot;.*$&quot;</span>);<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex, Pattern.CASE_INSENSITIVE);<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).regex(pattern));<br>        List&lt;User&gt; userList = mongoTemplate.find(query, User.class);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//分页查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUsersPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;est&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s%s%s&quot;</span>, <span class="hljs-string">&quot;^.*&quot;</span>, name, <span class="hljs-string">&quot;.*$&quot;</span>);<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex, Pattern.CASE_INSENSITIVE);<br>        query.addCriteria(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).regex(pattern));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) mongoTemplate.count(query, User.class);<br>        List&lt;User&gt; userList = mongoTemplate.find(query.skip((pageNo - <span class="hljs-number">1</span>) * pageSize).limit(pageSize), User.class);<br><br>        Map&lt;String, Object&gt; pageMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        pageMap.put(<span class="hljs-string">&quot;list&quot;</span>, userList);<br>        pageMap.put(<span class="hljs-string">&quot;totalCount&quot;</span>,totalCount);<br>        System.out.println(pageMap);<br>    &#125;<br><br>    <span class="hljs-comment">//修改</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mongoTemplate.findById(<span class="hljs-string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>, User.class);<br>        user.setName(<span class="hljs-string">&quot;test_1&quot;</span>);<br>        user.setAge(<span class="hljs-number">25</span>);<br>        user.setEmail(<span class="hljs-string">&quot;493220990@qq.com&quot;</span>);<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(user.getId()));<br>        <span class="hljs-type">Update</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Update</span>();<br>        update.set(<span class="hljs-string">&quot;name&quot;</span>, user.getName());<br>        update.set(<span class="hljs-string">&quot;age&quot;</span>, user.getAge());<br>        update.set(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());<br>        <span class="hljs-type">UpdateResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mongoTemplate.upsert(query, update, User.class);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> result.getModifiedCount();<br>        System.out.println(count);<br>    &#125;<br><br>    <span class="hljs-comment">//删除操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(<span class="hljs-string">&quot;5ffbfa2ac290f356edf9b5aa&quot;</span>));<br>        <span class="hljs-type">DeleteResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mongoTemplate.remove(query, User.class);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> result.getDeletedCount();<br>        System.out.println(count);<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h4 id="5-3-基于MongoRepository的CRUD"><a href="#5-3-基于MongoRepository的CRUD" class="headerlink" title="5.3: 基于MongoRepository的CRUD"></a>5.3: 基于MongoRepository的CRUD</h4><p> SpringData实现了对mongoDB的访问支持,只需继承MongoRepository,<strong>遵循SpringData命名规范即可,底层自动生成相应方法</strong></p><p> 5.3.1:规范</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301114398.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301114398.png" alt="img"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.atguigu.mongodb.repository;<br><br><span class="hljs-keyword">import</span> com.atguigu.mongodb.entity.User;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;User, String&gt; &#123;<br><br>&#125;<br><br><span class="hljs-number">4.3</span> 添加测试类<br>在/test/java下面添加测试类： <br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemomogoApplicationTests1</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-comment">//添加</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;3332200@qq.com&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">//查询所有</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUser</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; userList = userRepository.findAll();<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(<span class="hljs-string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>).get();<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-comment">//条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setAge(<span class="hljs-number">20</span>);<br>        Example&lt;User&gt; userExample = Example.of(user);<br>        List&lt;User&gt; userList = userRepository.findAll(userExample);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//模糊查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUsersLikeName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//创建匹配器，即如何使用查询条件</span><br>        <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching() <span class="hljs-comment">//构建对象</span><br>                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) <span class="hljs-comment">//改变默认字符串匹配方式：模糊查询</span><br>                .withIgnoreCase(<span class="hljs-literal">true</span>); <span class="hljs-comment">//改变默认大小写忽略方式：忽略大小写</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;三&quot;</span>);<br>        Example&lt;User&gt; userExample = Example.of(user, matcher);<br>        List&lt;User&gt; userList = userRepository.findAll(userExample);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">//分页查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUsersPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Sort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> Sort.by(Sort.Direction.DESC, <span class="hljs-string">&quot;age&quot;</span>);<br><span class="hljs-comment">//0为第一页</span><br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, sort);<br><span class="hljs-comment">//创建匹配器，即如何使用查询条件</span><br>        <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching() <span class="hljs-comment">//构建对象</span><br>                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) <span class="hljs-comment">//改变默认字符串匹配方式：模糊查询</span><br>                .withIgnoreCase(<span class="hljs-literal">true</span>); <span class="hljs-comment">//改变默认大小写忽略方式：忽略大小写</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;三&quot;</span>);<br>        Example&lt;User&gt; userExample = Example.of(user, matcher);<br><span class="hljs-comment">//创建实例</span><br>        Example&lt;User&gt; example = Example.of(user, matcher);<br>        Page&lt;User&gt; pages = userRepository.findAll(example, pageable);<br>        System.out.println(pages);<br>    &#125;<br><br>    <span class="hljs-comment">//修改</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(<span class="hljs-string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>).get();<br>        user.setName(<span class="hljs-string">&quot;张三_1&quot;</span>);<br>        user.setAge(<span class="hljs-number">25</span>);<br>        user.setEmail(<span class="hljs-string">&quot;883220990@qq.com&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> userRepository.save(user);<br>        System.out.println(save);<br>    &#125;<br><br>    <span class="hljs-comment">//删除</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        userRepository.deleteById(<span class="hljs-string">&quot;5ffbfe8197f24a07007bd6ce&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>比较:</p><p> MongoTemplate相较灵活,MongoRepository可以通过特殊方法名生成特定功能方法,相较简单</p><h3 id="6-副本集"><a href="#6-副本集" class="headerlink" title="6: 副本集"></a>6: 副本集</h3><h4 id="6-1-相关概念"><a href="#6-1-相关概念" class="headerlink" title="6.1: 相关概念"></a>6.1: 相关概念</h4><p> MongoDB中的副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高可用性，是所有生 产部署的基础</p><p> （1）冗余和数据可用性 复制提供冗余并提高数据可用性。</p><p> 通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别 的容错功能，以防止丢失单个数据库服务器。 在某些情况下，复制可以提供增加的读取性能，因为客户端可以将读取操作发送到不同的服务上， 在不 同数据中心维护 数据副本可以增加分布式应用程序的数据位置和可用性。 您还可以为专用目的维护其他 副本，例如灾难恢复，报告或备 份。</p><p> （2）MongoDB中的复制 副本集是一组维护相同数据集的mongod实例。</p><p> 副本集包含多个数据承载节点和可选的一个仲裁节点。 在承载数据的节点中，一个且仅一个成员被视为主节点，而 其他节点被视为次要（从）节点。 主节点接收所有写操作。 副本集只能有一个主要能够确认具有{w：“most”}写入关注 的写入; 虽然在某 些情况下，另一个mongod实例可能暂时认为自己也是主要的。主要记录其操作日志中的数据集的所有 更改，即oplog</p><h4 id="6-2-副本集角色"><a href="#6-2-副本集角色" class="headerlink" title="6.2: 副本集角色"></a>6.2: 副本集角色</h4><p> 副本集有两种类型三种角色</p><p> 两种类型：</p><p> 主节点（Primary）类型：数据操作的主要连接点，可读写。</p><p> 次要（辅助、从）节点（Secondaries）类型：数据冗余备份节点，可以读或选举。</p><p> 三种角色：</p><p> 主要成员（Primary）：主要接收所有写操作。就是主节点。</p><p> 副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作 （但需要配置）。是默认的一种从节点类型。</p><p> 仲裁者（Arbiter）：不保留任何数据的副本，只具有投票选举作用。当然也可以将仲裁服务器维护为副 本集的一部 分，即副本成员同时也可以是仲裁者。也是一种从节点类型。</p><p> 仲裁者不维护数据集。 仲裁者的目的是通过 响应其他副本集成员的心跳和选举请求来维护副本 集中的仲裁。</p><p> <strong>仲裁者将永远是仲裁者，而主要人员可能会退出并成为次要人员，而次要人员可能成为选举期 间的主要 人员。 如果你的副本+主节点的个数是偶数，建议加一个仲裁者，形成奇数，容易满 足大多数的投票。 如果你的副本+主节点的个数是奇数，可以不加仲裁者。</strong></p><h4 id="6-3-副本集创建"><a href="#6-3-副本集创建" class="headerlink" title="6.3: 副本集创建"></a>6.3: 副本集创建</h4><p> 基于docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器 --relSet : 统一副本集名称</span><br>docker run --name m0 -p 37017:27017 -d mongo --replSet &quot;rs&quot;<br><br>docker run --name m1 -p 47017:27017 -d mongo --replSet &quot;rs&quot;<br><br>docker run --name m2 -p 57017:27017 -d mongo --replSet &quot;rs&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器 连接当前容器对应的节点</span><br>docker exec -it 容器id /bin/bash<br>mongo --host=ip --port=port<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加配置,并初始化副本</span><br>var config=&#123;<br>     _id:&quot;rs&quot;, # 副本名称<br>     members:[<br>         &#123;_id:0,host:&quot;47.108.85.19:37017&quot;&#125;,<br>         &#123;_id:1,host:&quot;47.108.85.19:47017&quot;&#125;,<br> &#123;_id:2,host:&quot;47.108.85.19:57017&quot;,arbiterOnly:true&#125; # 该节点为仲裁节点<br>]&#125;;<br><br>rs.initiate(config)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">其他命令</span><br>rs.slave() : #当前节点成为从节点<br>rs.slave(false) # 取消当前节点作为从节点<br>rs.conf() # 查看当前副本集配置<br>rs.status() # 查看当前副本集状态<br>rs.add(&quot;ip:port&quot;) # 添加节点到当前副本集<br>rs.remove(&quot;ip:port&quot;) # 从当前副本集移除节点<br><br><br></code></pre></td></tr></table></figure><h4 id="6-4-副本集读写操作"><a href="#6-4-副本集读写操作" class="headerlink" title="6.4: 副本集读写操作"></a>6.4: 副本集读写操作</h4><p> 主节点: 一般用于写入数据,也可以读,但不推荐</p><p> 从节点: 用于读取数据,也只能读数据,配合主节点实现读写分离</p><p> 仲裁节点: 不存储任何数据,用来参与选举主节点</p><h4 id="6-5-角色选举机制"><a href="#6-5-角色选举机制" class="headerlink" title="6.5: 角色选举机制"></a>6.5: 角色选举机制</h4><p> MongoDB在副本集中，会自动进行主节点的选举，主节点选举的触发条件：</p><p> 1） 主节点故障</p><p> 2）主节点网络不可达（默认心跳信息为10秒）</p><p> 3） 人工干预（rs.stepDown(600)）</p><p> <strong>票数最高，且获得了“大多数”成员的投票支持的节点获胜</strong>。当前节点为N 则获得N&#x2F;2+1节点认可,即为”大多数”</p><p> 当副本集中存活的成员不足大多数时,无法选出主节点,只能进行写操作</p><p> 当以上**两个参数相同时,就看谁的数据最新,就选谁,**数据新旧通过oplog日志比对</p><h4 id="6-6-故障测试-一主一从一仲裁"><a href="#6-6-故障测试-一主一从一仲裁" class="headerlink" title="6.6: 故障测试(一主一从一仲裁)"></a>6.6: 故障测试(一主一从一仲裁)</h4><h5 id="6-6-1-主节点故障"><a href="#6-6-1-主节点故障" class="headerlink" title="6.6.1: 主节点故障"></a>6.6.1: 主节点故障</h5><p> 通过选举机制,从节点会变成主节点,具备读写功能,因为从节点投票给自己和仲裁节点,而仲裁节点不能投给自己,只能 投给别的节点,</p><h5 id="6-6-2-主节点和仲裁节点故障"><a href="#6-6-2-主节点和仲裁节点故障" class="headerlink" title="6.6.2: 主节点和仲裁节点故障"></a>6.6.2: 主节点和仲裁节点故障</h5><p> 从节点不会变为主节点,还是从节点,只具备读功能,</p><p> 因为副本集只有一个存活节点,无法满足的到大多数节点支持的条件,无法选举</p><h5 id="6-6-3-从节点和仲裁节点故障"><a href="#6-6-3-从节点和仲裁节点故障" class="headerlink" title="6.6.3: 从节点和仲裁节点故障"></a>6.6.3: 从节点和仲裁节点故障</h5><p> 主节点降级为从节点,无法提供写操作,</p><p> 6.7: springData连接副本集</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># yaml配置</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-comment">#数据源配置</span><br>  <span class="hljs-attr">data:</span><br><span class="hljs-attr">mongodb:</span><br>    <span class="hljs-string">uri:mongodb://ip:port,ip:port,.../数据库名?connect=replicaSet&amp;slaveOk=true&amp;replicaSet=副本集名</span><br><span class="hljs-comment">#slaveOk = true 表示使用主从节点读写分离</span><br><br><br></code></pre></td></tr></table></figure><h3 id="7-分片集群"><a href="#7-分片集群" class="headerlink" title="7: 分片集群"></a>7: 分片集群</h3><h4 id="7-1-概念"><a href="#7-1-概念" class="headerlink" title="7.1 概念"></a>7.1 概念</h4><p> 分片是一种将跨多台机器分布数据的方法,mongoDB通过该方式来支持具有非常大的数据集 和高吞吐量操作的部署。</p><h4 id="7-2-解决系统增长的方式"><a href="#7-2-解决系统增长的方式" class="headerlink" title="7.2: 解决系统增长的方式"></a>7.2: 解决系统增长的方式</h4><p> 1: 垂直扩展: 增加机器硬件的能力</p><p> 2: 水平扩展: 增加多台机器,共同分担负载</p><h4 id="7-3-分片集群包含的组件"><a href="#7-3-分片集群包含的组件" class="headerlink" title="7.3: 分片集群包含的组件"></a>7.3: 分片集群包含的组件</h4><p> 分片（存储）：每个分片包含分片数据的子集。 每个分片都可以部署为副本集。</p><p> mongos（路由）：mongos充当查询路由器，在客户端应用程序和分片集群之间提供接口。</p><p> config servers（“调度”的配置）：配置服务器存储群集的元数据和配置设置。 从MongoDB 3.4开 始，必须将配置服务器部署为副 本集（CSRS）。</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301114561.png"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202209301114561.png" alt="img"></a></p><h4 id="7-4-搭建分片集群"><a href="#7-4-搭建分片集群" class="headerlink" title="7.4: 搭建分片集群"></a>7.4: 搭建分片集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加两个副本集分片,即副本配置</span><br>docker run --name m0 -p 27018:27017 -d mongo --replSet &quot;shard1&quot;<br>docker run --name m1 -p 27118:27017 -d mongo --replSet &quot;shard1&quot;<br>docker run --name m2 -p 27218:27017 -d mongo --replSet &quot;shard1&quot;<br><br>docker run --name m3 -p 27019:27017 -d mongo --replSet &quot;shard2&quot;<br>docker run --name m4 -p 27119:27017 -d mongo --replSet &quot;shard2&quot;<br>docker run --name m5 -p 27219:27017 -d mongo --replSet &quot;shard2&quot;<br><br>docker run --name m6 -p 27020:27017 -d mongo --replSet &quot;config&quot;<br>docker run --name m7 -p 27120:27017 -d mongo --replSet &quot;config&quot;<br>docker run --name m8 -p 27220:27017 -d mongo --replSet &quot;config&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">分别进入主节点容器</span><br>docker exec -it 容器id /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">连接</span><br>mongo --host=ip --port=port<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分别添加配置</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">arbiterOnly:<span class="hljs-literal">true</span> 表示该节点为仲裁节点,配置服务器不需要该配置</span><br>var config=&#123;<br>     _id:&quot;副本名称&quot;<br>     members:[<br>         &#123;_id:0,host:&quot;ip:port&quot;&#125;,<br>         &#123;_id:1,host:&quot;ip:port&quot;&#125;,<br> &#123;_id:2,host:&quot;ip:port&quot;,arbiterOnly:true&#125;<br>]&#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化副本集</span><br>rs.initiate(config)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加路由和配置服务绑定</span><br>docker run --name mongos0 -d -p 27017:27017 --entrypoint mongos mongo --configdb shard1/47.108.85.19:27020,47.108.85.19:27120,47.108.85.19:27220 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加分片到路由</span><br>sh.addShard(&quot;分片名/ip:port,ipport,ip:port&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启数据库分片功能</span><br>sh. sh.enableSharding(&quot;数据库名&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启集合分片</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">namespace : 数据库名.集合名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">key : 分片规则 ,1:哈希策略 &#123;<span class="hljs-string">&quot;key&quot;</span>:hashed&#125;通过计算key的<span class="hljs-built_in">hash</span>值进行分片</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2: 范围策略: &#123;<span class="hljs-string">&quot;key&quot;</span>:1&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">unique: boolean类型,一般不写,就当key键为唯一索引时,<span class="hljs-literal">true</span>可以提升性能</span><br>sh.shardCollection(namespace, key, unique)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">哈希分片和范围分片的区别</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">范围分片拥有较好的查询性能,因为查询时可以通过计算范围到指定的分片中查找,但是在极端情况中,会导致集群中大部分的数据有小部分分片存<span class="hljs-comment"># 储,没有将数据分担给每个分片</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">哈希分片: 能够将数据均匀分摊给多个分片,但是由于其分数据的随机性,会导致查询时,查询所有分片的情况,导致查询性能下降</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">推荐使用哈希分片</span><br><br><br><br><br></code></pre></td></tr></table></figure><h4 id="7-5-SpringData连接配置"><a href="#7-5-SpringData连接配置" class="headerlink" title="7.5 SpringData连接配置"></a>7.5 SpringData连接配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># 连接分片集群只用配置其路由节点(可有多个,逗号隔开)和数据库即可</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-comment">#数据源配置</span><br><span class="hljs-attr">data:</span><br><span class="hljs-attr">mongodb:</span><br><span class="hljs-comment">#连接路由字符串</span><br><span class="hljs-attr">uri:</span> <span class="hljs-string">mongodb://路由节点ip:路由节点端口/数据库名</span><br><span class="hljs-comment"># springData自带负载均衡策略</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell编程</title>
    <link href="/2023/07/27/shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/07/27/shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h2><h3 id="1-shell简介"><a href="#1-shell简介" class="headerlink" title="1: shell简介"></a>1: shell简介</h3><p> shell是一个命令行解释器，它为用户提供了一个向linux内核发送请求以便运行程序的界面系统级程序，用户可以用shell来启动、挂起、停止甚至是编写一些程序。</p><h3 id="2-shell脚本的执行方式"><a href="#2-shell脚本的执行方式" class="headerlink" title="2: shell脚本的执行方式"></a>2: shell脚本的执行方式</h3><h4 id="2-1-脚本格式要求"><a href="#2-1-脚本格式要求" class="headerlink" title="2.1: 脚本格式要求"></a>2.1: 脚本格式要求</h4><p> 脚本以#!&#x2F;bin&#x2F;bash开头<br>​ 脚本需要有可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">vim hello.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;hello&quot;<br><br>sh hello.sh<br><br></code></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081542293.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081542293.jpg" alt="Dingtalk_20221008154114"></a><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081544108.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081544108.jpg" alt="Dingtalk_20221008154420"></a></p><h4 id="2-2-脚本常用的执行方式"><a href="#2-2-脚本常用的执行方式" class="headerlink" title="2.2: 脚本常用的执行方式"></a>2.2: 脚本常用的执行方式</h4><p> 输入脚本的绝对路径或者相对路径（首先要赋予.sh文件可执行权限，再执行脚本）<br>​ sh+脚本名（不用赋予脚本可执行权限，直接执行即可）</p><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3: 变量"></a>3: 变量</h3><h4 id="3-1：变量介绍"><a href="#3-1：变量介绍" class="headerlink" title="3.1：变量介绍"></a>3.1：变量介绍</h4><p> shell变量分为用户变量和系统变量</p><p> 其中：$HOME、$PWD、$SHELL、$USER等为系统变量</p><p> 显示当前shell中所有变量用 set命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">！/bin/bash</span><br>echo &quot;hello&quot;<br>echo &quot;$HOME&quot;<br>set<br><br><br></code></pre></td></tr></table></figure><p> 输出：</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081558179.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081558179.jpg" alt="Dingtalk_20221008155712"></a></p><h4 id="3-2：定义变量"><a href="#3-2：定义变量" class="headerlink" title="3.2：定义变量"></a>3.2：定义变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">变量名 = 值</span><br>A = 100<br>echo &quot;$A&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">撤销变量 <span class="hljs-built_in">unset</span> 变量名</span> <br>unset A<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">静态变量 不可撤销</span><br>readonly A = 10<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将指令结果赋值给变量 反引号或者$()</span><br>C = `date`<br>D = $(date)<br><br></code></pre></td></tr></table></figure><h4 id="3-3-设置环境变量"><a href="#3-3-设置环境变量" class="headerlink" title="3.3: 设置环境变量"></a>3.3: 设置环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">将shell变量输出为环境变量/全局变量 即添加一个环境变量，一般在/etc/profile中添加</span><br>export 变量名=变量值<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">让配置文件生效</span><br>source 配置文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> $变量名 输出变量</span><br>echo $变量名<br><br><br></code></pre></td></tr></table></figure><p>如下： 在&#x2F;etc&#x2F;profile中设置变量，刷新后输出</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081629456.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081629456.jpg" alt="Dingtalk_20221008162801"></a><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081629271.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081629271.jpg" alt="Dingtalk_20221008162823"></a></p><h4 id="3-4：参数传递"><a href="#3-4：参数传递" class="headerlink" title="3.4：参数传递"></a>3.4：参数传递</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">如 sh test.sh 100 200，可以使用<span class="hljs-variable">$1</span>~<span class="hljs-variable">$9</span> 获取知道位置的参数,<span class="hljs-variable">$1</span>就是传入的100，以此类推</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">10以上的参数加上大括号如 <span class="hljs-variable">$&#123;10&#125;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">$*: 代表传入的所有参数，把所有传入参数看作一个整体</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-variable">$@</span>: 代表传入的所有参数把所有参数分开对待</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-variable">$#</span>: 代表传入参数个数</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;$1 $2 $3&quot;<br>echo &quot;$*&quot;<br>echo &quot;$@&quot;<br>echo &quot;$#&quot;<br><br>sh test.sh 10 11 12<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不使用“”和<span class="hljs-keyword">for</span>循环来操作$*和<span class="hljs-variable">$@</span>时没什么区别</span><br><br></code></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081643967.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081643967.jpg" alt="Dingtalk_20221008164223"></a></p><h4 id="3-5：预定义变量"><a href="#3-5：预定义变量" class="headerlink" title="3.5：预定义变量"></a>3.5：预定义变量</h4><p> 即预先设计好的变量，拿起即可使用</p><p> 如：</p><ol><li><p>$$ : 当前进程的进程id</p></li><li><p>$! : 后台运行的最后一个进程的id</p></li><li><p>#? : 最后一次命令执行的状态，0为正确执行，否则执行错误</p></li></ol><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081659384.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081659384.jpg" alt="Dingtalk_20221008165907"></a><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081659653.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081659653.jpg" alt="Dingtalk_20221008165918"></a></p><h4 id="3-6：运算符"><a href="#3-6：运算符" class="headerlink" title="3.6：运算符"></a>3.6：运算符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">$((运算式))或$[运算式], <span class="hljs-built_in">expr</span> 运算式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">expr</span>的运算式直接必须有空格 <span class="hljs-built_in">expr</span> m - n</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">加.减.乘.除.取余 =&gt; + - \* / %</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">expr</span>赋值给变量使用反引号 如 var = <span class="hljs-built_in">expr</span> `1 + 2`</span><br><br></code></pre></td></tr></table></figure><h4 id="3-7-条件判断"><a href="#3-7-条件判断" class="headerlink" title="3.7: 条件判断"></a>3.7: 条件判断</h4><p>[ 条件 ] ：[] 与条件之间必须有空格</p><p><strong>数值判断</strong></p><p>-eq 检测两个数是否相等，相等返回 true。 [ $a -eq $b ]<br>-ne 检测两个数是否相等，不相等返回 true。 [ $a -ne $b ]<br>-gt 检测左边的数是否大于右边的，如果是，则返回 true。 [ $a -gt $b ]<br>-lt 检测左边的数是否小于右边的，如果是，则返回 true。 [ $a -lt $b ]<br>-ge 检测左边的数是否大于等于右边的，如果是，则返回 true。 [ $a -ge $b ]<br>-le 检测左边的数是否小于等于右边的，如果是，则返回 true。 [ $a -le $b ]</p><p><strong>逻辑判断</strong></p><p>! 非运算，表达式为 true 则返回 false，否则返回 true。 [ ! false ]<br>-o 或（或者）运算，有一个表达式为 true 则返回 true。 [ $a -lt 20 -o $b -gt 100 ]<br>-a 与（并且）运算，两个表达式都为 true 才返回 true。 [ $a -lt 20 -a $b -gt 100 ]</p><p><strong>字符串判断</strong></p><p>&#x3D; 检测两个字符串是否相等，相等返回 true。 [ $a &#x3D; $b ] 返回 false。<br>!&#x3D; 检测两个字符串是否相等，不相等返回 true。 [ $a !&#x3D; $b ] 返回 true。<br>-z 检测字符串长度是否为0，为0返回 true。 [ -z $a ] 返回 false。<br>-n 检测字符串长度是否为0，不为0返回 true。 [ -n $a ] 返回 true。<br>str 检测字符串是否为空，不为空返回 true。 [ $a ] 返回 true。</p><p><strong>文件判断</strong></p><p>-b file 检测文件是否是块设备文件，如果是，则返回 true。<br>-c file 检测文件是否是字符设备文件，如果是，则返回 true。<br>-d file 检测文件是否是目录，如果是，则返回 true。<br>-f file 检测文件是否是普通文件（既不是目录，也不是设备文件）<br>-g file 检测文件是否设置了 SGID 位，如果是，则返回 true。<br>-k file 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。<br>-p file 检测文件是否是有名管道，如果是，则返回 true。<br>-u file 检测文件是否设置了 SUID 位，如果是，则返回 true。<br>-r file 检测文件是否可读，如果是，则返回 true。<br>-w file 检测文件是否可写，如果是，则返回 true。<br>-x file 检测文件是否可执行，如果是，则返回 true。<br>-s file 检测文件是否为空（文件大小是否大于0），不为空返回 true<br>-e file 检测文件（包括目录）是否存在，如果是，则返回 true</p><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081711874.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081711874.jpg" alt="Dingtalk_20221008171107"></a></p><p><strong>流程控制语句</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">if</span></span><br>if [ condition ]<br>then<br>代码<br>elif [ condition ]<br>then<br>代码<br>...<br>fi<br><br><br><br></code></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081746155.jpg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081746155.jpg" alt="Dingtalk_20221008174628"></a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">SHELL</span><br></code></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081749865.jpeg"><img src="https://cdn.jsdelivr.net/gh/lier-ok/typora_pic@main/img/202210081749865.jpeg" alt="Dingtalk_20221008174916"></a></p><h4 id="3-8：循环"><a href="#3-8：循环" class="headerlink" title="3.8：循环"></a>3.8：循环</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span></span><br>for((初始值;结束条件;变化))<br>do<br>代码<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>SUM = 0<br>for(( i = 1;i &lt;= 100; i++))<br>do<br>SUM=$[$SUM+$i]<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">while</span></span><br>while [ condition ]<br>do<br>代码<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>sum = 0<br>while [ i -le 100 ]<br>do<br>sum=$[$sum+$i]<br>i=$[$i+1]<br>done<br><br><br><br></code></pre></td></tr></table></figure><h4 id="3-9-读取控制台输入"><a href="#3-9-读取控制台输入" class="headerlink" title="3.9:读取控制台输入"></a>3.9:读取控制台输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">read</span>(选项)(参数)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">选项</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p 指定读取值时提示符</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-t 指定读取值时等待几秒，若没有在指定时间输入，不等待</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">变量：指定读取值的变量名</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">！/bin/bash</span><br>read -p num1<br>echo &quot;$num1&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定读取等待10s</span><br>read -t 10 -p num2<br>echo &quot;$num2&quot;<br><br><br></code></pre></td></tr></table></figure><h3 id="4-函数"><a href="#4-函数" class="headerlink" title="4: 函数"></a>4: 函数</h3><h4 id="4-1：系统函数"><a href="#4-1：系统函数" class="headerlink" title="4.1：系统函数"></a>4.1：系统函数</h4><p> basename : 返回完整路径&#x2F;后的部分，即获取文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">basename /home/aaa/test.txt : 获取test.txt部分<br><br><br></code></pre></td></tr></table></figure><p> dirname : 返回完整路径&#x2F;前的部分。即获取文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">dirname /home/aaa/test.txt : 获取/home/aaa<br><br><br></code></pre></td></tr></table></figure><h4 id="4-2-自定义函数"><a href="#4-2-自定义函数" class="headerlink" title="4.2: 自定义函数"></a>4.2: 自定义函数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">语法</span><br>function 函数名()&#123;<br>函数体<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">调用</span><br><br>函数名 [值]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">例子</span><br>function getSun()&#123;<br>sum = $[$n1+$n2]<br>echo &quot;$sum&quot;<br>&#125;<br>read -p n1<br>read -p n2<br>getSum $n1 $n2<br><br><br></code></pre></td></tr></table></figure><h3 id="5-实现下拉代码构建镜像脚本"><a href="#5-实现下拉代码构建镜像脚本" class="headerlink" title="5: 实现下拉代码构建镜像脚本"></a>5: 实现下拉代码构建镜像脚本</h3><p> 实现自动下拉gitLab中的代码，并构建docker镜像和容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建目录</span><br>fileName=&quot;cicd&quot;<br>cd /home<br>if [ ! -e $fileName ]<br>then<br>   mkdir $fileName<br>fi<br><br>cd /home/cicd<br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化代码仓库</span><br>git init<br><span class="hljs-meta prompt_">#</span><span class="language-bash">git 下拉代码</span><br>gitAccount=&quot;lier-lier&quot;<br>gitPassword=&quot;lyd20000914.&quot;<br><br>/usr/bin/expect&lt;&lt;eof<br>set timeout 10<br>spawn git pull  https://gitee.com/lier-lier/cicd.git<br>expect &quot;Username*&quot;<br>send &quot;$gitAccount\n&quot;<br>expect &quot;Password*&quot;<br>send &quot;$gitPassword\n&quot;<br>expect eof<br>exit<br>eof<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">maven打包</span><br>/usr/bin/expect&lt;&lt;eof<br>set timeout 1000<br>spawn mvn clean<br>spawn mvn package<br>expect eof<br>exit<br>eof<br><br>cp target/cicd-0.0.1-SNAPSHOT.jar /home/docker<br>cp src/main/docker/Dockerfile /home/docker<br><br>cd /home/docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash">构建镜像</span><br>docker build -t 10.3.0.88/cicd/cicd/1.0 .<br><br>docker rm -f cicd<br><br>docker run -itd -p 8001:8001 --name cicd 10.3.0.88/cicd/cicd/1.0<br><br><br></code></pre></td></tr></table></figure><p><strong>except使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装except</span><br>yum install except<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在shell中写expect脚本</span><br>/usr/bin/expect&lt;&lt;eof<br>set timeout 10  #超时时间<br>spawn git pull  https://gitee.com/lier-lier/cicd.git #调用命令<br>expect &quot;Username*&quot; # 控制台触发Username开头字符<br>send &quot;$gitAccount\n&quot; #出发后输入密码<br>expect &quot;Password*&quot;<br>send &quot;$gitPassword\n&quot;<br>expect eof<br>exit<br>eof<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>shell编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlockCanary使用</title>
    <link href="/2023/07/27/BlockCanary%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/27/BlockCanary%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="BlockCanary使用详解"><a href="#BlockCanary使用详解" class="headerlink" title="BlockCanary使用详解"></a>BlockCanary使用详解</h3><h4 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h4><p> 用于检测主线程中各种卡慢的问题，会记录发生卡顿的各种信息，输出到指定的配置文件</p><h4 id="2-如何使用"><a href="#2-如何使用" class="headerlink" title="2.如何使用"></a>2.如何使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//引入依赖</span><br>implementation <span class="hljs-string">&#x27;com.github.markzhai:blockcanary-android:1.5.0&#x27;</span><br><br>YML<br><span class="hljs-comment">//创建实现类，自定义上下文参数配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBlockCanaryContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BlockCanaryContext</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">provideBlockThreshold</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//配置block阈值，在此持续时间内的dispatch被视为BLOCK。您可以根据设备的性能进行设  //置，单位为毫秒</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">500</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBlock</span><span class="hljs-params">(Context context, BlockInfo blockInfo)</span> &#123;<br>        <span class="hljs-comment">//Block拦截器，开发者可以提供自己的动作</span><br>        Toast.makeText(context, <span class="hljs-string">&quot;UI阻塞了，耗时：&quot;</span> + blockInfo.timeCost, Toast.LENGTH_SHORT).show();<br>        Log.i(<span class="hljs-string">&quot;bqt&quot;</span>, <span class="hljs-string">&quot;【UI阻塞了】耗时：&quot;</span> + blockInfo.timeCost + <span class="hljs-string">&quot;\n&quot;</span> + blockInfo.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">providePath</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//日志文件保存地址，每监测到一次卡顿都将在SD卡上保存一个单独的日志文件</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/blockcanary/&quot;</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">displayNotification</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//设为true时，当监测到卡顿后会在通知栏提醒</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">stopWhenDebugging</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//是否在debug模式是关闭，如果关闭则返回true</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">provideDumpInterval</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//线程 stack dump 间隔，当block发生时使用，BlockCanary将根据当前采样周期在主线程   //堆栈上dump</span><br>        <span class="hljs-comment">//因为Looper的实现机制，实际dump间隔会比这里指定的长，特别是当cpu比较繁忙时</span><br>        <span class="hljs-keyword">return</span> provideBlockThreshold(); <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">provideMonitorDuration</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//配置Monitor持续的时间，过了这个时间以后BlockCanary就会停止，单位是小时，-1表示         //不会停止</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">zip</span><span class="hljs-params">(File[] src, File dest)</span> &#123;<br>        <span class="hljs-comment">//参数为压缩前的文件列表和压缩后的文件，返回 true 代表压缩成功</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upload</span><span class="hljs-params">(File zippedFile)</span> &#123;<br>        <span class="hljs-comment">//用以将压缩后的日志文件上传到服务器，zip返回true才会调用</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(); <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">concernPackages</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//开发者所关心的包，默认情况下使用进程名称，如果只关心 package with process             //name，则返回null</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">filterNonConcernStack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//过滤掉那些没有任何包存在于 concernPackages() 方法所指定的包中的 stack。如果开         //启过滤返回true</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">provideWhiteList</span><span class="hljs-params">()</span> &#123;<br>        LinkedList&lt;String&gt; whiteList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        whiteList.add(<span class="hljs-string">&quot;org.chromium&quot;</span>);<br>        <span class="hljs-comment">//提供白名单，白名单中的条目不会显示在ui列表中。z，则返回null</span><br>        <span class="hljs-keyword">return</span> whiteList; <br>        <span class="hljs-comment">//注意，经过测试发现此库有一个bug，如果这里返回null，当点击通知栏或点击桌面上的&quot;Blocks&quot;时，应用就会崩溃！</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteFilesInWhiteList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//与白名单一起使用，是否删除那些其stack存在于白名单中的文件。如果删除则返回true</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">provideQualifier</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//指定限定符，例如version + flavor</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unknown&quot;</span>; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">provideUid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;uid&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">provideNetworkType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//网络类型，2G, 3G, 4G, wifi, etc.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unknown&quot;</span>; <br>    &#125;<br>&#125;<br><br>JAVA<br><span class="hljs-comment">//layout</span><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span><br>    xmlns:app=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span><br>    xmlns:tools=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span><br>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span><br>    tools:context=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;<br><br>    &lt;Button<br>        android:id=<span class="hljs-string">&quot;@+id/blockCanary&quot;</span><br>        android:layout_width=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:layout_height=<span class="hljs-string">&quot;wrap_content&quot;</span><br>        android:text=<span class="hljs-string">&quot;BlockCanary卡顿检测&quot;</span><br>        app:layout_constraintTop_toTopOf=<span class="hljs-string">&quot;parent&quot;</span> /&gt;<br><br>&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;<br><br>XML<br><span class="hljs-comment">//MainActivity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-comment">//模拟APP卡顿</span><br>        findViewById(R.id.blockCanary).setOnClickListener(view -&gt; SystemClock.sleep(<span class="hljs-number">500</span>));<br><br>        <span class="hljs-comment">//初始化blockCanary</span><br>        BlockCanary.install(<span class="hljs-built_in">this</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBlockCanaryContext</span>()).start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">D/CompatibilityChangeReporter: Compat change id reported: <span class="hljs-number">147798919</span>; UID <span class="hljs-number">10135</span>; state: DISABLED<br>I/bqt: 【UI阻塞了】耗时：<span class="hljs-number">503</span><br>    qua = <span class="hljs-type">unknown</span><br>    <span class="hljs-variable">versionName</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span><br>    versionCode = <span class="hljs-number">1</span><br>    imei = <span class="hljs-type">empty_imei</span><br>    <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> <span class="hljs-type">uid</span><br>    <span class="hljs-variable">network</span> <span class="hljs-operator">=</span> <span class="hljs-type">unknown</span><br>    <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> Android SDK built <span class="hljs-keyword">for</span> x86<br>    api-level = <span class="hljs-number">30</span> <span class="hljs-number">11</span><br>    cpu-core = <span class="hljs-number">4</span><br>    process = com.lier.<span class="hljs-type">blockcanary</span><br>    <span class="hljs-variable">freeMemory</span> <span class="hljs-operator">=</span> <span class="hljs-number">1279360</span><br>    totalMemory = <span class="hljs-number">2028196</span><br>    time = <span class="hljs-number">503</span><br>    thread-time = <span class="hljs-number">2</span><br>    time-start = <span class="hljs-number">07</span>-<span class="hljs-number">24</span> <span class="hljs-number">06</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40.795</span><br>    time-end = <span class="hljs-number">07</span>-<span class="hljs-number">24</span> <span class="hljs-number">06</span>:<span class="hljs-number">54</span>:<span class="hljs-number">41.298</span><br>    cpu-busy = <span class="hljs-literal">false</span><br>    cpu-rate = <br>    stack = <span class="hljs-number">07</span>-<span class="hljs-number">24</span> <span class="hljs-number">06</span>:<span class="hljs-number">54</span>:<span class="hljs-number">41.197</span><br>    <br>    java.lang.Thread.sleep(Native Method)<br>    java.lang.Thread.sleep(Thread.java:<span class="hljs-number">442</span>)<br>    java.lang.Thread.sleep(Thread.java:<span class="hljs-number">358</span>)<br>    android.os.SystemClock.sleep(SystemClock.java:<span class="hljs-number">131</span>)<br>    com.lier.blockcanary.MainActivity.lambda$onCreate$<span class="hljs-number">0</span>(MainActivity.java:<span class="hljs-number">18</span>)<br>    com.lier.blockcanary.-$$Lambda$MainActivity$EX4BSoI9N52tcQrEKo7P4196M6s.onClick(Unknown Source:<span class="hljs-number">0</span>)<br>    android.view.View.performClick(View.java:<span class="hljs-number">7448</span>)<br>    com.google.android.material.button.MaterialButton.performClick(MaterialButton.java:<span class="hljs-number">992</span>)<br>    android.view.View.performClickInternal(View.java:<span class="hljs-number">7425</span>)<br>    android.view.View.access$<span class="hljs-number">3600</span>(View.java:<span class="hljs-number">810</span>)<br>    android.view.View$PerformClick.run(View.java:<span class="hljs-number">28305</span>)<br>    android.os.Handler.handleCallback(Handler.java:<span class="hljs-number">938</span>)<br>    android.os.Handler.dispatchMessage(Handler.java:<span class="hljs-number">99</span>)<br>    android.os.Looper.loop(Looper.java:<span class="hljs-number">223</span>)<br>    android.app.ActivityThread.main(ActivityThread.java:<span class="hljs-number">7656</span>)<br>    java.lang.reflect.Method.invoke(Native Method)<br>    com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:<span class="hljs-number">592</span>)<br>    com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="hljs-number">947</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
